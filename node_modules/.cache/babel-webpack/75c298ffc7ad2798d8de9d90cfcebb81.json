{"ast":null,"code":"import _createClass from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Attribute, Inject, Optional, ViewChild, Input, Output, Directive, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\n\nvar MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n  providedIn: 'root',\n  factory: function factory() {\n    return {\n      disableToggleValue: false\n    };\n  }\n});\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for slide-toggle components.\n\nvar nextUniqueId = 0;\n/** @docs-private */\n\nvar MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return MatSlideToggle;\n  }),\n  multi: true\n};\n/** Change event object emitted by a MatSlideToggle. */\n\nvar MatSlideToggleChange = function MatSlideToggleChange(\n/** The source MatSlideToggle of the event. */\nsource,\n/** The new `checked` value of the MatSlideToggle. */\nchecked) {\n  _classCallCheck(this, MatSlideToggleChange);\n\n  this.source = source;\n  this.checked = checked;\n}; // Boilerplate for applying mixins to MatSlideToggle.\n\n/** @docs-private */\n\n\nvar MatSlideToggleBase = function MatSlideToggleBase(_elementRef) {\n  _classCallCheck(this, MatSlideToggleBase);\n\n  this._elementRef = _elementRef;\n};\n\nvar _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n\n\nvar MatSlideToggle = /*#__PURE__*/function (_MatSlideToggleMixinB) {\n  _inherits(MatSlideToggle, _MatSlideToggleMixinB);\n\n  var _super = _createSuper(MatSlideToggle);\n\n  function MatSlideToggle(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, defaults, _animationMode) {\n    var _this;\n\n    _classCallCheck(this, MatSlideToggle);\n\n    _this = _super.call(this, elementRef);\n    _this._focusMonitor = _focusMonitor;\n    _this._changeDetectorRef = _changeDetectorRef;\n    _this.defaults = defaults;\n    _this._animationMode = _animationMode;\n\n    _this._onChange = function (_) {};\n\n    _this._onTouched = function () {};\n\n    _this._uniqueId = \"mat-slide-toggle-\".concat(++nextUniqueId);\n    _this._required = false;\n    _this._checked = false;\n    /** Name value will be applied to the input element if present. */\n\n    _this.name = null;\n    /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n\n    _this.id = _this._uniqueId;\n    /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n\n    _this.labelPosition = 'after';\n    /** Used to set the aria-label attribute on the underlying input element. */\n\n    _this.ariaLabel = null;\n    /** Used to set the aria-labelledby attribute on the underlying input element. */\n\n    _this.ariaLabelledby = null;\n    /** An event will be dispatched each time the slide-toggle changes its value. */\n\n    _this.change = new EventEmitter();\n    /**\n     * An event will be dispatched each time the slide-toggle input is toggled.\n     * This event is always emitted when the user toggles the slide toggle, but this does not mean\n     * the slide toggle's value has changed.\n     */\n\n    _this.toggleChange = new EventEmitter();\n    _this.tabIndex = parseInt(tabIndex) || 0;\n    return _this;\n  }\n  /** Whether the slide-toggle is required. */\n\n\n  _createClass(MatSlideToggle, [{\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this2 = this;\n\n      this._focusMonitor.monitor(this._elementRef, true).subscribe(function (focusOrigin) {\n        // Only forward focus manually when it was received programmatically or through the\n        // keyboard. We should not do this for mouse/touch focus for two reasons:\n        // 1. It can prevent clicks from landing in Chrome (see #18269).\n        // 2. They're already handled by the wrapping `label` element.\n        if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n          _this2._inputElement.nativeElement.focus();\n        } else if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(function () {\n            return _this2._onTouched();\n          });\n        }\n      });\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /** Method being called whenever the underlying input emits a change event. */\n\n  }, {\n    key: \"_onChangeEvent\",\n    value: function _onChangeEvent(event) {\n      // We always have to stop propagation on the change event.\n      // Otherwise the change event, from the input element, will bubble up and\n      // emit its event object to the component's `change` output.\n      event.stopPropagation();\n      this.toggleChange.emit(); // When the slide toggle's config disables toggle change event by setting\n      // `disableToggleValue: true`, the slide toggle's value does not change, and the\n      // checked state of the underlying input needs to be changed back.\n\n      if (this.defaults.disableToggleValue) {\n        this._inputElement.nativeElement.checked = this.checked;\n        return;\n      } // Sync the value from the underlying input element with the component instance.\n\n\n      this.checked = this._inputElement.nativeElement.checked; // Emit our custom change event only if the underlying input emitted one. This ensures that\n      // there is no change event, when the checked state changes programmatically.\n\n      this._emitChangeEvent();\n    }\n    /** Method being called whenever the slide-toggle has been clicked. */\n\n  }, {\n    key: \"_onInputClick\",\n    value: function _onInputClick(event) {\n      // We have to stop propagation for click events on the visual hidden input element.\n      // By default, when a user clicks on a label element, a generated click event will be\n      // dispatched on the associated input element. Since we are using a label element as our\n      // root container, the click event on the `slide-toggle` will be executed twice.\n      // The real click event will bubble up, and the generated click event also tries to bubble up.\n      // This will lead to multiple click events.\n      // Preventing bubbling for the second event will solve that issue.\n      event.stopPropagation();\n    }\n    /** Implemented as part of ControlValueAccessor. */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.checked = !!value;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._onChange = fn;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    /** Implemented as a part of ControlValueAccessor. */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /** Focuses the slide-toggle. */\n\n  }, {\n    key: \"focus\",\n    value: function focus(options) {\n      this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n    }\n    /** Toggles the checked state of the slide-toggle. */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      this.checked = !this.checked;\n\n      this._onChange(this.checked);\n    }\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     */\n\n  }, {\n    key: \"_emitChangeEvent\",\n    value: function _emitChangeEvent() {\n      this._onChange(this.checked);\n\n      this.change.emit(new MatSlideToggleChange(this, this.checked));\n    }\n    /** Method being called whenever the label text changes. */\n\n  }, {\n    key: \"_onLabelTextChange\",\n    value: function _onLabelTextChange() {\n      // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n      // slide-toggle component will be only marked for check, but no actual change detection runs\n      // automatically. Instead of going back into the zone in order to trigger a change detection\n      // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n      // we only trigger an explicit change detection for the slide-toggle view and its children.\n      this._changeDetectorRef.detectChanges();\n    }\n  }, {\n    key: \"required\",\n    get: function get() {\n      return this._required;\n    },\n    set: function set(value) {\n      this._required = coerceBooleanProperty(value);\n    }\n    /** Whether the slide-toggle element is checked or not. */\n\n  }, {\n    key: \"checked\",\n    get: function get() {\n      return this._checked;\n    },\n    set: function set(value) {\n      this._checked = coerceBooleanProperty(value);\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /** Returns the unique id for the visual hidden input. */\n\n  }, {\n    key: \"inputId\",\n    get: function get() {\n      return \"\".concat(this.id || this._uniqueId, \"-input\");\n    }\n  }]);\n\n  return MatSlideToggle;\n}(_MatSlideToggleMixinBase);\n\nMatSlideToggle.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-slide-toggle',\n    exportAs: 'matSlideToggle',\n    host: {\n      'class': 'mat-slide-toggle',\n      '[id]': 'id',\n      // Needs to be `-1` so it can still receive programmatic focus.\n      '[attr.tabindex]': 'disabled ? null : -1',\n      '[attr.aria-label]': 'null',\n      '[attr.aria-labelledby]': 'null',\n      '[class.mat-checked]': 'checked',\n      '[class.mat-disabled]': 'disabled',\n      '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n      '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n    },\n    template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n    providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n    inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"]\n  }]\n}];\n\nMatSlideToggle.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: FocusMonitor\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }];\n};\n\nMatSlideToggle.propDecorators = {\n  _thumbEl: [{\n    type: ViewChild,\n    args: ['thumbContainer']\n  }],\n  _thumbBarEl: [{\n    type: ViewChild,\n    args: ['toggleBar']\n  }],\n  name: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  labelPosition: [{\n    type: Input\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  required: [{\n    type: Input\n  }],\n  checked: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  toggleChange: [{\n    type: Output\n  }],\n  _inputElement: [{\n    type: ViewChild,\n    args: ['input']\n  }]\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return MatSlideToggleRequiredValidator;\n  }),\n  multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\n\nvar MatSlideToggleRequiredValidator = /*#__PURE__*/function (_CheckboxRequiredVali) {\n  _inherits(MatSlideToggleRequiredValidator, _CheckboxRequiredVali);\n\n  var _super2 = _createSuper(MatSlideToggleRequiredValidator);\n\n  function MatSlideToggleRequiredValidator() {\n    _classCallCheck(this, MatSlideToggleRequiredValidator);\n\n    return _super2.apply(this, arguments);\n  }\n\n  return MatSlideToggleRequiredValidator;\n}(CheckboxRequiredValidator);\n\nMatSlideToggleRequiredValidator.decorators = [{\n  type: Directive,\n  args: [{\n    selector: \"mat-slide-toggle[required][formControlName],\\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]\",\n    providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** This module is used by both original and MDC-based slide-toggle implementations. */\n\nvar _MatSlideToggleRequiredValidatorModule = function _MatSlideToggleRequiredValidatorModule() {\n  _classCallCheck(this, _MatSlideToggleRequiredValidatorModule);\n};\n\n_MatSlideToggleRequiredValidatorModule.decorators = [{\n  type: NgModule,\n  args: [{\n    exports: [MatSlideToggleRequiredValidator],\n    declarations: [MatSlideToggleRequiredValidator]\n  }]\n}];\n\nvar MatSlideToggleModule = function MatSlideToggleModule() {\n  _classCallCheck(this, MatSlideToggleModule);\n};\n\nMatSlideToggleModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [_MatSlideToggleRequiredValidatorModule, MatRippleModule, MatCommonModule, ObserversModule],\n    exports: [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule],\n    declarations: [MatSlideToggle]\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleRequiredValidatorModule };","map":{"version":3,"sources":["../../../../../../src/material/slide-toggle/slide-toggle-config.ts","../../../../../../src/material/slide-toggle/slide-toggle.ts","../../../../../../src/material/slide-toggle/slide-toggle-required-validator.ts","../../../../../../src/material/slide-toggle/slide-toggle-module.ts","../../../../../../src/material/slide-toggle/public-api.ts","../../../../../../src/material/slide-toggle/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty, NumberInput} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    // Needs to be `-1` so it can still receive programmatic focus.\n    '[attr.tabindex]': 'disabled ? null : -1',\n    '[attr.aria-label]': 'null',\n    '[attr.aria-labelledby]': 'null',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n                                                                        ControlValueAccessor,\n                                                                        CanDisable, CanColor,\n                                                                        HasTabIndex,\n                                                                        CanDisableRipple {\n  private _onChange = (_: any) => {};\n  private _onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        // Only forward focus manually when it was received programmatically or through the\n        // keyboard. We should not do this for mouse/touch focus for two reasons:\n        // 1. It can prevent clicks from landing in Chrome (see #18269).\n        // 2. They're already handled by the wrapping `label` element.\n        if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n          this._inputElement.nativeElement.focus();\n        } else if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this._onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n    this.toggleChange.emit();\n\n    // When the slide toggle's config disables toggle change event by setting\n    // `disableToggleValue: true`, the slide toggle's value does not change, and the\n    // checked state of the underlying input needs to be changed back.\n    if (this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this._onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this._onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  static ngAcceptInputType_required: BooleanInput;\n  static ngAcceptInputType_checked: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_tabIndex: NumberInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\n@Directive({\n  selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n  providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR],\n})\nexport class MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatSlideToggle} from './slide-toggle';\nimport {MatSlideToggleRequiredValidator} from './slide-toggle-required-validator';\n\n/** This module is used by both original and MDC-based slide-toggle implementations. */\n@NgModule({\n  exports: [MatSlideToggleRequiredValidator],\n  declarations: [MatSlideToggleRequiredValidator],\n})\nexport class _MatSlideToggleRequiredValidatorModule {}\n\n@NgModule({\n  imports: [\n    _MatSlideToggleRequiredValidatorModule,\n    MatRippleModule,\n    MatCommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    _MatSlideToggleRequiredValidatorModule,\n    MatSlideToggle,\n    MatCommonModule\n  ],\n  declarations: [MatSlideToggle],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './slide-toggle-module';\nexport * from './slide-toggle';\nexport * from './slide-toggle-config';\nexport * from './slide-toggle-required-validator';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}