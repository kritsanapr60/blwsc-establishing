{"ast":null,"code":"import _createClass from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { Directive, NgZone, ElementRef, Renderer2, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { AriaDescriber, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar nextId = 0; // Boilerplate for applying mixins to MatBadge.\n\n/** @docs-private */\n\nvar MatBadgeBase = function MatBadgeBase() {\n  _classCallCheck(this, MatBadgeBase);\n};\n\nvar _MatBadgeMixinBase = mixinDisabled(MatBadgeBase);\n/** Directive to display a text badge. */\n\n\nvar MatBadge = /*#__PURE__*/function (_MatBadgeMixinBase2) {\n  _inherits(MatBadge, _MatBadgeMixinBase2);\n\n  var _super = _createSuper(MatBadge);\n\n  function MatBadge(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n    var _this;\n\n    _classCallCheck(this, MatBadge);\n\n    _this = _super.call(this);\n    _this._ngZone = _ngZone;\n    _this._elementRef = _elementRef;\n    _this._ariaDescriber = _ariaDescriber;\n    _this._renderer = _renderer;\n    _this._animationMode = _animationMode;\n    /** Whether the badge has any content. */\n\n    _this._hasContent = false;\n    _this._color = 'primary';\n    _this._overlap = true;\n    /**\n     * Position the badge should reside.\n     * Accepts any combination of 'above'|'below' and 'before'|'after'\n     */\n\n    _this.position = 'above after';\n    /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n\n    _this.size = 'medium';\n    /** Unique id for the badge */\n\n    _this._id = nextId++;\n\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      var nativeElement = _elementRef.nativeElement;\n\n      if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n        throw Error('matBadge must be attached to an element node.');\n      }\n    }\n\n    return _this;\n  }\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n\n\n  _createClass(MatBadge, [{\n    key: \"isAbove\",\n\n    /** Whether the badge is above the host or not */\n    value: function isAbove() {\n      return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n\n  }, {\n    key: \"isAfter\",\n    value: function isAfter() {\n      return this.position.indexOf('before') === -1;\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var contentChange = changes['content'];\n\n      if (contentChange) {\n        var value = contentChange.currentValue;\n        this._hasContent = value != null && \"\".concat(value).trim().length > 0;\n\n        this._updateTextContent();\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var badgeElement = this._badgeElement;\n\n      if (badgeElement) {\n        if (this.description) {\n          this._ariaDescriber.removeDescription(badgeElement, this.description);\n        } // When creating a badge through the Renderer, Angular will keep it in an index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n\n\n        if (this._renderer.destroyNode) {\n          this._renderer.destroyNode(badgeElement);\n        }\n      }\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered.\n     * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n     */\n\n  }, {\n    key: \"getBadgeElement\",\n    value: function getBadgeElement() {\n      return this._badgeElement;\n    }\n    /** Injects a span element into the DOM with the content. */\n\n  }, {\n    key: \"_updateTextContent\",\n    value: function _updateTextContent() {\n      if (!this._badgeElement) {\n        this._badgeElement = this._createBadgeElement();\n      } else {\n        this._badgeElement.textContent = this._stringifyContent();\n      }\n\n      return this._badgeElement;\n    }\n    /** Creates the badge element */\n\n  }, {\n    key: \"_createBadgeElement\",\n    value: function _createBadgeElement() {\n      var badgeElement = this._renderer.createElement('span');\n\n      var activeClass = 'mat-badge-active';\n      var contentClass = 'mat-badge-content'; // Clear any existing badges which may have persisted from a server-side render.\n\n      this._clearExistingBadges(contentClass);\n\n      badgeElement.setAttribute('id', \"mat-badge-content-\".concat(this._id));\n      badgeElement.classList.add(contentClass);\n      badgeElement.textContent = this._stringifyContent();\n\n      if (this._animationMode === 'NoopAnimations') {\n        badgeElement.classList.add('_mat-animation-noopable');\n      }\n\n      if (this.description) {\n        badgeElement.setAttribute('aria-label', this.description);\n      }\n\n      this._elementRef.nativeElement.appendChild(badgeElement); // animate in after insertion\n\n\n      if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n        this._ngZone.runOutsideAngular(function () {\n          requestAnimationFrame(function () {\n            badgeElement.classList.add(activeClass);\n          });\n        });\n      } else {\n        badgeElement.classList.add(activeClass);\n      }\n\n      return badgeElement;\n    }\n    /** Sets the aria-label property on the element */\n\n  }, {\n    key: \"_updateHostAriaDescription\",\n    value: function _updateHostAriaDescription(newDescription, oldDescription) {\n      // ensure content available before setting label\n      var content = this._updateTextContent();\n\n      if (oldDescription) {\n        this._ariaDescriber.removeDescription(content, oldDescription);\n      }\n\n      if (newDescription) {\n        this._ariaDescriber.describe(content, newDescription);\n      }\n    }\n    /** Adds css theme class given the color to the component host */\n\n  }, {\n    key: \"_setColor\",\n    value: function _setColor(colorPalette) {\n      if (colorPalette !== this._color) {\n        var classList = this._elementRef.nativeElement.classList;\n\n        if (this._color) {\n          classList.remove(\"mat-badge-\".concat(this._color));\n        }\n\n        if (colorPalette) {\n          classList.add(\"mat-badge-\".concat(colorPalette));\n        }\n      }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n\n  }, {\n    key: \"_clearExistingBadges\",\n    value: function _clearExistingBadges(cssClass) {\n      var element = this._elementRef.nativeElement;\n      var childCount = element.children.length; // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n\n      while (childCount--) {\n        var currentChild = element.children[childCount];\n\n        if (currentChild.classList.contains(cssClass)) {\n          element.removeChild(currentChild);\n        }\n      }\n    }\n    /** Gets the string representation of the badge content. */\n\n  }, {\n    key: \"_stringifyContent\",\n    value: function _stringifyContent() {\n      // Convert null and undefined to an empty string which is consistent\n      // with how Angular handles them in inside template interpolations.\n      var content = this.content;\n      return content == null ? '' : \"\".concat(content);\n    }\n  }, {\n    key: \"color\",\n    get: function get() {\n      return this._color;\n    },\n    set: function set(value) {\n      this._setColor(value);\n\n      this._color = value;\n    }\n    /** Whether the badge should overlap its contents or not */\n\n  }, {\n    key: \"overlap\",\n    get: function get() {\n      return this._overlap;\n    },\n    set: function set(val) {\n      this._overlap = coerceBooleanProperty(val);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n\n  }, {\n    key: \"description\",\n    get: function get() {\n      return this._description;\n    },\n    set: function set(newDescription) {\n      if (newDescription !== this._description) {\n        var badgeElement = this._badgeElement;\n\n        this._updateHostAriaDescription(newDescription, this._description);\n\n        this._description = newDescription;\n\n        if (badgeElement) {\n          newDescription ? badgeElement.setAttribute('aria-label', newDescription) : badgeElement.removeAttribute('aria-label');\n        }\n      }\n    }\n    /** Whether the badge is hidden. */\n\n  }, {\n    key: \"hidden\",\n    get: function get() {\n      return this._hidden;\n    },\n    set: function set(val) {\n      this._hidden = coerceBooleanProperty(val);\n    }\n  }]);\n\n  return MatBadge;\n}(_MatBadgeMixinBase);\n\nMatBadge.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matBadge]',\n    inputs: ['disabled: matBadgeDisabled'],\n    host: {\n      'class': 'mat-badge',\n      '[class.mat-badge-overlap]': 'overlap',\n      '[class.mat-badge-above]': 'isAbove()',\n      '[class.mat-badge-below]': '!isAbove()',\n      '[class.mat-badge-before]': '!isAfter()',\n      '[class.mat-badge-after]': 'isAfter()',\n      '[class.mat-badge-small]': 'size === \"small\"',\n      '[class.mat-badge-medium]': 'size === \"medium\"',\n      '[class.mat-badge-large]': 'size === \"large\"',\n      '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n      '[class.mat-badge-disabled]': 'disabled'\n    }\n  }]\n}];\n\nMatBadge.ctorParameters = function () {\n  return [{\n    type: NgZone\n  }, {\n    type: ElementRef\n  }, {\n    type: AriaDescriber\n  }, {\n    type: Renderer2\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }];\n};\n\nMatBadge.propDecorators = {\n  color: [{\n    type: Input,\n    args: ['matBadgeColor']\n  }],\n  overlap: [{\n    type: Input,\n    args: ['matBadgeOverlap']\n  }],\n  position: [{\n    type: Input,\n    args: ['matBadgePosition']\n  }],\n  content: [{\n    type: Input,\n    args: ['matBadge']\n  }],\n  description: [{\n    type: Input,\n    args: ['matBadgeDescription']\n  }],\n  size: [{\n    type: Input,\n    args: ['matBadgeSize']\n  }],\n  hidden: [{\n    type: Input,\n    args: ['matBadgeHidden']\n  }]\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar MatBadgeModule = function MatBadgeModule() {\n  _classCallCheck(this, MatBadgeModule);\n};\n\nMatBadgeModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [A11yModule, MatCommonModule],\n    exports: [MatBadge, MatCommonModule],\n    declarations: [MatBadge]\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };","map":{"version":3,"sources":["../../../../../../src/material/badge/badge.ts","../../../../../../src/material/badge/badge-module.ts","../../../../../../src/material/badge/public-api.ts","../../../../../../src/material/badge/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  SimpleChanges,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled, ThemePalette} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nclass MatBadgeBase {}\n\nconst _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\n/** Allowed position options for matBadgePosition */\nexport type MatBadgePosition =\n    'above after' | 'above before' | 'below before' | 'below after' |\n    'before' | 'after' | 'above' | 'below';\n\n/** Allowed size options for matBadgeSize */\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, OnChanges, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge') content: string | number | undefined | null;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement | undefined;\n\n  constructor(\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      private _renderer: Renderer2,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n      super();\n\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        const nativeElement = _elementRef.nativeElement;\n        if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n          throw Error('matBadge must be attached to an element node.');\n        }\n      }\n    }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const contentChange = changes['content'];\n\n    if (contentChange) {\n      const value = contentChange.currentValue;\n      this._hasContent = value != null && `${value}`.trim().length > 0;\n      this._updateTextContent();\n    }\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      if (this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /**\n   * Gets the element into which the badge's content is being rendered.\n   * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n   */\n  getBadgeElement(): HTMLElement | undefined {\n    return this._badgeElement;\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this._stringifyContent();\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._renderer.createElement('span');\n    const activeClass = 'mat-badge-active';\n    const contentClass = 'mat-badge-content';\n\n    // Clear any existing badges which may have persisted from a server-side render.\n    this._clearExistingBadges(contentClass);\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add(contentClass);\n    badgeElement.textContent = this._stringifyContent();\n\n    if (this._animationMode === 'NoopAnimations') {\n      badgeElement.classList.add('_mat-animation-noopable');\n    }\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      const classList = this._elementRef.nativeElement.classList;\n      if (this._color) {\n        classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n  /** Clears any existing badges that might be left over from server-side rendering. */\n  private _clearExistingBadges(cssClass: string) {\n    const element = this._elementRef.nativeElement;\n    let childCount = element.children.length;\n\n    // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n    while (childCount--) {\n      const currentChild = element.children[childCount];\n\n      if (currentChild.classList.contains(cssClass)) {\n        element.removeChild(currentChild);\n      }\n    }\n  }\n\n  /** Gets the string representation of the badge content. */\n  private _stringifyContent(): string {\n    // Convert null and undefined to an empty string which is consistent\n    // with how Angular handles them in inside template interpolations.\n    const content = this.content;\n    return content == null ? '' : `${content}`;\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_hidden: BooleanInput;\n  static ngAcceptInputType_overlap: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge, MatCommonModule],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './badge-module';\nexport * from './badge';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}