{"ast":null,"code":"import _createClass from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { Directive, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Inject, ContentChildren, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatToolbar.\n\n/** @docs-private */\n\nvar MatToolbarBase = function MatToolbarBase(_elementRef) {\n  _classCallCheck(this, MatToolbarBase);\n\n  this._elementRef = _elementRef;\n};\n\nvar _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\nvar MatToolbarRow = function MatToolbarRow() {\n  _classCallCheck(this, MatToolbarRow);\n};\n\nMatToolbarRow.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-toolbar-row',\n    exportAs: 'matToolbarRow',\n    host: {\n      'class': 'mat-toolbar-row'\n    }\n  }]\n}];\n\nvar MatToolbar = /*#__PURE__*/function (_MatToolbarMixinBase2) {\n  _inherits(MatToolbar, _MatToolbarMixinBase2);\n\n  var _super = _createSuper(MatToolbar);\n\n  function MatToolbar(elementRef, _platform, document) {\n    var _this;\n\n    _classCallCheck(this, MatToolbar);\n\n    _this = _super.call(this, elementRef);\n    _this._platform = _platform; // TODO: make the document a required param when doing breaking changes.\n\n    _this._document = document;\n    return _this;\n  }\n\n  _createClass(MatToolbar, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this2 = this;\n\n      if (this._platform.isBrowser) {\n        this._checkToolbarMixedModes();\n\n        this._toolbarRows.changes.subscribe(function () {\n          return _this2._checkToolbarMixedModes();\n        });\n      }\n    }\n    /**\n     * Throws an exception when developers are attempting to combine the different toolbar row modes.\n     */\n\n  }, {\n    key: \"_checkToolbarMixedModes\",\n    value: function _checkToolbarMixedModes() {\n      var _this3 = this;\n\n      if (this._toolbarRows.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        // Check if there are any other DOM nodes that can display content but aren't inside of\n        // a <mat-toolbar-row> element.\n        var isCombinedUsage = Array.from(this._elementRef.nativeElement.childNodes).filter(function (node) {\n          return !(node.classList && node.classList.contains('mat-toolbar-row'));\n        }).filter(function (node) {\n          return node.nodeType !== (_this3._document ? _this3._document.COMMENT_NODE : 8);\n        }).some(function (node) {\n          return !!(node.textContent && node.textContent.trim());\n        });\n\n        if (isCombinedUsage) {\n          throwToolbarMixedModesError();\n        }\n      }\n    }\n  }]);\n\n  return MatToolbar;\n}(_MatToolbarMixinBase);\n\nMatToolbar.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-toolbar',\n    exportAs: 'matToolbar',\n    template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-toolbar-row\\\"></ng-content>\\n\",\n    inputs: ['color'],\n    host: {\n      'class': 'mat-toolbar',\n      '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n      '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styles: [\".cdk-high-contrast-active .mat-toolbar{outline:solid 1px}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}\\n\"]\n  }]\n}];\n\nMatToolbar.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Platform\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\nMatToolbar.propDecorators = {\n  _toolbarRows: [{\n    type: ContentChildren,\n    args: [MatToolbarRow, {\n      descendants: true\n    }]\n  }]\n};\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\n\nfunction throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' + 'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' + 'inside of a `<mat-toolbar>` for a single row.');\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatToolbarModule = function MatToolbarModule() {\n  _classCallCheck(this, MatToolbarModule);\n};\n\nMatToolbarModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [MatCommonModule],\n    exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n    declarations: [MatToolbar, MatToolbarRow]\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatToolbar, MatToolbarModule, MatToolbarRow, throwToolbarMixedModesError };","map":{"version":3,"sources":["../../../../../../src/material/toolbar/toolbar.ts","../../../../../../src/material/toolbar/toolbar-module.ts","../../../../../../src/material/toolbar/public-api.ts","../../../../../../src/material/toolbar/index.ts"],"names":[],"mappings":";;;;;;;;AAAA;;;;;;;AAwBA;;;;IAEM,c,GACJ,wBAAmB,WAAnB,EAA0C;AAAA;;AAAvB,OAAA,WAAA,GAAA,WAAA;AAA2B,C;;AAEhD,IAAM,oBAAoB,GAAyC,UAAU,CAAC,cAAD,CAA7E;;IAOa,a;;;;;QALZ,S;AAAS,EAAA,IAAA,EAAA,CAAC;AACT,IAAA,QAAQ,EAAE,iBADD;AAET,IAAA,QAAQ,EAAE,eAFD;AAGT,IAAA,IAAI,EAAE;AAAC,eAAS;AAAV;AAHG,GAAD;;;IAqBG,U;;;;;AAMX,sBACE,UADF,EAEU,SAFV,EAGoB,QAHpB,EAGkC;AAAA;;AAAA;;AAChC,8BAAM,UAAN;AAFQ,UAAA,SAAA,GAAA,SAAA,CACwB,C;;AAIhC,UAAK,SAAL,GAAiB,QAAjB;AAJgC;AAKjC;;;;sCAEc;AAAA;;AACb,UAAI,KAAK,SAAL,CAAe,SAAnB,EAA8B;AAC5B,aAAK,uBAAL;;AACA,aAAK,YAAL,CAAkB,OAAlB,CAA0B,SAA1B,CAAoC;AAAA,iBAAM,MAAI,CAAC,uBAAL,EAAN;AAAA,SAApC;AACD;AACF;;;;;;;8CAK8B;AAAA;;AAC7B,UAAI,KAAK,YAAL,CAAkB,MAAlB,KAA6B,OAAO,SAAP,KAAqB,WAArB,IAAoC,SAAjE,CAAJ,EAAiF;;;AAG/E,YAAM,eAAe,GAAG,KAAK,CAAC,IAAN,CAAwB,KAAK,WAAL,CAAiB,aAAjB,CAA+B,UAAvD,EACrB,MADqB,CACd,UAAA,IAAI;AAAA,iBAAI,EAAE,IAAI,CAAC,SAAL,IAAkB,IAAI,CAAC,SAAL,CAAe,QAAf,CAAwB,iBAAxB,CAApB,CAAJ;AAAA,SADU,EAErB,MAFqB,CAEd,UAAA,IAAI;AAAA,iBAAI,IAAI,CAAC,QAAL,MAAmB,MAAI,CAAC,SAAL,GAAiB,MAAI,CAAC,SAAL,CAAe,YAAhC,GAA+C,CAAlE,CAAJ;AAAA,SAFU,EAGrB,IAHqB,CAGhB,UAAA,IAAI;AAAA,iBAAI,CAAC,EAAE,IAAI,CAAC,WAAL,IAAoB,IAAI,CAAC,WAAL,CAAiB,IAAjB,EAAtB,CAAL;AAAA,SAHY,CAAxB;;AAKA,YAAI,eAAJ,EAAqB;AACnB,UAAA,2BAA2B;AAC5B;AACF;AACF;;;;EAvC6B,oB;;;QAd/B,S;AAAS,EAAA,IAAA,EAAA,CAAC;AACT,IAAA,QAAQ,EAAE,aADD;AAET,IAAA,QAAQ,EAAE,YAFD;AAGT,IAAA,QAAA,EAAA,mFAHS;AAKT,IAAA,MAAM,EAAE,CAAC,OAAD,CALC;AAMT,IAAA,IAAI,EAAE;AACJ,eAAS,aADL;AAEJ,2CAAqC,yBAFjC;AAGJ,wCAAkC;AAH9B,KANG;AAWT,IAAA,eAAe,EAAE,uBAAuB,CAAC,MAXhC;AAYT,IAAA,aAAa,EAAE,iBAAiB,CAAC,IAZxB;;AAAA,GAAD;;;;;UAtBR;;UARM;;;;YAqDH,M;AAAM,MAAA,IAAA,EAAA,CAAC,QAAD;;;;;;;UALR,e;AAAe,IAAA,IAAA,EAAA,CAAC,aAAD,EAAgB;AAAC,MAAA,WAAW,EAAE;AAAd,KAAhB;;;;;;;;AA0ClB,SAAgB,2BAAhB,GAA2C;AACzC,QAAM,KAAK,CAAC,gEACV,wFADU,GAEV,+CAFS,CAAX;AAGD;ACtGD;;;;;;;;;IAkBa,gB;;;;;QALZ,Q;AAAQ,EAAA,IAAA,EAAA,CAAC;AACR,IAAA,OAAO,EAAE,CAAC,eAAD,CADD;AAER,IAAA,OAAO,EAAE,CAAC,UAAD,EAAa,aAAb,EAA4B,eAA5B,CAFD;AAGR,IAAA,YAAY,EAAE,CAAC,UAAD,EAAa,aAAb;AAHN,GAAD;;ACbT;;;;;;;;ACAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nclass MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow, {descendants: true}) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this._checkToolbarMixedModes();\n      this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n    }\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (this._toolbarRows.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      // Check if there are any other DOM nodes that can display content but aren't inside of\n      // a <mat-toolbar-row> element.\n      const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n        .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n        .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n        .some(node => !!(node.textContent && node.textContent.trim()));\n\n      if (isCombinedUsage) {\n        throwToolbarMixedModesError();\n      }\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './toolbar-module';\nexport * from './toolbar';\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}