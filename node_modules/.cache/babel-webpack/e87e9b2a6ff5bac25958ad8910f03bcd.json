{"ast":null,"code":"import _toConsumableArray from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createClass from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { InjectionToken, EventEmitter, Directive, ChangeDetectorRef, ElementRef, Inject, ViewChild, TemplateRef, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, ViewContainerRef, NgZone, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ESCAPE, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { _getShadowRoot } from '@angular/cdk/platform';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField, MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { take, switchMap, filter, map, tap, delay } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\n\nvar _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\n\nvar MatAutocompleteSelectedEvent = function MatAutocompleteSelectedEvent(\n/** Reference to the autocomplete panel that emitted the event. */\nsource,\n/** Option that was selected. */\noption) {\n  _classCallCheck(this, MatAutocompleteSelectedEvent);\n\n  this.source = source;\n  this.option = option;\n}; // Boilerplate for applying mixins to MatAutocomplete.\n\n/** @docs-private */\n\n\nvar MatAutocompleteBase = function MatAutocompleteBase() {\n  _classCallCheck(this, MatAutocompleteBase);\n};\n\nvar _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\n\n\nvar MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n  providedIn: 'root',\n  factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    autoActiveFirstOption: false\n  };\n}\n/** Base class with all of the `MatAutocomplete` functionality. */\n\n\nvar _MatAutocompleteBase = /*#__PURE__*/function (_MatAutocompleteMixin) {\n  _inherits(_MatAutocompleteBase, _MatAutocompleteMixin);\n\n  var _super = _createSuper(_MatAutocompleteBase);\n\n  function _MatAutocompleteBase(_changeDetectorRef, _elementRef, defaults) {\n    var _this;\n\n    _classCallCheck(this, _MatAutocompleteBase);\n\n    _this = _super.call(this);\n    _this._changeDetectorRef = _changeDetectorRef;\n    _this._elementRef = _elementRef;\n    _this._activeOptionChanges = Subscription.EMPTY;\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n\n    _this.showPanel = false;\n    _this._isOpen = false;\n    /** Function that maps an option's control value to its display value in the trigger. */\n\n    _this.displayWith = null;\n    /** Event that is emitted whenever an option from the list is selected. */\n\n    _this.optionSelected = new EventEmitter();\n    /** Event that is emitted when the autocomplete panel is opened. */\n\n    _this.opened = new EventEmitter();\n    /** Event that is emitted when the autocomplete panel is closed. */\n\n    _this.closed = new EventEmitter();\n    /** Emits whenever an option is activated using the keyboard. */\n\n    _this.optionActivated = new EventEmitter();\n    _this._classList = {};\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n\n    _this.id = \"mat-autocomplete-\".concat(_uniqueAutocompleteIdCounter++);\n    _this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    return _this;\n  }\n  /** Whether the autocomplete panel is open. */\n\n\n  _createClass(_MatAutocompleteBase, [{\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this2 = this;\n\n      this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n      this._activeOptionChanges = this._keyManager.change.subscribe(function (index) {\n        _this2.optionActivated.emit({\n          source: _this2,\n          option: _this2.options.toArray()[index] || null\n        });\n      }); // Set the initial visibility state.\n\n      this._setVisibility();\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._activeOptionChanges.unsubscribe();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n\n  }, {\n    key: \"_setScrollTop\",\n    value: function _setScrollTop(scrollTop) {\n      if (this.panel) {\n        this.panel.nativeElement.scrollTop = scrollTop;\n      }\n    }\n    /** Returns the panel's scrollTop. */\n\n  }, {\n    key: \"_getScrollTop\",\n    value: function _getScrollTop() {\n      return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n\n  }, {\n    key: \"_setVisibility\",\n    value: function _setVisibility() {\n      this.showPanel = !!this.options.length;\n\n      this._setVisibilityClasses(this._classList);\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n\n  }, {\n    key: \"_emitSelectEvent\",\n    value: function _emitSelectEvent(option) {\n      var event = new MatAutocompleteSelectedEvent(this, option);\n      this.optionSelected.emit(event);\n    }\n    /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n\n  }, {\n    key: \"_setVisibilityClasses\",\n    value: function _setVisibilityClasses(classList) {\n      classList[this._visibleClass] = this.showPanel;\n      classList[this._hiddenClass] = !this.showPanel;\n    }\n  }, {\n    key: \"isOpen\",\n    get: function get() {\n      return this._isOpen && this.showPanel;\n    }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n\n  }, {\n    key: \"autoActiveFirstOption\",\n    get: function get() {\n      return this._autoActiveFirstOption;\n    },\n    set: function set(value) {\n      this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n\n  }, {\n    key: \"classList\",\n    set: function set(value) {\n      if (value && value.length) {\n        this._classList = value.split(' ').reduce(function (classList, className) {\n          classList[className.trim()] = true;\n          return classList;\n        }, {});\n      } else {\n        this._classList = {};\n      }\n\n      this._setVisibilityClasses(this._classList);\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }]);\n\n  return _MatAutocompleteBase;\n}(_MatAutocompleteMixinBase);\n\n_MatAutocompleteBase.decorators = [{\n  type: Directive\n}];\n\n_MatAutocompleteBase.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }, {\n    type: ElementRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n\n_MatAutocompleteBase.propDecorators = {\n  template: [{\n    type: ViewChild,\n    args: [TemplateRef, {\n      static: true\n    }]\n  }],\n  panel: [{\n    type: ViewChild,\n    args: ['panel']\n  }],\n  displayWith: [{\n    type: Input\n  }],\n  autoActiveFirstOption: [{\n    type: Input\n  }],\n  panelWidth: [{\n    type: Input\n  }],\n  optionSelected: [{\n    type: Output\n  }],\n  opened: [{\n    type: Output\n  }],\n  closed: [{\n    type: Output\n  }],\n  optionActivated: [{\n    type: Output\n  }],\n  classList: [{\n    type: Input,\n    args: ['class']\n  }]\n};\n\nvar MatAutocomplete = /*#__PURE__*/function (_MatAutocompleteBase2) {\n  _inherits(MatAutocomplete, _MatAutocompleteBase2);\n\n  var _super2 = _createSuper(MatAutocomplete);\n\n  function MatAutocomplete() {\n    var _this3;\n\n    _classCallCheck(this, MatAutocomplete);\n\n    _this3 = _super2.apply(this, arguments);\n    _this3._visibleClass = 'mat-autocomplete-visible';\n    _this3._hiddenClass = 'mat-autocomplete-hidden';\n    return _this3;\n  }\n\n  return MatAutocomplete;\n}(_MatAutocompleteBase);\n\nMatAutocomplete.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-autocomplete',\n    template: \"<ng-template>\\n  <div class=\\\"mat-autocomplete-panel\\\" role=\\\"listbox\\\" [id]=\\\"id\\\" [ngClass]=\\\"_classList\\\" #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'matAutocomplete',\n    inputs: ['disableRipple'],\n    host: {\n      'class': 'mat-autocomplete'\n    },\n    providers: [{\n      provide: MAT_OPTION_PARENT_COMPONENT,\n      useExisting: MatAutocomplete\n    }],\n    styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}\\n\"]\n  }]\n}];\nMatAutocomplete.propDecorators = {\n  optionGroups: [{\n    type: ContentChildren,\n    args: [MAT_OPTGROUP, {\n      descendants: true\n    }]\n  }],\n  options: [{\n    type: ContentChildren,\n    args: [MatOption, {\n      descendants: true\n    }]\n  }]\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\n\nvar _MatAutocompleteOriginBase = function _MatAutocompleteOriginBase(\n/** Reference to the element on which the directive is applied. */\nelementRef) {\n  _classCallCheck(this, _MatAutocompleteOriginBase);\n\n  this.elementRef = elementRef;\n};\n\n_MatAutocompleteOriginBase.decorators = [{\n  type: Directive\n}];\n\n_MatAutocompleteOriginBase.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n\n\nvar MatAutocompleteOrigin = /*#__PURE__*/function (_MatAutocompleteOrigi) {\n  _inherits(MatAutocompleteOrigin, _MatAutocompleteOrigi);\n\n  var _super3 = _createSuper(MatAutocompleteOrigin);\n\n  function MatAutocompleteOrigin() {\n    _classCallCheck(this, MatAutocompleteOrigin);\n\n    return _super3.apply(this, arguments);\n  }\n\n  return MatAutocompleteOrigin;\n}(_MatAutocompleteOriginBase);\n\nMatAutocompleteOrigin.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matAutocompleteOrigin]',\n    exportAs: 'matAutocompleteOrigin'\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/**\n * The height of each autocomplete option.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 11.0.0\n */\n\nvar AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 11.0.0\n */\n\nvar AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\n\nvar MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.reposition();\n  };\n}\n/** @docs-private */\n\n\nvar MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\n\nvar MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return MatAutocompleteTrigger;\n  }),\n  multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\n\nfunction getMatAutocompleteMissingPanelError() {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' + 'Make sure that the id passed to the `matAutocomplete` is correct and that ' + 'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\n\n\nvar _MatAutocompleteTriggerBase = /*#__PURE__*/function () {\n  function _MatAutocompleteTriggerBase(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler) {\n    var _this4 = this;\n\n    _classCallCheck(this, _MatAutocompleteTriggerBase);\n\n    this._element = _element;\n    this._overlay = _overlay;\n    this._viewContainerRef = _viewContainerRef;\n    this._zone = _zone;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dir = _dir;\n    this._formField = _formField;\n    this._document = _document;\n    this._viewportRuler = _viewportRuler;\n    this._componentDestroyed = false;\n    this._autocompleteDisabled = false;\n    /** Whether or not the label state is being overridden. */\n\n    this._manuallyFloatingLabel = false;\n    /** Subscription to viewport size changes. */\n\n    this._viewportSubscription = Subscription.EMPTY;\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n\n    this._canOpenOnNextFocus = true;\n    /** Stream of keyboard events that can close the panel. */\n\n    this._closeKeyEventStream = new Subject();\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n\n    this._windowBlurHandler = function () {\n      // If the user blurred the window while the autocomplete is focused, it means that it'll be\n      // refocused when they come back. In this case we want to skip the first focus event, if the\n      // pane was closed, in order to avoid reopening it unintentionally.\n      _this4._canOpenOnNextFocus = _this4._document.activeElement !== _this4._element.nativeElement || _this4.panelOpen;\n    };\n    /** `View -> model callback called when value changes` */\n\n\n    this._onChange = function () {};\n    /** `View -> model callback called when autocomplete has been touched` */\n\n\n    this._onTouched = function () {};\n    /**\n     * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n     * will render the panel underneath the trigger if there is enough space for it to fit in\n     * the viewport, otherwise the panel will be shown above it. If the position is set to\n     * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n     * whether it fits completely in the viewport.\n     */\n\n\n    this.position = 'auto';\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * @docs-private\n     */\n\n    this.autocompleteAttribute = 'off';\n    this._overlayAttached = false;\n    /** Stream of autocomplete option selections. */\n\n    this.optionSelections = defer(function () {\n      if (_this4.autocomplete && _this4.autocomplete.options) {\n        return merge.apply(void 0, _toConsumableArray(_this4.autocomplete.options.map(function (option) {\n          return option.onSelectionChange;\n        })));\n      } // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n      // Return a stream that we'll replace with the real one once everything is in place.\n\n\n      return _this4._zone.onStable.pipe(take(1), switchMap(function () {\n        return _this4.optionSelections;\n      }));\n    });\n    this._scrollStrategy = scrollStrategy;\n  }\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n\n\n  _createClass(_MatAutocompleteTriggerBase, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this5 = this;\n\n      var window = this._getWindow();\n\n      if (typeof window !== 'undefined') {\n        this._zone.runOutsideAngular(function () {\n          return window.addEventListener('blur', _this5._windowBlurHandler);\n        });\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (changes['position'] && this._positionStrategy) {\n        this._setStrategyPositions(this._positionStrategy);\n\n        if (this.panelOpen) {\n          this._overlayRef.updatePosition();\n        }\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var window = this._getWindow();\n\n      if (typeof window !== 'undefined') {\n        window.removeEventListener('blur', this._windowBlurHandler);\n      }\n\n      this._viewportSubscription.unsubscribe();\n\n      this._componentDestroyed = true;\n\n      this._destroyPanel();\n\n      this._closeKeyEventStream.complete();\n    }\n    /** Whether or not the autocomplete panel is open. */\n\n  }, {\n    key: \"openPanel\",\n\n    /** Opens the autocomplete suggestion panel. */\n    value: function openPanel() {\n      this._attachOverlay();\n\n      this._floatLabel();\n    }\n    /** Closes the autocomplete suggestion panel. */\n\n  }, {\n    key: \"closePanel\",\n    value: function closePanel() {\n      this._resetLabel();\n\n      if (!this._overlayAttached) {\n        return;\n      }\n\n      if (this.panelOpen) {\n        // Only emit if the panel was visible.\n        this.autocomplete.closed.emit();\n      }\n\n      this.autocomplete._isOpen = this._overlayAttached = false;\n\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n\n        this._closingActionsSubscription.unsubscribe();\n      } // Note that in some cases this can end up being called after the component is destroyed.\n      // Add a check to ensure that we don't try to run change detection on a destroyed view.\n\n\n      if (!this._componentDestroyed) {\n        // We need to trigger change detection manually, because\n        // `fromEvent` doesn't seem to do it at the proper time.\n        // This ensures that the label is reset when the\n        // user clicks outside.\n        this._changeDetectorRef.detectChanges();\n      }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition() {\n      if (this._overlayAttached) {\n        this._overlayRef.updatePosition();\n      }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n\n  }, {\n    key: \"_getOutsideClickStream\",\n\n    /** Stream of clicks outside of the autocomplete panel. */\n    value: function _getOutsideClickStream() {\n      var _this6 = this;\n\n      return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'touchend')).pipe(filter(function (event) {\n        // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n        // fall back to check the first element in the path of the click event.\n        var clickTarget = _this6._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] : event.target;\n        var formField = _this6._formField ? _this6._formField._elementRef.nativeElement : null;\n        var customOrigin = _this6.connectedTo ? _this6.connectedTo.elementRef.nativeElement : null;\n        return _this6._overlayAttached && clickTarget !== _this6._element.nativeElement && (!formField || !formField.contains(clickTarget)) && (!customOrigin || !customOrigin.contains(clickTarget)) && !!_this6._overlayRef && !_this6._overlayRef.overlayElement.contains(clickTarget);\n      }));\n    } // Implemented as part of ControlValueAccessor.\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      var _this7 = this;\n\n      Promise.resolve(null).then(function () {\n        return _this7._setTriggerValue(value);\n      });\n    } // Implemented as part of ControlValueAccessor.\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._onChange = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this._onTouched = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this._element.nativeElement.disabled = isDisabled;\n    }\n  }, {\n    key: \"_handleKeydown\",\n    value: function _handleKeydown(event) {\n      var keyCode = event.keyCode; // Prevent the default action on all escape key presses. This is here primarily to bring IE\n      // in line with other browsers. By default, pressing escape on IE will cause it to revert\n      // the input value to the one that it had on focus, however it won't dispatch any events\n      // which means that the model value will be out of sync with the view.\n\n      if (keyCode === ESCAPE) {\n        event.preventDefault();\n      }\n\n      if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n        this.activeOption._selectViaInteraction();\n\n        this._resetActiveItem();\n\n        event.preventDefault();\n      } else if (this.autocomplete) {\n        var prevActiveItem = this.autocomplete._keyManager.activeItem;\n        var isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n        if (this.panelOpen || keyCode === TAB) {\n          this.autocomplete._keyManager.onKeydown(event);\n        } else if (isArrowKey && this._canOpen()) {\n          this.openPanel();\n        }\n\n        if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n          this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n        }\n      }\n    }\n  }, {\n    key: \"_handleInput\",\n    value: function _handleInput(event) {\n      var target = event.target;\n      var value = target.value; // Based on `NumberValueAccessor` from forms.\n\n      if (target.type === 'number') {\n        value = value == '' ? null : parseFloat(value);\n      } // If the input has a placeholder, IE will fire the `input` event on page load,\n      // focus and blur, in addition to when the user actually changed the value. To\n      // filter out all of the extra events, we save the value on focus and between\n      // `input` events, and we check whether it changed.\n      // See: https://connect.microsoft.com/IE/feedback/details/885747/\n\n\n      if (this._previousValue !== value) {\n        this._previousValue = value;\n\n        this._onChange(value);\n\n        if (this._canOpen() && this._document.activeElement === event.target) {\n          this.openPanel();\n        }\n      }\n    }\n  }, {\n    key: \"_handleFocus\",\n    value: function _handleFocus() {\n      if (!this._canOpenOnNextFocus) {\n        this._canOpenOnNextFocus = true;\n      } else if (this._canOpen()) {\n        this._previousValue = this._element.nativeElement.value;\n\n        this._attachOverlay();\n\n        this._floatLabel(true);\n      }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n\n  }, {\n    key: \"_floatLabel\",\n    value: function _floatLabel() {\n      var shouldAnimate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (this._formField && this._formField.floatLabel === 'auto') {\n        if (shouldAnimate) {\n          this._formField._animateAndLockLabel();\n        } else {\n          this._formField.floatLabel = 'always';\n        }\n\n        this._manuallyFloatingLabel = true;\n      }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n\n  }, {\n    key: \"_resetLabel\",\n    value: function _resetLabel() {\n      if (this._manuallyFloatingLabel) {\n        this._formField.floatLabel = 'auto';\n        this._manuallyFloatingLabel = false;\n      }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n\n  }, {\n    key: \"_subscribeToClosingActions\",\n    value: function _subscribeToClosingActions() {\n      var _this8 = this;\n\n      var firstStable = this._zone.onStable.pipe(take(1));\n\n      var optionChanges = this.autocomplete.options.changes.pipe(tap(function () {\n        return _this8._positionStrategy.reapplyLastPosition();\n      }), // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)); // When the zone is stable initially, and when the option list changes...\n\n      return merge(firstStable, optionChanges).pipe( // create a new stream of panelClosingActions, replacing any previous streams\n      // that were created, and flatten it so our stream only emits closing events...\n      switchMap(function () {\n        var wasOpen = _this8.panelOpen;\n\n        _this8._resetActiveItem();\n\n        _this8.autocomplete._setVisibility();\n\n        if (_this8.panelOpen) {\n          _this8._overlayRef.updatePosition(); // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n          // event, because we may not have emitted it when the panel was attached. This\n          // can happen if the users opens the panel and there are no options, but the\n          // options come in slightly later or as a result of the value changing.\n\n\n          if (wasOpen !== _this8.panelOpen) {\n            _this8.autocomplete.opened.emit();\n          }\n        }\n\n        return _this8.panelClosingActions;\n      }), // when the first closing event occurs...\n      take(1)) // set the value, close the panel, and complete.\n      .subscribe(function (event) {\n        return _this8._setValueAndClose(event);\n      });\n    }\n    /** Destroys the autocomplete suggestion panel. */\n\n  }, {\n    key: \"_destroyPanel\",\n    value: function _destroyPanel() {\n      if (this._overlayRef) {\n        this.closePanel();\n\n        this._overlayRef.dispose();\n\n        this._overlayRef = null;\n      }\n    }\n  }, {\n    key: \"_setTriggerValue\",\n    value: function _setTriggerValue(value) {\n      var toDisplay = this.autocomplete && this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value; // Simply falling back to an empty string if the display value is falsy does not work properly.\n      // The display value can also be the number zero and shouldn't fall back to an empty string.\n\n      var inputValue = toDisplay != null ? toDisplay : ''; // If it's used within a `MatFormField`, we should set it through the property so it can go\n      // through change detection.\n\n      if (this._formField) {\n        this._formField._control.value = inputValue;\n      } else {\n        this._element.nativeElement.value = inputValue;\n      }\n\n      this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n\n  }, {\n    key: \"_setValueAndClose\",\n    value: function _setValueAndClose(event) {\n      if (event && event.source) {\n        this._clearPreviousSelectedOption(event.source);\n\n        this._setTriggerValue(event.source.value);\n\n        this._onChange(event.source.value);\n\n        this._element.nativeElement.focus();\n\n        this.autocomplete._emitSelectEvent(event.source);\n      }\n\n      this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n\n  }, {\n    key: \"_clearPreviousSelectedOption\",\n    value: function _clearPreviousSelectedOption(skip) {\n      this.autocomplete.options.forEach(function (option) {\n        if (option != skip && option.selected) {\n          option.deselect();\n        }\n      });\n    }\n  }, {\n    key: \"_attachOverlay\",\n    value: function _attachOverlay() {\n      var _this9 = this;\n\n      if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatAutocompleteMissingPanelError();\n      } // We want to resolve this once, as late as possible so that we can be\n      // sure that the element has been moved into its final place in the DOM.\n\n\n      if (this._isInsideShadowRoot == null) {\n        this._isInsideShadowRoot = !!_getShadowRoot(this._element.nativeElement);\n      }\n\n      var overlayRef = this._overlayRef;\n\n      if (!overlayRef) {\n        this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n        overlayRef = this._overlay.create(this._getOverlayConfig());\n        this._overlayRef = overlayRef; // Use the `keydownEvents` in order to take advantage of\n        // the overlay event targeting provided by the CDK overlay.\n\n        overlayRef.keydownEvents().subscribe(function (event) {\n          // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n          // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n          if (event.keyCode === ESCAPE || event.keyCode === UP_ARROW && event.altKey) {\n            _this9._resetActiveItem();\n\n            _this9._closeKeyEventStream.next(); // We need to stop propagation, otherwise the event will eventually\n            // reach the input itself and cause the overlay to be reopened.\n\n\n            event.stopPropagation();\n            event.preventDefault();\n          }\n        });\n        this._viewportSubscription = this._viewportRuler.change().subscribe(function () {\n          if (_this9.panelOpen && overlayRef) {\n            overlayRef.updateSize({\n              width: _this9._getPanelWidth()\n            });\n          }\n        });\n      } else {\n        // Update the trigger, panel width and direction, in case anything has changed.\n        this._positionStrategy.setOrigin(this._getConnectedElement());\n\n        overlayRef.updateSize({\n          width: this._getPanelWidth()\n        });\n      }\n\n      if (overlayRef && !overlayRef.hasAttached()) {\n        overlayRef.attach(this._portal);\n        this._closingActionsSubscription = this._subscribeToClosingActions();\n      }\n\n      var wasOpen = this.panelOpen;\n\n      this.autocomplete._setVisibility();\n\n      this.autocomplete._isOpen = this._overlayAttached = true; // We need to do an extra `panelOpen` check in here, because the\n      // autocomplete won't be shown if there are no options.\n\n      if (this.panelOpen && wasOpen !== this.panelOpen) {\n        this.autocomplete.opened.emit();\n      }\n    }\n  }, {\n    key: \"_getOverlayConfig\",\n    value: function _getOverlayConfig() {\n      return new OverlayConfig({\n        positionStrategy: this._getOverlayPosition(),\n        scrollStrategy: this._scrollStrategy(),\n        width: this._getPanelWidth(),\n        direction: this._dir\n      });\n    }\n  }, {\n    key: \"_getOverlayPosition\",\n    value: function _getOverlayPosition() {\n      var strategy = this._overlay.position().flexibleConnectedTo(this._getConnectedElement()).withFlexibleDimensions(false).withPush(false);\n\n      this._setStrategyPositions(strategy);\n\n      this._positionStrategy = strategy;\n      return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n\n  }, {\n    key: \"_setStrategyPositions\",\n    value: function _setStrategyPositions(positionStrategy) {\n      // Note that we provide horizontal fallback positions, even though by default the dropdown\n      // width matches the input, because consumers can override the width. See #18854.\n      var belowPositions = [{\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n      }, {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n      }]; // The overlay edge connected to the trigger should have squared corners, while\n      // the opposite end has rounded corners. We apply a CSS class to swap the\n      // border-radius based on the overlay position.\n\n      var panelClass = this._aboveClass;\n      var abovePositions = [{\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n        panelClass: panelClass\n      }, {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n        panelClass: panelClass\n      }];\n      var positions;\n\n      if (this.position === 'above') {\n        positions = abovePositions;\n      } else if (this.position === 'below') {\n        positions = belowPositions;\n      } else {\n        positions = [].concat(belowPositions, abovePositions);\n      }\n\n      positionStrategy.withPositions(positions);\n    }\n  }, {\n    key: \"_getConnectedElement\",\n    value: function _getConnectedElement() {\n      if (this.connectedTo) {\n        return this.connectedTo.elementRef;\n      }\n\n      return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n  }, {\n    key: \"_getPanelWidth\",\n    value: function _getPanelWidth() {\n      return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n\n  }, {\n    key: \"_getHostWidth\",\n    value: function _getHostWidth() {\n      return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n\n  }, {\n    key: \"_resetActiveItem\",\n    value: function _resetActiveItem() {\n      this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n    /** Determines whether the panel can be opened. */\n\n  }, {\n    key: \"_canOpen\",\n    value: function _canOpen() {\n      var element = this._element.nativeElement;\n      return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n\n  }, {\n    key: \"_getWindow\",\n    value: function _getWindow() {\n      var _a;\n\n      return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n    }\n    /** Scrolls to a particular option in the list. */\n\n  }, {\n    key: \"_scrollToOption\",\n    value: function _scrollToOption(index) {\n      // Given that we are not actually focusing active options, we must manually adjust scroll\n      // to reveal options below the fold. First, we find the offset of the option from the top\n      // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n      // the panel height + the option height, so the active option will be just visible at the\n      // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n      // will become the offset. If that offset is visible within the panel already, the scrollTop is\n      // not adjusted.\n      var autocomplete = this.autocomplete;\n\n      var labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n\n      if (index === 0 && labelCount === 1) {\n        // If we've got one group label before the option and we're at the top option,\n        // scroll the list to the top. This is better UX than scrolling the list to the\n        // top of the option, because it allows the user to read the top group's label.\n        autocomplete._setScrollTop(0);\n      } else {\n        var option = autocomplete.options.toArray()[index];\n\n        if (option) {\n          var element = option._getHostElement();\n\n          var newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n\n          autocomplete._setScrollTop(newScrollPosition);\n        }\n      }\n    }\n  }, {\n    key: \"autocompleteDisabled\",\n    get: function get() {\n      return this._autocompleteDisabled;\n    },\n    set: function set(value) {\n      this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n  }, {\n    key: \"panelOpen\",\n    get: function get() {\n      return this._overlayAttached && this.autocomplete.showPanel;\n    }\n  }, {\n    key: \"panelClosingActions\",\n    get: function get() {\n      var _this10 = this;\n\n      return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(function () {\n        return _this10._overlayAttached;\n      })), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ? this._overlayRef.detachments().pipe(filter(function () {\n        return _this10._overlayAttached;\n      })) : of()).pipe( // Normalize the output so we return a consistent type.\n      map(function (event) {\n        return event instanceof MatOptionSelectionChange ? event : null;\n      }));\n    }\n    /** The currently active option, coerced to MatOption type. */\n\n  }, {\n    key: \"activeOption\",\n    get: function get() {\n      if (this.autocomplete && this.autocomplete._keyManager) {\n        return this.autocomplete._keyManager.activeItem;\n      }\n\n      return null;\n    }\n  }]);\n\n  return _MatAutocompleteTriggerBase;\n}();\n\n_MatAutocompleteTriggerBase.decorators = [{\n  type: Directive\n}];\n\n_MatAutocompleteTriggerBase.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Overlay\n  }, {\n    type: ViewContainerRef\n  }, {\n    type: NgZone\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: MatFormField,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_FORM_FIELD]\n    }, {\n      type: Host\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: ViewportRuler\n  }];\n};\n\n_MatAutocompleteTriggerBase.propDecorators = {\n  autocomplete: [{\n    type: Input,\n    args: ['matAutocomplete']\n  }],\n  position: [{\n    type: Input,\n    args: ['matAutocompletePosition']\n  }],\n  connectedTo: [{\n    type: Input,\n    args: ['matAutocompleteConnectedTo']\n  }],\n  autocompleteAttribute: [{\n    type: Input,\n    args: ['autocomplete']\n  }],\n  autocompleteDisabled: [{\n    type: Input,\n    args: ['matAutocompleteDisabled']\n  }]\n};\n\nvar MatAutocompleteTrigger = /*#__PURE__*/function (_MatAutocompleteTrigg) {\n  _inherits(MatAutocompleteTrigger, _MatAutocompleteTrigg);\n\n  var _super4 = _createSuper(MatAutocompleteTrigger);\n\n  function MatAutocompleteTrigger() {\n    var _this11;\n\n    _classCallCheck(this, MatAutocompleteTrigger);\n\n    _this11 = _super4.apply(this, arguments);\n    _this11._aboveClass = 'mat-autocomplete-panel-above';\n    return _this11;\n  }\n\n  return MatAutocompleteTrigger;\n}(_MatAutocompleteTriggerBase);\n\nMatAutocompleteTrigger.decorators = [{\n  type: Directive,\n  args: [{\n    selector: \"input[matAutocomplete], textarea[matAutocomplete]\",\n    host: {\n      'class': 'mat-autocomplete-trigger',\n      '[attr.autocomplete]': 'autocompleteAttribute',\n      '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n      '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n      '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n      '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n      '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n      '[attr.aria-haspopup]': '!autocompleteDisabled',\n      // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n      // a little earlier. This avoids issues where IE delays the focusing of the input.\n      '(focusin)': '_handleFocus()',\n      '(blur)': '_onTouched()',\n      '(input)': '_handleInput($event)',\n      '(keydown)': '_handleKeydown($event)'\n    },\n    exportAs: 'matAutocompleteTrigger',\n    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar MatAutocompleteModule = function MatAutocompleteModule() {\n  _classCallCheck(this, MatAutocompleteModule);\n};\n\nMatAutocompleteModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule],\n    exports: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin, CdkScrollableModule, MatOptionModule, MatCommonModule],\n    declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n    providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError };","map":{"version":3,"sources":["../../../../../../src/material/autocomplete/autocomplete.ts","../../../../../../src/material/autocomplete/autocomplete-origin.ts","../../../../../../src/material/autocomplete/autocomplete-trigger.ts","../../../../../../src/material/autocomplete/autocomplete-module.ts","../../../../../../src/material/autocomplete/public-api.ts","../../../../../../src/material/autocomplete/index.ts"],"names":["observableOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n  Directive,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTGROUP,\n  MAT_OPTION_PARENT_COMPONENT,\n  _MatOptgroupBase,\n  _MatOptionBase,\n  mixinDisableRipple,\n  MatOption,\n  MatOptgroup,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: _MatAutocompleteBase,\n    /** Option that was selected. */\n    public option: _MatOptionBase) { }\n}\n\n/** Event object that is emitted when an autocomplete option is activated. */\nexport interface MatAutocompleteActivatedEvent {\n  /** Reference to the autocomplete panel that emitted the event. */\n  source: _MatAutocompleteBase;\n\n  /** Option that was selected. */\n  option: _MatOptionBase|null;\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nclass MatAutocompleteBase {}\nconst _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n/** Base class with all of the `MatAutocomplete` functionality. */\n@Directive()\nexport abstract class _MatAutocompleteBase extends _MatAutocompleteMixinBase implements\n  AfterContentInit, CanDisableRipple, OnDestroy {\n  private _activeOptionChanges = Subscription.EMPTY;\n\n  /** Class to apply to the panel when it's visible. */\n  protected abstract _visibleClass: string;\n\n  /** Class to apply to the panel when it's hidden. */\n  protected abstract _hiddenClass: string;\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<_MatOptionBase>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  // The @ViewChild query for TemplateRef here needs to be static because some code paths\n  // lead to the overlay being created before change detection has finished for this component.\n  // Notably, another component may trigger `focus` on the autocomplete-trigger.\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: true}) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  abstract options: QueryList<_MatOptionBase>;\n\n  /** @docs-private */\n  abstract optionGroups: QueryList<_MatOptgroupBase>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits whenever an option is activated using the keyboard. */\n  @Output() readonly optionActivated: EventEmitter<MatAutocompleteActivatedEvent> =\n      new EventEmitter<MatAutocompleteActivatedEvent>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      this._classList = value.split(' ').reduce((classList, className) => {\n        classList[className.trim()] = true;\n        return classList;\n      }, {} as {[key: string]: boolean});\n    } else {\n      this._classList = {};\n    }\n\n    this._setVisibilityClasses(this._classList);\n    this._elementRef.nativeElement.className = '';\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<_MatOptionBase>(this.options).withWrap();\n    this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n      this.optionActivated.emit({source: this, option: this.options.toArray()[index] || null});\n    });\n\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  ngOnDestroy() {\n    this._activeOptionChanges.unsubscribe();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._setVisibilityClasses(this._classList);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: _MatOptionBase): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n  private _setVisibilityClasses(classList: {[key: string]: boolean}) {\n    classList[this._visibleClass] = this.showPanel;\n    classList[this._hiddenClass] = !this.showPanel;\n  }\n\n  static ngAcceptInputType_autoActiveFirstOption: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n\n@Component({\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteBase {\n  @ContentChildren(MAT_OPTGROUP, {descendants: true}) optionGroups: QueryList<MatOptgroup>;\n  @ContentChildren(MatOption, {descendants: true}) options: QueryList<MatOption>;\n  protected _visibleClass = 'mat-autocomplete-visible';\n  protected _hiddenClass = 'mat-autocomplete-hidden';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\n@Directive()\nexport abstract class _MatAutocompleteOriginBase {\n  constructor(\n    /** Reference to the element on which the directive is applied. */\n    public elementRef: ElementRef<HTMLElement>) {}\n}\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin extends _MatAutocompleteOriginBase {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ConnectedPosition,\n} from '@angular/cdk/overlay';\nimport {_getShadowRoot} from '@angular/cdk/platform';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MAT_FORM_FIELD, MatFormField} from '@angular/material/form-field';\nimport {defer, fromEvent, merge, Observable, of as observableOf, Subject, Subscription} from 'rxjs';\nimport {delay, filter, map, switchMap, take, tap} from 'rxjs/operators';\n\nimport {_MatAutocompleteBase} from './autocomplete';\nimport {_MatAutocompleteOriginBase} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/**\n * The height of each autocomplete option.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 11.0.0\n */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/**\n * The total height of the autocomplete panel.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 11.0.0\n */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\n@Directive()\nexport abstract class _MatAutocompleteTriggerBase implements ControlValueAccessor, AfterViewInit,\n  OnChanges, OnDestroy {\n\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Whether the element is inside of a ShadowRoot component. */\n  private _isInsideShadowRoot: boolean;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: _MatAutocompleteBase;\n\n  /**\n   * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n   * will render the panel underneath the trigger if there is enough space for it to fit in\n   * the viewport, otherwise the panel will be shown above it. If the position is set to\n   * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n   * whether it fits completely in the viewport.\n   */\n  @Input('matAutocompletePosition') position: 'auto' | 'above' | 'below' = 'auto';\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: _MatAutocompleteOriginBase;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(MAT_FORM_FIELD) @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              private _viewportRuler: ViewportRuler) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /** Class to apply to the panel when it's above the input. */\n  protected abstract _aboveClass: string;\n\n  ngAfterViewInit() {\n    const window = this._getWindow();\n\n    if (typeof window !== 'undefined') {\n      this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['position'] && this._positionStrategy) {\n      this._setStrategyPositions(this._positionStrategy);\n\n      if (this.panelOpen) {\n        this._overlayRef!.updatePosition();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    const window = this._getWindow();\n\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n      return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    return merge(\n            fromEvent(this._document, 'click') as Observable<MouseEvent>,\n            fromEvent(this._document, 'touchend') as Observable<TouchEvent>)\n        .pipe(filter(event => {\n          // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n          // fall back to check the first element in the path of the click event.\n          const clickTarget =\n              (this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] :\n                                                                event.target) as HTMLElement;\n          const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n          const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n\n          return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!customOrigin || !customOrigin.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && this._document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n        .pipe(\n            // create a new stream of panelClosingActions, replacing any previous streams\n            // that were created, and flatten it so our stream only emits closing events...\n            switchMap(() => {\n              const wasOpen = this.panelOpen;\n              this._resetActiveItem();\n              this.autocomplete._setVisibility();\n\n              if (this.panelOpen) {\n                this._overlayRef!.updatePosition();\n\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                  this.autocomplete.opened.emit();\n                }\n              }\n\n              return this.panelClosingActions;\n            }),\n            // when the first closing event occurs...\n            take(1))\n        // set the value, close the panel, and complete.\n        .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    // We want to resolve this once, as late as possible so that we can be\n    // sure that the element has been moved into its final place in the DOM.\n    if (this._isInsideShadowRoot == null) {\n      this._isInsideShadowRoot = !!_getShadowRoot(this._element.nativeElement);\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n\n          // We need to stop propagation, otherwise the event will eventually\n          // reach the input itself and cause the overlay to be reopened.\n          event.stopPropagation();\n          event.preventDefault();\n        }\n      });\n\n      this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n        if (this.panelOpen && overlayRef) {\n          overlayRef.updateSize({width: this._getPanelWidth()});\n        }\n      });\n    } else {\n      // Update the trigger, panel width and direction, in case anything has changed.\n      this._positionStrategy.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false);\n\n    this._setStrategyPositions(strategy);\n    this._positionStrategy = strategy;\n    return strategy;\n  }\n\n  /** Sets the positions on a position strategy based on the directive's input state. */\n  private _setStrategyPositions(positionStrategy: FlexibleConnectedPositionStrategy) {\n    // Note that we provide horizontal fallback positions, even though by default the dropdown\n    // width matches the input, because consumers can override the width. See #18854.\n    const belowPositions: ConnectedPosition[] = [\n      {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n      {originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top'}\n    ];\n\n    // The overlay edge connected to the trigger should have squared corners, while\n    // the opposite end has rounded corners. We apply a CSS class to swap the\n    // border-radius based on the overlay position.\n    const panelClass = this._aboveClass;\n    const abovePositions: ConnectedPosition[] = [\n      {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass},\n      {originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass}\n    ];\n\n    let positions: ConnectedPosition[];\n\n    if (this.position === 'above') {\n      positions = abovePositions;\n    } else if (this.position === 'below') {\n      positions = belowPositions;\n    } else {\n      positions = [...belowPositions, ...abovePositions];\n    }\n\n    positionStrategy.withPositions(positions);\n  }\n\n  private _getConnectedElement(): ElementRef<HTMLElement> {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  private _getWindow(): Window {\n    return this._document?.defaultView || window;\n  }\n\n  /** Scrolls to a particular option in the list. */\n  private _scrollToOption(index: number): void {\n    // Given that we are not actually focusing active options, we must manually adjust scroll\n    // to reveal options below the fold. First, we find the offset of the option from the top\n    // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n    // the panel height + the option height, so the active option will be just visible at the\n    // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n    // will become the offset. If that offset is visible within the panel already, the scrollTop is\n    // not adjusted.\n    const autocomplete = this.autocomplete;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n      autocomplete.options, autocomplete.optionGroups);\n\n    if (index === 0 && labelCount === 1) {\n      // If we've got one group label before the option and we're at the top option,\n      // scroll the list to the top. This is better UX than scrolling the list to the\n      // top of the option, because it allows the user to read the top group's label.\n      autocomplete._setScrollTop(0);\n    } else {\n      const option = autocomplete.options.toArray()[index];\n\n      if (option) {\n        const element = option._getHostElement();\n        const newScrollPosition = _getOptionScrollPosition(\n          element.offsetTop,\n          element.offsetHeight,\n          autocomplete._getScrollTop(),\n          autocomplete.panel.nativeElement.offsetHeight\n        );\n\n        autocomplete._setScrollTop(newScrollPosition);\n      }\n    }\n  }\n\n  static ngAcceptInputType_autocompleteDisabled: BooleanInput;\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'class': 'mat-autocomplete-trigger',\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger extends _MatAutocompleteTriggerBase {\n  protected _aboveClass = 'mat-autocomplete-panel-above';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n    CommonModule\n  ],\n  exports: [\n    MatAutocomplete,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    CdkScrollableModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './autocomplete';\nexport * from './autocomplete-module';\nexport * from './autocomplete-trigger';\nexport * from './autocomplete-origin';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}