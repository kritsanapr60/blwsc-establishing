{"ast":null,"code":"import _createClass from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Optional, Attribute, NgZone, Inject, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { hasModifierKey, DOWN_ARROW, RIGHT_ARROW, UP_ARROW, LEFT_ARROW, HOME, END, PAGE_DOWN, PAGE_UP } from '@angular/cdk/keycodes';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { Subscription } from 'rxjs';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar activeEventOptions = normalizePassiveListenerOptions({\n  passive: false\n});\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\n\nvar MIN_AUTO_TICK_SEPARATION = 30;\n/** The thumb gap size for a disabled slider. */\n\nvar DISABLED_THUMB_GAP = 7;\n/** The thumb gap size for a non-active slider at its minimum value. */\n\nvar MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/** The thumb gap size for an active slider at its minimum value. */\n\nvar MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\n\nvar MAT_SLIDER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return MatSlider;\n  }),\n  multi: true\n};\n/** A simple change event emitted by the MatSlider component. */\n\nvar MatSliderChange = function MatSliderChange() {\n  _classCallCheck(this, MatSliderChange);\n}; // Boilerplate for applying mixins to MatSlider.\n\n/** @docs-private */\n\n\nvar MatSliderBase = function MatSliderBase(_elementRef) {\n  _classCallCheck(this, MatSliderBase);\n\n  this._elementRef = _elementRef;\n};\n\nvar _MatSliderMixinBase = mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n\n\nvar MatSlider = /*#__PURE__*/function (_MatSliderMixinBase2) {\n  _inherits(MatSlider, _MatSliderMixinBase2);\n\n  var _super = _createSuper(MatSlider);\n\n  function MatSlider(elementRef, _focusMonitor, _changeDetectorRef, _dir, tabIndex, _ngZone, _document, _animationMode) {\n    var _this;\n\n    _classCallCheck(this, MatSlider);\n\n    _this = _super.call(this, elementRef);\n    _this._focusMonitor = _focusMonitor;\n    _this._changeDetectorRef = _changeDetectorRef;\n    _this._dir = _dir;\n    _this._ngZone = _ngZone;\n    _this._animationMode = _animationMode;\n    _this._invert = false;\n    _this._max = 100;\n    _this._min = 0;\n    _this._step = 1;\n    _this._thumbLabel = false;\n    _this._tickInterval = 0;\n    _this._value = null;\n    _this._vertical = false;\n    /** Event emitted when the slider value has changed. */\n\n    _this.change = new EventEmitter();\n    /** Event emitted when the slider thumb moves. */\n\n    _this.input = new EventEmitter();\n    /**\n     * Emits when the raw value of the slider changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n\n    _this.valueChange = new EventEmitter();\n    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n\n    _this.onTouched = function () {};\n\n    _this._percent = 0;\n    /**\n     * Whether or not the thumb is sliding.\n     * Used to determine if there should be a transition for the thumb and fill track.\n     */\n\n    _this._isSliding = false;\n    /**\n     * Whether or not the slider is active (clicked or sliding).\n     * Used to shrink and grow the thumb as according to the Material Design spec.\n     */\n\n    _this._isActive = false;\n    /** The size of a tick interval as a percentage of the size of the track. */\n\n    _this._tickIntervalPercent = 0;\n    /** The dimensions of the slider. */\n\n    _this._sliderDimensions = null;\n\n    _this._controlValueAccessorChangeFn = function () {};\n    /** Subscription to the Directionality change EventEmitter. */\n\n\n    _this._dirChangeSubscription = Subscription.EMPTY;\n    /** Called when the user has put their pointer down on the slider. */\n\n    _this._pointerDown = function (event) {\n      // Don't do anything if the slider is disabled or the\n      // user is using anything other than the main mouse button.\n      if (_this.disabled || _this._isSliding || !isTouchEvent(event) && event.button !== 0) {\n        return;\n      }\n\n      _this._ngZone.run(function () {\n        var oldValue = _this.value;\n        var pointerPosition = getPointerPositionOnPage(event);\n        _this._isSliding = true;\n        _this._lastPointerEvent = event;\n        event.preventDefault();\n\n        _this._focusHostElement();\n\n        _this._onMouseenter(); // Simulate mouseenter in case this is a mobile device.\n\n\n        _this._bindGlobalEvents(event);\n\n        _this._focusHostElement();\n\n        _this._updateValueFromPosition(pointerPosition);\n\n        _this._valueOnSlideStart = oldValue; // Emit a change and input event if the value changed.\n\n        if (oldValue != _this.value) {\n          _this._emitInputEvent();\n        }\n      });\n    };\n    /**\n     * Called when the user has moved their pointer after\n     * starting to drag. Bound on the document level.\n     */\n\n\n    _this._pointerMove = function (event) {\n      if (_this._isSliding) {\n        // Prevent the slide from selecting anything else.\n        event.preventDefault();\n        var oldValue = _this.value;\n        _this._lastPointerEvent = event;\n\n        _this._updateValueFromPosition(getPointerPositionOnPage(event)); // Native range elements always emit `input` events when the value changed while sliding.\n\n\n        if (oldValue != _this.value) {\n          _this._emitInputEvent();\n        }\n      }\n    };\n    /** Called when the user has lifted their pointer. Bound on the document level. */\n\n\n    _this._pointerUp = function (event) {\n      if (_this._isSliding) {\n        event.preventDefault();\n\n        _this._removeGlobalEvents();\n\n        _this._isSliding = false;\n\n        if (_this._valueOnSlideStart != _this.value && !_this.disabled) {\n          _this._emitChangeEvent();\n        }\n\n        _this._valueOnSlideStart = _this._lastPointerEvent = null;\n      }\n    };\n    /** Called when the window has lost focus. */\n\n\n    _this._windowBlur = function () {\n      // If the window is blurred while dragging we need to stop dragging because the\n      // browser won't dispatch the `mouseup` and `touchend` events anymore.\n      if (_this._lastPointerEvent) {\n        _this._pointerUp(_this._lastPointerEvent);\n      }\n    };\n\n    _this._document = _document;\n    _this.tabIndex = parseInt(tabIndex) || 0;\n\n    _ngZone.runOutsideAngular(function () {\n      var element = elementRef.nativeElement;\n      element.addEventListener('mousedown', _this._pointerDown, activeEventOptions);\n      element.addEventListener('touchstart', _this._pointerDown, activeEventOptions);\n    });\n\n    return _this;\n  }\n  /** Whether the slider is inverted. */\n\n\n  _createClass(MatSlider, [{\n    key: \"focus\",\n\n    /** set focus to the host element */\n    value: function focus(options) {\n      this._focusHostElement(options);\n    }\n    /** blur the host element */\n\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this._blurHostElement();\n    }\n    /** The percentage of the slider that coincides with the value. */\n\n  }, {\n    key: \"_shouldInvertAxis\",\n\n    /**\n     * Whether the axis of the slider is inverted.\n     * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n     */\n    value: function _shouldInvertAxis() {\n      // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n      // top. However from a y-axis standpoint this is inverted.\n      return this.vertical ? !this.invert : this.invert;\n    }\n    /** Whether the slider is at its minimum value. */\n\n  }, {\n    key: \"_isMinValue\",\n    value: function _isMinValue() {\n      return this.percent === 0;\n    }\n    /**\n     * The amount of space to leave between the slider thumb and the track fill & track background\n     * elements.\n     */\n\n  }, {\n    key: \"_getThumbGap\",\n    value: function _getThumbGap() {\n      if (this.disabled) {\n        return DISABLED_THUMB_GAP;\n      }\n\n      if (this._isMinValue() && !this.thumbLabel) {\n        return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n      }\n\n      return 0;\n    }\n    /** CSS styles for the track background element. */\n\n  }, {\n    key: \"_getTrackBackgroundStyles\",\n    value: function _getTrackBackgroundStyles() {\n      var axis = this.vertical ? 'Y' : 'X';\n      var scale = this.vertical ? \"1, \".concat(1 - this.percent, \", 1\") : \"\".concat(1 - this.percent, \", 1, 1\");\n      var sign = this._shouldInvertMouseCoords() ? '-' : '';\n      return {\n        // scale3d avoids some rendering issues in Chrome. See #12071.\n        transform: \"translate\".concat(axis, \"(\").concat(sign).concat(this._getThumbGap(), \"px) scale3d(\").concat(scale, \")\")\n      };\n    }\n    /** CSS styles for the track fill element. */\n\n  }, {\n    key: \"_getTrackFillStyles\",\n    value: function _getTrackFillStyles() {\n      var percent = this.percent;\n      var axis = this.vertical ? 'Y' : 'X';\n      var scale = this.vertical ? \"1, \".concat(percent, \", 1\") : \"\".concat(percent, \", 1, 1\");\n      var sign = this._shouldInvertMouseCoords() ? '' : '-';\n      return {\n        // scale3d avoids some rendering issues in Chrome. See #12071.\n        transform: \"translate\".concat(axis, \"(\").concat(sign).concat(this._getThumbGap(), \"px) scale3d(\").concat(scale, \")\"),\n        // iOS Safari has a bug where it won't re-render elements which start of as `scale(0)` until\n        // something forces a style recalculation on it. Since we'll end up with `scale(0)` when\n        // the value of the slider is 0, we can easily get into this situation. We force a\n        // recalculation by changing the element's `display` when it goes from 0 to any other value.\n        display: percent === 0 ? 'none' : ''\n      };\n    }\n    /** CSS styles for the ticks container element. */\n\n  }, {\n    key: \"_getTicksContainerStyles\",\n    value: function _getTicksContainerStyles() {\n      var axis = this.vertical ? 'Y' : 'X'; // For a horizontal slider in RTL languages we push the ticks container off the left edge\n      // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n\n      var sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n      var offset = this._tickIntervalPercent / 2 * 100;\n      return {\n        'transform': \"translate\".concat(axis, \"(\").concat(sign).concat(offset, \"%)\")\n      };\n    }\n    /** CSS styles for the ticks element. */\n\n  }, {\n    key: \"_getTicksStyles\",\n    value: function _getTicksStyles() {\n      var tickSize = this._tickIntervalPercent * 100;\n      var backgroundSize = this.vertical ? \"2px \".concat(tickSize, \"%\") : \"\".concat(tickSize, \"% 2px\");\n      var axis = this.vertical ? 'Y' : 'X'; // Depending on the direction we pushed the ticks container, push the ticks the opposite\n      // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n      // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n\n      var sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n      var rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n      var styles = {\n        'backgroundSize': backgroundSize,\n        // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n        'transform': \"translateZ(0) translate\".concat(axis, \"(\").concat(sign).concat(tickSize / 2, \"%)\").concat(rotate)\n      };\n\n      if (this._isMinValue() && this._getThumbGap()) {\n        var shouldInvertAxis = this._shouldInvertAxis();\n\n        var side;\n\n        if (this.vertical) {\n          side = shouldInvertAxis ? 'Bottom' : 'Top';\n        } else {\n          side = shouldInvertAxis ? 'Right' : 'Left';\n        }\n\n        styles[\"padding\".concat(side)] = \"\".concat(this._getThumbGap(), \"px\");\n      }\n\n      return styles;\n    }\n  }, {\n    key: \"_getThumbContainerStyles\",\n    value: function _getThumbContainerStyles() {\n      var shouldInvertAxis = this._shouldInvertAxis();\n\n      var axis = this.vertical ? 'Y' : 'X'; // For a horizontal slider in RTL languages we push the thumb container off the left edge\n      // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n\n      var invertOffset = this._getDirection() == 'rtl' && !this.vertical ? !shouldInvertAxis : shouldInvertAxis;\n      var offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n      return {\n        'transform': \"translate\".concat(axis, \"(-\").concat(offset, \"%)\")\n      };\n    }\n    /**\n     * Whether mouse events should be converted to a slider position by calculating their distance\n     * from the right or bottom edge of the slider as opposed to the top or left.\n     */\n\n  }, {\n    key: \"_shouldInvertMouseCoords\",\n    value: function _shouldInvertMouseCoords() {\n      var shouldInvertAxis = this._shouldInvertAxis();\n\n      return this._getDirection() == 'rtl' && !this.vertical ? !shouldInvertAxis : shouldInvertAxis;\n    }\n    /** The language direction for this slider element. */\n\n  }, {\n    key: \"_getDirection\",\n    value: function _getDirection() {\n      return this._dir && this._dir.value == 'rtl' ? 'rtl' : 'ltr';\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this2 = this;\n\n      this._focusMonitor.monitor(this._elementRef, true).subscribe(function (origin) {\n        _this2._isActive = !!origin && origin !== 'keyboard';\n\n        _this2._changeDetectorRef.detectChanges();\n      });\n\n      if (this._dir) {\n        this._dirChangeSubscription = this._dir.change.subscribe(function () {\n          _this2._changeDetectorRef.markForCheck();\n        });\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var element = this._elementRef.nativeElement;\n      element.removeEventListener('mousedown', this._pointerDown, activeEventOptions);\n      element.removeEventListener('touchstart', this._pointerDown, activeEventOptions);\n      this._lastPointerEvent = null;\n\n      this._removeGlobalEvents();\n\n      this._focusMonitor.stopMonitoring(this._elementRef);\n\n      this._dirChangeSubscription.unsubscribe();\n    }\n  }, {\n    key: \"_onMouseenter\",\n    value: function _onMouseenter() {\n      if (this.disabled) {\n        return;\n      } // We save the dimensions of the slider here so we can use them to update the spacing of the\n      // ticks and determine where on the slider click and slide events happen.\n\n\n      this._sliderDimensions = this._getSliderDimensions();\n\n      this._updateTickIntervalPercent();\n    }\n  }, {\n    key: \"_onFocus\",\n    value: function _onFocus() {\n      // We save the dimensions of the slider here so we can use them to update the spacing of the\n      // ticks and determine where on the slider click and slide events happen.\n      this._sliderDimensions = this._getSliderDimensions();\n\n      this._updateTickIntervalPercent();\n    }\n  }, {\n    key: \"_onBlur\",\n    value: function _onBlur() {\n      this.onTouched();\n    }\n  }, {\n    key: \"_onKeydown\",\n    value: function _onKeydown(event) {\n      if (this.disabled || hasModifierKey(event)) {\n        return;\n      }\n\n      var oldValue = this.value;\n\n      switch (event.keyCode) {\n        case PAGE_UP:\n          this._increment(10);\n\n          break;\n\n        case PAGE_DOWN:\n          this._increment(-10);\n\n          break;\n\n        case END:\n          this.value = this.max;\n          break;\n\n        case HOME:\n          this.value = this.min;\n          break;\n\n        case LEFT_ARROW:\n          // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n          // inverted slider the thumb moves in that direction. However for a blind user, nothing\n          // about the slider indicates that it is inverted. They will expect left to be decrement,\n          // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n          // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n          // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n          // sighted users, therefore we do not swap the meaning.\n          this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n\n          break;\n\n        case UP_ARROW:\n          this._increment(1);\n\n          break;\n\n        case RIGHT_ARROW:\n          // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n          this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n\n          break;\n\n        case DOWN_ARROW:\n          this._increment(-1);\n\n          break;\n\n        default:\n          // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n          // it.\n          return;\n      }\n\n      if (oldValue != this.value) {\n        this._emitInputEvent();\n\n        this._emitChangeEvent();\n      }\n\n      this._isSliding = true;\n      event.preventDefault();\n    }\n  }, {\n    key: \"_onKeyup\",\n    value: function _onKeyup() {\n      this._isSliding = false;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n\n  }, {\n    key: \"_getWindow\",\n    value: function _getWindow() {\n      return this._document.defaultView || window;\n    }\n    /**\n     * Binds our global move and end events. They're bound at the document level and only while\n     * dragging so that the user doesn't have to keep their pointer exactly over the slider\n     * as they're swiping across the screen.\n     */\n\n  }, {\n    key: \"_bindGlobalEvents\",\n    value: function _bindGlobalEvents(triggerEvent) {\n      // Note that we bind the events to the `document`, because it allows us to capture\n      // drag cancel events where the user's pointer is outside the browser window.\n      var document = this._document;\n      var isTouch = isTouchEvent(triggerEvent);\n      var moveEventName = isTouch ? 'touchmove' : 'mousemove';\n      var endEventName = isTouch ? 'touchend' : 'mouseup';\n      document.addEventListener(moveEventName, this._pointerMove, activeEventOptions);\n      document.addEventListener(endEventName, this._pointerUp, activeEventOptions);\n\n      if (isTouch) {\n        document.addEventListener('touchcancel', this._pointerUp, activeEventOptions);\n      }\n\n      var window = this._getWindow();\n\n      if (typeof window !== 'undefined' && window) {\n        window.addEventListener('blur', this._windowBlur);\n      }\n    }\n    /** Removes any global event listeners that we may have added. */\n\n  }, {\n    key: \"_removeGlobalEvents\",\n    value: function _removeGlobalEvents() {\n      var document = this._document;\n      document.removeEventListener('mousemove', this._pointerMove, activeEventOptions);\n      document.removeEventListener('mouseup', this._pointerUp, activeEventOptions);\n      document.removeEventListener('touchmove', this._pointerMove, activeEventOptions);\n      document.removeEventListener('touchend', this._pointerUp, activeEventOptions);\n      document.removeEventListener('touchcancel', this._pointerUp, activeEventOptions);\n\n      var window = this._getWindow();\n\n      if (typeof window !== 'undefined' && window) {\n        window.removeEventListener('blur', this._windowBlur);\n      }\n    }\n    /** Increments the slider by the given number of steps (negative number decrements). */\n\n  }, {\n    key: \"_increment\",\n    value: function _increment(numSteps) {\n      this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n    }\n    /** Calculate the new value from the new physical location. The value will always be snapped. */\n\n  }, {\n    key: \"_updateValueFromPosition\",\n    value: function _updateValueFromPosition(pos) {\n      if (!this._sliderDimensions) {\n        return;\n      }\n\n      var offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n      var size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      var posComponent = this.vertical ? pos.y : pos.x; // The exact value is calculated from the event and used to find the closest snap value.\n\n      var percent = this._clamp((posComponent - offset) / size);\n\n      if (this._shouldInvertMouseCoords()) {\n        percent = 1 - percent;\n      } // Since the steps may not divide cleanly into the max value, if the user\n      // slid to 0 or 100 percent, we jump to the min/max value. This approach\n      // is slightly more intuitive than using `Math.ceil` below, because it\n      // follows the user's pointer closer.\n\n\n      if (percent === 0) {\n        this.value = this.min;\n      } else if (percent === 1) {\n        this.value = this.max;\n      } else {\n        var exactValue = this._calculateValue(percent); // This calculation finds the closest step by finding the closest\n        // whole number divisible by the step relative to the min.\n\n\n        var closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min; // The value needs to snap to the min and max.\n\n        this.value = this._clamp(closestValue, this.min, this.max);\n      }\n    }\n    /** Emits a change event if the current value is different from the last emitted value. */\n\n  }, {\n    key: \"_emitChangeEvent\",\n    value: function _emitChangeEvent() {\n      this._controlValueAccessorChangeFn(this.value);\n\n      this.valueChange.emit(this.value);\n      this.change.emit(this._createChangeEvent());\n    }\n    /** Emits an input event when the current value is different from the last emitted value. */\n\n  }, {\n    key: \"_emitInputEvent\",\n    value: function _emitInputEvent() {\n      this.input.emit(this._createChangeEvent());\n    }\n    /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n\n  }, {\n    key: \"_updateTickIntervalPercent\",\n    value: function _updateTickIntervalPercent() {\n      if (!this.tickInterval || !this._sliderDimensions) {\n        return;\n      }\n\n      if (this.tickInterval == 'auto') {\n        var trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n        var pixelsPerStep = trackSize * this.step / (this.max - this.min);\n        var stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n        var pixelsPerTick = stepsPerTick * this.step;\n        this._tickIntervalPercent = pixelsPerTick / trackSize;\n      } else {\n        this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n      }\n    }\n    /** Creates a slider change object from the specified value. */\n\n  }, {\n    key: \"_createChangeEvent\",\n    value: function _createChangeEvent() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.value;\n      var event = new MatSliderChange();\n      event.source = this;\n      event.value = value;\n      return event;\n    }\n    /** Calculates the percentage of the slider that a value is. */\n\n  }, {\n    key: \"_calculatePercentage\",\n    value: function _calculatePercentage(value) {\n      return ((value || 0) - this.min) / (this.max - this.min);\n    }\n    /** Calculates the value a percentage of the slider corresponds to. */\n\n  }, {\n    key: \"_calculateValue\",\n    value: function _calculateValue(percentage) {\n      return this.min + percentage * (this.max - this.min);\n    }\n    /** Return a number between two numbers. */\n\n  }, {\n    key: \"_clamp\",\n    value: function _clamp(value) {\n      var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      return Math.max(min, Math.min(value, max));\n    }\n    /**\n     * Get the bounding client rect of the slider track element.\n     * The track is used rather than the native element to ignore the extra space that the thumb can\n     * take up.\n     */\n\n  }, {\n    key: \"_getSliderDimensions\",\n    value: function _getSliderDimensions() {\n      return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n    }\n    /**\n     * Focuses the native element.\n     * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n     */\n\n  }, {\n    key: \"_focusHostElement\",\n    value: function _focusHostElement(options) {\n      this._elementRef.nativeElement.focus(options);\n    }\n    /** Blurs the native element. */\n\n  }, {\n    key: \"_blurHostElement\",\n    value: function _blurHostElement() {\n      this._elementRef.nativeElement.blur();\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.value = value;\n    }\n    /**\n     * Registers a callback to be triggered when the value has changed.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the component is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * Sets whether the component should be disabled.\n     * Implemented as part of ControlValueAccessor.\n     * @param isDisabled\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n  }, {\n    key: \"invert\",\n    get: function get() {\n      return this._invert;\n    },\n    set: function set(value) {\n      this._invert = coerceBooleanProperty(value);\n    }\n    /** The maximum value that the slider can have. */\n\n  }, {\n    key: \"max\",\n    get: function get() {\n      return this._max;\n    },\n    set: function set(v) {\n      this._max = coerceNumberProperty(v, this._max);\n      this._percent = this._calculatePercentage(this._value); // Since this also modifies the percentage, we need to let the change detection know.\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /** The minimum value that the slider can have. */\n\n  }, {\n    key: \"min\",\n    get: function get() {\n      return this._min;\n    },\n    set: function set(v) {\n      this._min = coerceNumberProperty(v, this._min); // If the value wasn't explicitly set by the user, set it to the min.\n\n      if (this._value === null) {\n        this.value = this._min;\n      }\n\n      this._percent = this._calculatePercentage(this._value); // Since this also modifies the percentage, we need to let the change detection know.\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /** The values at which the thumb will snap. */\n\n  }, {\n    key: \"step\",\n    get: function get() {\n      return this._step;\n    },\n    set: function set(v) {\n      this._step = coerceNumberProperty(v, this._step);\n\n      if (this._step % 1 !== 0) {\n        this._roundToDecimal = this._step.toString().split('.').pop().length;\n      } // Since this could modify the label, we need to notify the change detection.\n\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /** Whether or not to show the thumb label. */\n\n  }, {\n    key: \"thumbLabel\",\n    get: function get() {\n      return this._thumbLabel;\n    },\n    set: function set(value) {\n      this._thumbLabel = coerceBooleanProperty(value);\n    }\n    /**\n     * How often to show ticks. Relative to the step so that a tick always appears on a step.\n     * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n     */\n\n  }, {\n    key: \"tickInterval\",\n    get: function get() {\n      return this._tickInterval;\n    },\n    set: function set(value) {\n      if (value === 'auto') {\n        this._tickInterval = 'auto';\n      } else if (typeof value === 'number' || typeof value === 'string') {\n        this._tickInterval = coerceNumberProperty(value, this._tickInterval);\n      } else {\n        this._tickInterval = 0;\n      }\n    }\n    /** Value of the slider. */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      // If the value needs to be read and it is still uninitialized, initialize it to the min.\n      if (this._value === null) {\n        this.value = this._min;\n      }\n\n      return this._value;\n    },\n    set: function set(v) {\n      if (v !== this._value) {\n        var value = coerceNumberProperty(v); // While incrementing by a decimal we can end up with values like 33.300000000000004.\n        // Truncate it to ensure that it matches the label and to make it easier to work with.\n\n        if (this._roundToDecimal) {\n          value = parseFloat(value.toFixed(this._roundToDecimal));\n        }\n\n        this._value = value;\n        this._percent = this._calculatePercentage(this._value); // Since this also modifies the percentage, we need to let the change detection know.\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /** Whether the slider is vertical. */\n\n  }, {\n    key: \"vertical\",\n    get: function get() {\n      return this._vertical;\n    },\n    set: function set(value) {\n      this._vertical = coerceBooleanProperty(value);\n    }\n    /** The value to be used for display purposes. */\n\n  }, {\n    key: \"displayValue\",\n    get: function get() {\n      if (this.displayWith) {\n        // Value is never null but since setters and getters cannot have\n        // different types, the value getter is also typed to return null.\n        return this.displayWith(this.value);\n      } // Note that this could be improved further by rounding something like 0.999 to 1 or\n      // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n      // every change detection cycle.\n\n\n      if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n        return this.value.toFixed(this._roundToDecimal);\n      }\n\n      return this.value || 0;\n    }\n  }, {\n    key: \"percent\",\n    get: function get() {\n      return this._clamp(this._percent);\n    }\n  }]);\n\n  return MatSlider;\n}(_MatSliderMixinBase);\n\nMatSlider.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-slider',\n    exportAs: 'matSlider',\n    providers: [MAT_SLIDER_VALUE_ACCESSOR],\n    host: {\n      '(focus)': '_onFocus()',\n      '(blur)': '_onBlur()',\n      '(keydown)': '_onKeydown($event)',\n      '(keyup)': '_onKeyup()',\n      '(mouseenter)': '_onMouseenter()',\n      // On Safari starting to slide temporarily triggers text selection mode which\n      // show the wrong cursor. We prevent it by stopping the `selectstart` event.\n      '(selectstart)': '$event.preventDefault()',\n      'class': 'mat-slider mat-focus-indicator',\n      'role': 'slider',\n      '[tabIndex]': 'tabIndex',\n      '[attr.aria-disabled]': 'disabled',\n      '[attr.aria-valuemax]': 'max',\n      '[attr.aria-valuemin]': 'min',\n      '[attr.aria-valuenow]': 'value',\n      '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n      '[class.mat-slider-disabled]': 'disabled',\n      '[class.mat-slider-has-ticks]': 'tickInterval',\n      '[class.mat-slider-horizontal]': '!vertical',\n      '[class.mat-slider-axis-inverted]': '_shouldInvertAxis()',\n      // Class binding which is only used by the test harness as there is no other\n      // way for the harness to detect if mouse coordinates need to be inverted.\n      '[class.mat-slider-invert-mouse-coords]': '_shouldInvertMouseCoords()',\n      '[class.mat-slider-sliding]': '_isSliding',\n      '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n      '[class.mat-slider-vertical]': 'vertical',\n      '[class.mat-slider-min-value]': '_isMinValue()',\n      '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue() && _getThumbGap() && _shouldInvertAxis()',\n      '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n    },\n    template: \"<div class=\\\"mat-slider-wrapper\\\" #sliderWrapper>\\n  <div class=\\\"mat-slider-track-wrapper\\\">\\n    <div class=\\\"mat-slider-track-background\\\" [ngStyle]=\\\"_getTrackBackgroundStyles()\\\"></div>\\n    <div class=\\\"mat-slider-track-fill\\\" [ngStyle]=\\\"_getTrackFillStyles()\\\"></div>\\n  </div>\\n  <div class=\\\"mat-slider-ticks-container\\\" [ngStyle]=\\\"_getTicksContainerStyles()\\\">\\n    <div class=\\\"mat-slider-ticks\\\" [ngStyle]=\\\"_getTicksStyles()\\\"></div>\\n  </div>\\n  <div class=\\\"mat-slider-thumb-container\\\" [ngStyle]=\\\"_getThumbContainerStyles()\\\">\\n    <div class=\\\"mat-slider-focus-ring\\\"></div>\\n    <div class=\\\"mat-slider-thumb\\\"></div>\\n    <div class=\\\"mat-slider-thumb-label\\\">\\n      <span class=\\\"mat-slider-thumb-label-text\\\">{{displayValue}}</span>\\n    </div>\\n  </div>\\n</div>\\n\",\n    inputs: ['disabled', 'color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:none;vertical-align:middle}.mat-slider:not(.mat-slider-disabled):active,.mat-slider.mat-slider-sliding:not(.mat-slider-disabled){cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-wrapper{position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{background-repeat:repeat;background-clip:content-box;box-sizing:border-box;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider.cdk-keyboard-focused .mat-slider-focus-ring,.mat-slider.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb-label,.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb{cursor:-webkit-grab;cursor:grab}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(0.7);transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-radius 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.cdk-high-contrast-active .mat-slider-thumb-label{outline:solid 1px}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-sliding .mat-slider-track-fill,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-thumb-container{transition-duration:0ms}.mat-slider-has-ticks .mat-slider-wrapper::after{content:\\\"\\\";position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{display:none}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(0.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}.cdk-high-contrast-active .mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(0.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}.cdk-high-contrast-active .mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(0.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-track-fill,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after{transition:none}\\n\"]\n  }]\n}];\n\nMatSlider.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: FocusMonitor\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }];\n};\n\nMatSlider.propDecorators = {\n  invert: [{\n    type: Input\n  }],\n  max: [{\n    type: Input\n  }],\n  min: [{\n    type: Input\n  }],\n  step: [{\n    type: Input\n  }],\n  thumbLabel: [{\n    type: Input\n  }],\n  tickInterval: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  displayWith: [{\n    type: Input\n  }],\n  vertical: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  input: [{\n    type: Output\n  }],\n  valueChange: [{\n    type: Output\n  }],\n  _sliderWrapper: [{\n    type: ViewChild,\n    args: ['sliderWrapper']\n  }]\n};\n/** Returns whether an event is a touch event. */\n\nfunction isTouchEvent(event) {\n  // This function is called for every pixel that the user has dragged so we need it to be\n  // as fast as possible. Since we only bind mouse events and touch events, we can assume\n  // that if the event's name starts with `t`, it's a touch event.\n  return event.type[0] === 't';\n}\n/** Gets the coordinates of a touch or mouse event relative to the viewport. */\n\n\nfunction getPointerPositionOnPage(event) {\n  // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n  var point = isTouchEvent(event) ? event.touches[0] || event.changedTouches[0] : event;\n  return {\n    x: point.clientX,\n    y: point.clientY\n  };\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatSliderModule = function MatSliderModule() {\n  _classCallCheck(this, MatSliderModule);\n};\n\nMatSliderModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule, MatCommonModule],\n    exports: [MatSlider, MatCommonModule],\n    declarations: [MatSlider]\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDER_VALUE_ACCESSOR, MatSlider, MatSliderChange, MatSliderModule };","map":{"version":3,"sources":["../../../../../../src/material/slider/slider.ts","../../../../../../src/material/slider/slider-module.ts","../../../../../../src/material/slider/public-api.ts","../../../../../../src/material/slider/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput\n} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  AfterViewInit,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {Subscription} from 'rxjs';\n\nconst activeEventOptions = normalizePassiveListenerOptions({passive: false});\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nclass MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n\n    // On Safari starting to slide temporarily triggers text selection mode which\n    // show the wrong cursor. We prevent it by stopping the `selectstart` event.\n    '(selectstart)': '$event.preventDefault()',\n    'class': 'mat-slider mat-focus-indicator',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_shouldInvertAxis()',\n    // Class binding which is only used by the test harness as there is no other\n    // way for the harness to detect if mouse coordinates need to be inverted.\n    '[class.mat-slider-invert-mouse-coords]': '_shouldInvertMouseCoords()',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue()',\n    '[class.mat-slider-hide-last-tick]':\n        'disabled || _isMinValue() && _getThumbGap() && _shouldInvertAxis()',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, AfterViewInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      // Value is never null but since setters and getters cannot have\n      // different types, the value getter is also typed to return null.\n      return this.displayWith(this.value!);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus(options?: FocusOptions) {\n    this._focusHostElement(options);\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  _shouldInvertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  _getThumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue() && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  _getTrackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._getThumbGap()}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  _getTrackFillStyles(): { [key: string]: string } {\n    const percent = this.percent;\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${percent}, 1` : `${percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._getThumbGap()}px) scale3d(${scale})`,\n      // iOS Safari has a bug where it won't re-render elements which start of as `scale(0)` until\n      // something forces a style recalculation on it. Since we'll end up with `scale(0)` when\n      // the value of the slider is 0, we can easily get into this situation. We force a\n      // recalculation by changing the element's `display` when it goes from 0 to any other value.\n      display: percent === 0 ? 'none' : ''\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  _getTicksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  _getTicksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue() && this._getThumbGap()) {\n      const shouldInvertAxis = this._shouldInvertAxis();\n      let side: string;\n\n      if (this.vertical) {\n        side = shouldInvertAxis ? 'Bottom' : 'Top';\n      } else {\n        side = shouldInvertAxis ? 'Right' : 'Left';\n      }\n\n      styles[`padding${side}`] = `${this._getThumbGap()}px`;\n    }\n\n    return styles;\n  }\n\n  _getThumbContainerStyles(): { [key: string]: string } {\n    const shouldInvertAxis = this._shouldInvertAxis();\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !shouldInvertAxis : shouldInvertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  _shouldInvertMouseCoords() {\n    const shouldInvertAxis = this._shouldInvertAxis();\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !shouldInvertAxis : shouldInvertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  /** Keeps track of the last pointer event that was captured by the slider. */\n  private _lastPointerEvent: MouseEvent | TouchEvent | null;\n\n  /** Used to subscribe to global move and end events */\n  protected _document: Document;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(DOCUMENT) _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n    this._document = _document;\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    _ngZone.runOutsideAngular(() => {\n      const element = elementRef.nativeElement;\n      element.addEventListener('mousedown', this._pointerDown, activeEventOptions);\n      element.addEventListener('touchstart', this._pointerDown, activeEventOptions);\n    });\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    const element = this._elementRef.nativeElement;\n    element.removeEventListener('mousedown', this._pointerDown, activeEventOptions);\n    element.removeEventListener('touchstart', this._pointerDown, activeEventOptions);\n    this._lastPointerEvent = null;\n    this._removeGlobalEvents();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Called when the user has put their pointer down on the slider. */\n  private _pointerDown = (event: TouchEvent | MouseEvent) => {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || this._isSliding || (!isTouchEvent(event) && event.button !== 0)) {\n      return;\n    }\n\n    this._ngZone.run(() => {\n      const oldValue = this.value;\n      const pointerPosition = getPointerPositionOnPage(event);\n      this._isSliding = true;\n      this._lastPointerEvent = event;\n      event.preventDefault();\n      this._focusHostElement();\n      this._onMouseenter(); // Simulate mouseenter in case this is a mobile device.\n      this._bindGlobalEvents(event);\n      this._focusHostElement();\n      this._updateValueFromPosition(pointerPosition);\n      this._valueOnSlideStart = oldValue;\n\n      // Emit a change and input event if the value changed.\n      if (oldValue != this.value) {\n        this._emitInputEvent();\n      }\n    });\n  }\n\n  /**\n   * Called when the user has moved their pointer after\n   * starting to drag. Bound on the document level.\n   */\n  private _pointerMove = (event: TouchEvent | MouseEvent) => {\n    if (this._isSliding) {\n      // Prevent the slide from selecting anything else.\n      event.preventDefault();\n      const oldValue = this.value;\n      this._lastPointerEvent = event;\n      this._updateValueFromPosition(getPointerPositionOnPage(event));\n\n      // Native range elements always emit `input` events when the value changed while sliding.\n      if (oldValue != this.value) {\n        this._emitInputEvent();\n      }\n    }\n  }\n\n  /** Called when the user has lifted their pointer. Bound on the document level. */\n  private _pointerUp = (event: TouchEvent | MouseEvent) => {\n    if (this._isSliding) {\n      event.preventDefault();\n      this._removeGlobalEvents();\n      this._isSliding = false;\n\n      if (this._valueOnSlideStart != this.value && !this.disabled) {\n        this._emitChangeEvent();\n      }\n\n      this._valueOnSlideStart = this._lastPointerEvent = null;\n    }\n  }\n\n  /** Called when the window has lost focus. */\n  private _windowBlur = () => {\n    // If the window is blurred while dragging we need to stop dragging because the\n    // browser won't dispatch the `mouseup` and `touchend` events anymore.\n    if (this._lastPointerEvent) {\n      this._pointerUp(this._lastPointerEvent);\n    }\n  }\n\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  private _getWindow(): Window {\n    return this._document.defaultView || window;\n  }\n\n  /**\n   * Binds our global move and end events. They're bound at the document level and only while\n   * dragging so that the user doesn't have to keep their pointer exactly over the slider\n   * as they're swiping across the screen.\n   */\n  private _bindGlobalEvents(triggerEvent: TouchEvent | MouseEvent) {\n    // Note that we bind the events to the `document`, because it allows us to capture\n    // drag cancel events where the user's pointer is outside the browser window.\n    const document = this._document;\n    const isTouch = isTouchEvent(triggerEvent);\n    const moveEventName = isTouch ? 'touchmove' : 'mousemove';\n    const endEventName = isTouch ? 'touchend' : 'mouseup';\n    document.addEventListener(moveEventName, this._pointerMove, activeEventOptions);\n    document.addEventListener(endEventName, this._pointerUp, activeEventOptions);\n\n    if (isTouch) {\n      document.addEventListener('touchcancel', this._pointerUp, activeEventOptions);\n    }\n\n    const window = this._getWindow();\n\n    if (typeof window !== 'undefined' && window) {\n      window.addEventListener('blur', this._windowBlur);\n    }\n  }\n\n  /** Removes any global event listeners that we may have added. */\n  private _removeGlobalEvents() {\n    const document = this._document;\n    document.removeEventListener('mousemove', this._pointerMove, activeEventOptions);\n    document.removeEventListener('mouseup', this._pointerUp, activeEventOptions);\n    document.removeEventListener('touchmove', this._pointerMove, activeEventOptions);\n    document.removeEventListener('touchend', this._pointerUp, activeEventOptions);\n    document.removeEventListener('touchcancel', this._pointerUp, activeEventOptions);\n\n    const window = this._getWindow();\n\n    if (typeof window !== 'undefined' && window) {\n      window.removeEventListener('blur', this._windowBlur);\n    }\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement(options?: FocusOptions) {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  static ngAcceptInputType_invert: BooleanInput;\n  static ngAcceptInputType_max: NumberInput;\n  static ngAcceptInputType_min: NumberInput;\n  static ngAcceptInputType_step: NumberInput;\n  static ngAcceptInputType_thumbLabel: BooleanInput;\n  static ngAcceptInputType_tickInterval: NumberInput;\n  static ngAcceptInputType_value: NumberInput;\n  static ngAcceptInputType_vertical: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_tabIndex: NumberInput;\n}\n\n/** Returns whether an event is a touch event. */\nfunction isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n  // This function is called for every pixel that the user has dragged so we need it to be\n  // as fast as possible. Since we only bind mouse events and touch events, we can assume\n  // that if the event's name starts with `t`, it's a touch event.\n  return event.type[0] === 't';\n}\n\n/** Gets the coordinates of a touch or mouse event relative to the viewport. */\nfunction getPointerPositionOnPage(event: MouseEvent | TouchEvent) {\n  // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n  const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n  return {x: point.clientX, y: point.clientY};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './slider-module';\nexport * from './slider';\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}