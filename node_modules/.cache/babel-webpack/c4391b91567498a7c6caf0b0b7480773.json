{"ast":null,"code":"import _createClass from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, TemplateRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, SkipSelf, Inject, ChangeDetectorRef, ViewContainerRef, Input, Output, ContentChild, ViewChild, Host, ElementRef, QueryList, ContentChildren, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { FocusMonitor, FocusKeyManager } from '@angular/cdk/a11y';\nimport { distinctUntilChanged, startWith, filter, take } from 'rxjs/operators';\nimport { ENTER, hasModifierKey, SPACE } from '@angular/cdk/keycodes';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, Subscription, EMPTY, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\n\nvar MAT_ACCORDION = new InjectionToken('MAT_ACCORDION');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\n\nvar EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\n\nvar matExpansionAnimations = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [state('collapsed, void', style({\n    transform: 'rotate(0deg)'\n  })), state('expanded', style({\n    transform: 'rotate(180deg)'\n  })), transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING))]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [state('collapsed, void', style({\n    height: '0px',\n    visibility: 'hidden'\n  })), state('expanded', style({\n    height: '*',\n    visibility: 'visible'\n  })), transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING))])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n\nvar MatExpansionPanelContent = function MatExpansionPanelContent(_template) {\n  _classCallCheck(this, MatExpansionPanelContent);\n\n  this._template = _template;\n};\n\nMatExpansionPanelContent.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'ng-template[matExpansionPanelContent]'\n  }]\n}];\n\nMatExpansionPanelContent.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }];\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Counter for generating unique element ids. */\n\n\nvar uniqueId = 0;\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\n\nvar MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = new InjectionToken('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\nvar Éµ0 = undefined;\n/**\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n\nvar MatExpansionPanel = /*#__PURE__*/function (_CdkAccordionItem) {\n  _inherits(MatExpansionPanel, _CdkAccordionItem);\n\n  var _super = _createSuper(MatExpansionPanel);\n\n  function MatExpansionPanel(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, _document, _animationMode, defaultOptions) {\n    var _this;\n\n    _classCallCheck(this, MatExpansionPanel);\n\n    _this = _super.call(this, accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    _this._viewContainerRef = _viewContainerRef;\n    _this._animationMode = _animationMode;\n    _this._hideToggle = false;\n    /** An event emitted after the body's expansion animation happens. */\n\n    _this.afterExpand = new EventEmitter();\n    /** An event emitted after the body's collapse animation happens. */\n\n    _this.afterCollapse = new EventEmitter();\n    /** Stream that emits for changes in `@Input` properties. */\n\n    _this._inputChanges = new Subject();\n    /** ID for the associated header element. Used for a11y labelling. */\n\n    _this._headerId = \"mat-expansion-panel-header-\".concat(uniqueId++);\n    /** Stream of body animation done events. */\n\n    _this._bodyAnimationDone = new Subject();\n    _this.accordion = accordion;\n    _this._document = _document; // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n\n    _this._bodyAnimationDone.pipe(distinctUntilChanged(function (x, y) {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(function (event) {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          _this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          _this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      _this.hideToggle = defaultOptions.hideToggle;\n    }\n\n    return _this;\n  }\n  /** Whether the toggle indicator should be hidden. */\n\n\n  _createClass(MatExpansionPanel, [{\n    key: \"_hasSpacing\",\n\n    /** Determines whether the expansion panel should have spacing between it and its siblings. */\n    value: function _hasSpacing() {\n      if (this.accordion) {\n        return this.expanded && this.accordion.displayMode === 'default';\n      }\n\n      return false;\n    }\n    /** Gets the expanded state string. */\n\n  }, {\n    key: \"_getExpandedState\",\n    value: function _getExpandedState() {\n      return this.expanded ? 'expanded' : 'collapsed';\n    }\n    /** Toggles the expanded state of the expansion panel. */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      this.expanded = !this.expanded;\n    }\n    /** Sets the expanded state of the expansion panel to false. */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.expanded = false;\n    }\n    /** Sets the expanded state of the expansion panel to true. */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      this.expanded = true;\n    }\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this2 = this;\n\n      if (this._lazyContent) {\n        // Render the content as soon as the panel becomes open.\n        this.opened.pipe(startWith(null), filter(function () {\n          return _this2.expanded && !_this2._portal;\n        }), take(1)).subscribe(function () {\n          _this2._portal = new TemplatePortal(_this2._lazyContent._template, _this2._viewContainerRef);\n        });\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this._inputChanges.next(changes);\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      _get(_getPrototypeOf(MatExpansionPanel.prototype), \"ngOnDestroy\", this).call(this);\n\n      this._bodyAnimationDone.complete();\n\n      this._inputChanges.complete();\n    }\n    /** Checks whether the expansion panel's content contains the currently-focused element. */\n\n  }, {\n    key: \"_containsFocus\",\n    value: function _containsFocus() {\n      if (this._body) {\n        var focusedElement = this._document.activeElement;\n        var bodyElement = this._body.nativeElement;\n        return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"hideToggle\",\n    get: function get() {\n      return this._hideToggle || this.accordion && this.accordion.hideToggle;\n    },\n    set: function set(value) {\n      this._hideToggle = coerceBooleanProperty(value);\n    }\n    /** The position of the expansion indicator. */\n\n  }, {\n    key: \"togglePosition\",\n    get: function get() {\n      return this._togglePosition || this.accordion && this.accordion.togglePosition;\n    },\n    set: function set(value) {\n      this._togglePosition = value;\n    }\n  }]);\n\n  return MatExpansionPanel;\n}(CdkAccordionItem);\n\nMatExpansionPanel.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-expansion-panel',\n    exportAs: 'matExpansionPanel',\n    template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\",\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled', 'expanded'],\n    outputs: ['opened', 'closed', 'expandedChange'],\n    animations: [matExpansionAnimations.bodyExpansion],\n    providers: [// Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {\n      provide: MAT_ACCORDION,\n      useValue: Éµ0\n    }],\n    host: {\n      'class': 'mat-expansion-panel',\n      '[class.mat-expanded]': 'expanded',\n      '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n      '[class.mat-expansion-panel-spacing]': '_hasSpacing()'\n    },\n    styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button-base,.mat-action-row button.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button-base,[dir=rtl] .mat-action-row button.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n  }]\n}];\n\nMatExpansionPanel.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: SkipSelf\n    }, {\n      type: Inject,\n      args: [MAT_ACCORDION]\n    }]\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: UniqueSelectionDispatcher\n  }, {\n    type: ViewContainerRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n    }, {\n      type: Optional\n    }]\n  }];\n};\n\nMatExpansionPanel.propDecorators = {\n  hideToggle: [{\n    type: Input\n  }],\n  togglePosition: [{\n    type: Input\n  }],\n  afterExpand: [{\n    type: Output\n  }],\n  afterCollapse: [{\n    type: Output\n  }],\n  _lazyContent: [{\n    type: ContentChild,\n    args: [MatExpansionPanelContent]\n  }],\n  _body: [{\n    type: ViewChild,\n    args: ['body']\n  }]\n};\n/**\n * Actions of a `<mat-expansion-panel>`.\n */\n\nvar MatExpansionPanelActionRow = function MatExpansionPanelActionRow() {\n  _classCallCheck(this, MatExpansionPanelActionRow);\n};\n\nMatExpansionPanelActionRow.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-action-row',\n    host: {\n      class: 'mat-action-row'\n    }\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Header element of a `<mat-expansion-panel>`.\n */\n\nvar MatExpansionPanelHeader = /*#__PURE__*/function () {\n  function MatExpansionPanelHeader(panel, _element, _focusMonitor, _changeDetectorRef, defaultOptions, _animationMode) {\n    var _this3 = this;\n\n    _classCallCheck(this, MatExpansionPanelHeader);\n\n    this.panel = panel;\n    this._element = _element;\n    this._focusMonitor = _focusMonitor;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._animationMode = _animationMode;\n    this._parentChangeSubscription = Subscription.EMPTY;\n    var accordionHideToggleChange = panel.accordion ? panel.accordion._stateChanges.pipe(filter(function (changes) {\n      return !!(changes['hideToggle'] || changes['togglePosition']);\n    })) : EMPTY; // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n\n    this._parentChangeSubscription = merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(filter(function (changes) {\n      return !!(changes['hideToggle'] || changes['disabled'] || changes['togglePosition']);\n    }))).subscribe(function () {\n      return _this3._changeDetectorRef.markForCheck();\n    }); // Avoids focus being lost if the panel contained the focused element and was closed.\n\n    panel.closed.pipe(filter(function () {\n      return panel._containsFocus();\n    })).subscribe(function () {\n      return _focusMonitor.focusVia(_element, 'program');\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n\n\n  _createClass(MatExpansionPanelHeader, [{\n    key: \"_toggle\",\n\n    /** Toggles the expanded state of the panel. */\n    value: function _toggle() {\n      if (!this.disabled) {\n        this.panel.toggle();\n      }\n    }\n    /** Gets whether the panel is expanded. */\n\n  }, {\n    key: \"_isExpanded\",\n    value: function _isExpanded() {\n      return this.panel.expanded;\n    }\n    /** Gets the expanded state string of the panel. */\n\n  }, {\n    key: \"_getExpandedState\",\n    value: function _getExpandedState() {\n      return this.panel._getExpandedState();\n    }\n    /** Gets the panel id. */\n\n  }, {\n    key: \"_getPanelId\",\n    value: function _getPanelId() {\n      return this.panel.id;\n    }\n    /** Gets the toggle position for the header. */\n\n  }, {\n    key: \"_getTogglePosition\",\n    value: function _getTogglePosition() {\n      return this.panel.togglePosition;\n    }\n    /** Gets whether the expand indicator should be shown. */\n\n  }, {\n    key: \"_showToggle\",\n    value: function _showToggle() {\n      return !this.panel.hideToggle && !this.panel.disabled;\n    }\n    /**\n     * Gets the current height of the header. Null if no custom height has been\n     * specified, and if the default height from the stylesheet should be used.\n     */\n\n  }, {\n    key: \"_getHeaderHeight\",\n    value: function _getHeaderHeight() {\n      var isExpanded = this._isExpanded();\n\n      if (isExpanded && this.expandedHeight) {\n        return this.expandedHeight;\n      } else if (!isExpanded && this.collapsedHeight) {\n        return this.collapsedHeight;\n      }\n\n      return null;\n    }\n    /** Handle keydown event calling to toggle() if appropriate. */\n\n  }, {\n    key: \"_keydown\",\n    value: function _keydown(event) {\n      switch (event.keyCode) {\n        // Toggle for space and enter keys.\n        case SPACE:\n        case ENTER:\n          if (!hasModifierKey(event)) {\n            event.preventDefault();\n\n            this._toggle();\n          }\n\n          break;\n\n        default:\n          if (this.panel.accordion) {\n            this.panel.accordion._handleHeaderKeydown(event);\n          }\n\n          return;\n      }\n    }\n    /**\n     * Focuses the panel header. Implemented as a part of `FocusableOption`.\n     * @param origin Origin of the action that triggered the focus.\n     * @docs-private\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      var origin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'program';\n      var options = arguments.length > 1 ? arguments[1] : undefined;\n\n      this._focusMonitor.focusVia(this._element, origin, options);\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this4 = this;\n\n      this._focusMonitor.monitor(this._element).subscribe(function (origin) {\n        if (origin && _this4.panel.accordion) {\n          _this4.panel.accordion._handleHeaderFocus(_this4);\n        }\n      });\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._parentChangeSubscription.unsubscribe();\n\n      this._focusMonitor.stopMonitoring(this._element);\n    }\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this.panel.disabled;\n    }\n  }]);\n\n  return MatExpansionPanelHeader;\n}();\n\nMatExpansionPanelHeader.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-expansion-panel-header',\n    template: \"<span class=\\\"mat-content\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n<span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\"\\n      class=\\\"mat-expansion-indicator\\\"></span>\\n\",\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [matExpansionAnimations.indicatorRotate],\n    host: {\n      'class': 'mat-expansion-panel-header mat-focus-indicator',\n      'role': 'button',\n      '[attr.id]': 'panel._headerId',\n      '[attr.tabindex]': 'disabled ? -1 : 0',\n      '[attr.aria-controls]': '_getPanelId()',\n      '[attr.aria-expanded]': '_isExpanded()',\n      '[attr.aria-disabled]': 'panel.disabled',\n      '[class.mat-expanded]': '_isExpanded()',\n      '[class.mat-expansion-toggle-indicator-after]': \"_getTogglePosition() === 'after'\",\n      '[class.mat-expansion-toggle-indicator-before]': \"_getTogglePosition() === 'before'\",\n      '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n      '[style.height]': '_getHeaderHeight()',\n      '(click)': '_toggle()',\n      '(keydown)': '_keydown($event)'\n    },\n    styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}\\n\"]\n  }]\n}];\n\nMatExpansionPanelHeader.ctorParameters = function () {\n  return [{\n    type: MatExpansionPanel,\n    decorators: [{\n      type: Host\n    }]\n  }, {\n    type: ElementRef\n  }, {\n    type: FocusMonitor\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n    }, {\n      type: Optional\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }];\n};\n\nMatExpansionPanelHeader.propDecorators = {\n  expandedHeight: [{\n    type: Input\n  }],\n  collapsedHeight: [{\n    type: Input\n  }]\n};\n/**\n * Description element of a `<mat-expansion-panel-header>`.\n */\n\nvar MatExpansionPanelDescription = function MatExpansionPanelDescription() {\n  _classCallCheck(this, MatExpansionPanelDescription);\n};\n\nMatExpansionPanelDescription.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-panel-description',\n    host: {\n      class: 'mat-expansion-panel-header-description'\n    }\n  }]\n}];\n/**\n * Title element of a `<mat-expansion-panel-header>`.\n */\n\nvar MatExpansionPanelTitle = function MatExpansionPanelTitle() {\n  _classCallCheck(this, MatExpansionPanelTitle);\n};\n\nMatExpansionPanelTitle.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-panel-title',\n    host: {\n      class: 'mat-expansion-panel-header-title'\n    }\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Directive for a Material Design Accordion.\n */\n\nvar MatAccordion = /*#__PURE__*/function (_CdkAccordion) {\n  _inherits(MatAccordion, _CdkAccordion);\n\n  var _super2 = _createSuper(MatAccordion);\n\n  function MatAccordion() {\n    var _this5;\n\n    _classCallCheck(this, MatAccordion);\n\n    _this5 = _super2.apply(this, arguments);\n    /** Headers belonging to this accordion. */\n\n    _this5._ownHeaders = new QueryList();\n    _this5._hideToggle = false;\n    /**\n     * Display mode used for all expansion panels in the accordion. Currently two display\n     * modes exist:\n     *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n     *     panel at a different elevation from the rest of the accordion.\n     *  flat - no spacing is placed around expanded panels, showing all panels at the same\n     *     elevation.\n     */\n\n    _this5.displayMode = 'default';\n    /** The position of the expansion indicator. */\n\n    _this5.togglePosition = 'after';\n    return _this5;\n  }\n  /** Whether the expansion indicator should be hidden. */\n\n\n  _createClass(MatAccordion, [{\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this6 = this;\n\n      this._headers.changes.pipe(startWith(this._headers)).subscribe(function (headers) {\n        _this6._ownHeaders.reset(headers.filter(function (header) {\n          return header.panel.accordion === _this6;\n        }));\n\n        _this6._ownHeaders.notifyOnChanges();\n      });\n\n      this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap().withHomeAndEnd();\n    }\n    /** Handles keyboard events coming in from the panel headers. */\n\n  }, {\n    key: \"_handleHeaderKeydown\",\n    value: function _handleHeaderKeydown(event) {\n      this._keyManager.onKeydown(event);\n    }\n  }, {\n    key: \"_handleHeaderFocus\",\n    value: function _handleHeaderFocus(header) {\n      this._keyManager.updateActiveItem(header);\n    }\n  }, {\n    key: \"hideToggle\",\n    get: function get() {\n      return this._hideToggle;\n    },\n    set: function set(show) {\n      this._hideToggle = coerceBooleanProperty(show);\n    }\n  }]);\n\n  return MatAccordion;\n}(CdkAccordion);\n\nMatAccordion.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-accordion',\n    exportAs: 'matAccordion',\n    inputs: ['multi'],\n    providers: [{\n      provide: MAT_ACCORDION,\n      useExisting: MatAccordion\n    }],\n    host: {\n      class: 'mat-accordion',\n      // Class binding which is only used by the test harness as there is no other\n      // way for the harness to detect if multiple panel support is enabled.\n      '[class.mat-accordion-multi]': 'this.multi'\n    }\n  }]\n}];\nMatAccordion.propDecorators = {\n  _headers: [{\n    type: ContentChildren,\n    args: [MatExpansionPanelHeader, {\n      descendants: true\n    }]\n  }],\n  hideToggle: [{\n    type: Input\n  }],\n  displayMode: [{\n    type: Input\n  }],\n  togglePosition: [{\n    type: Input\n  }]\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar MatExpansionModule = function MatExpansionModule() {\n  _classCallCheck(this, MatExpansionModule);\n};\n\nMatExpansionModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule, CdkAccordionModule, PortalModule],\n    exports: [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent],\n    declarations: [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent]\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { EXPANSION_PANEL_ANIMATION_TIMING, MAT_ACCORDION, MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, MatAccordion, MatExpansionModule, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelContent, MatExpansionPanelDescription, MatExpansionPanelHeader, MatExpansionPanelTitle, matExpansionAnimations, Éµ0 };","map":{"version":3,"sources":["../../../../../../src/material/expansion/accordion-base.ts","../../../../../../src/material/expansion/expansion-animations.ts","../../../../../../src/material/expansion/expansion-panel-content.ts","../../../../../../src/material/expansion/expansion-panel.ts","../../../../../../src/material/expansion/expansion-panel-header.ts","../../../../../../src/material/expansion/accordion.ts","../../../../../../src/material/expansion/expansion-module.ts","../../../../../../src/material/expansion/public-api.ts","../../../../../../src/material/expansion/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;;;;;AAuCA;;;;;AAIA,IAAa,aAAa,GAAG,IAAI,cAAJ,CAAqC,eAArC,CAA7B;AC3CA;;;;;;;;AAgBA;;;AAEA,IAAa,gCAAgC,GAAG,mCAAhD;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,IAAa,sBAAsB,GAG/B;;AAEF,EAAA,eAAe,EAAE,OAAO,CAAC,iBAAD,EAAoB,CAC1C,KAAK,CAAC,iBAAD,EAAoB,KAAK,CAAC;AAAC,IAAA,SAAS,EAAE;AAAZ,GAAD,CAAzB,CADqC,EAE1C,KAAK,CAAC,UAAD,EAAa,KAAK,CAAC;AAAC,IAAA,SAAS,EAAE;AAAZ,GAAD,CAAlB,CAFqC,EAG1C,UAAU,CAAC,2CAAD,EACR,OAAO,CAAC,gCAAD,CADC,CAHgC,CAApB,CAFtB;;;AASF,EAAA,aAAa,EAAE,OAAO,CAAC,eAAD,EAAkB,CACtC,KAAK,CAAC,iBAAD,EAAoB,KAAK,CAAC;AAAC,IAAA,MAAM,EAAE,KAAT;AAAgB,IAAA,UAAU,EAAE;AAA5B,GAAD,CAAzB,CADiC,EAEtC,KAAK,CAAC,UAAD,EAAa,KAAK,CAAC;AAAC,IAAA,MAAM,EAAE,GAAT;AAAc,IAAA,UAAU,EAAE;AAA1B,GAAD,CAAlB,CAFiC,EAGtC,UAAU,CAAC,2CAAD,EACR,OAAO,CAAC,gCAAD,CADC,CAH4B,CAAlB;AATpB,CAHJ;AC1CA;;;;;;;;AAUA;;;;;IAOa,wB,GACX,kCAAmB,SAAnB,EAA8C;AAAA;;AAA3B,OAAA,SAAA,GAAA,SAAA;AAA+B,C;;;QAJnD,S;AAAS,EAAA,IAAA,EAAA,CAAC;AACT,IAAA,QAAQ,EAAE;AADD,GAAD;;;;;UANS;;;ACRnB;;;;;;;;AA8CA;;;AACA,IAAI,QAAQ,GAAG,CAAf;;;;;;AAqBA,IAAa,mCAAmC,GAC5C,IAAI,cAAJ,CAAoD,qCAApD,CADJ;SAoBuC,S;;;;;;IAS1B,iB;;;;;AAmDX,6BAA2D,SAA3D,EACY,kBADZ,EAEY,0BAFZ,EAGoB,iBAHpB,EAI8B,SAJ9B,EAK8D,cAL9D,EAOgB,cAPhB,EAOgE;AAAA;;AAAA;;AAC9D,8BAAM,SAAN,EAAiB,kBAAjB,EAAqC,0BAArC;AALkB,UAAA,iBAAA,GAAA,iBAAA;AAE0C,UAAA,cAAA,GAAA,cAAA;AArDtD,UAAA,WAAA,GAAc,KAAd;;;AAsBE,UAAA,WAAA,GAAc,IAAI,YAAJ,EAAd;;;AAGA,UAAA,aAAA,GAAgB,IAAI,YAAJ,EAAhB;;;AAGD,UAAA,aAAA,GAAgB,IAAI,OAAJ,EAAhB;;;AAeT,UAAA,SAAA,wCAA0C,QAAQ,EAAlD;;;AAGA,UAAA,kBAAA,GAAqB,IAAI,OAAJ,EAArB;AAWE,UAAK,SAAL,GAAiB,SAAjB;AACA,UAAK,SAAL,GAAiB,SAAjB,CAH8D,C;;;AAO9D,UAAK,kBAAL,CAAwB,IAAxB,CAA6B,oBAAoB,CAAC,UAAC,CAAD,EAAI,CAAJ,EAAK;AACrD,aAAO,CAAC,CAAC,SAAF,KAAgB,CAAC,CAAC,SAAlB,IAA+B,CAAC,CAAC,OAAF,KAAc,CAAC,CAAC,OAAtD;AACD,KAFgD,CAAjD,EAEI,SAFJ,CAEc,UAAA,KAAK,EAAA;AACjB,UAAI,KAAK,CAAC,SAAN,KAAoB,MAAxB,EAAgC;AAC9B,YAAI,KAAK,CAAC,OAAN,KAAkB,UAAtB,EAAkC;AAChC,gBAAK,WAAL,CAAiB,IAAjB;AACD,SAFD,MAEO,IAAI,KAAK,CAAC,OAAN,KAAkB,WAAtB,EAAmC;AACxC,gBAAK,aAAL,CAAmB,IAAnB;AACD;AACF;AACF,KAVD;;AAYA,QAAI,cAAJ,EAAoB;AAClB,YAAK,UAAL,GAAkB,cAAc,CAAC,UAAjC;AACD;;AArB6D;AAsB/D;;;;;;;;kCAGU;AACT,UAAI,KAAK,SAAT,EAAoB;AAClB,eAAO,KAAK,QAAL,IAAiB,KAAK,SAAL,CAAe,WAAf,KAA+B,SAAvD;AACD;;AACD,aAAO,KAAP;AACD;;;;;wCAGgB;AACf,aAAO,KAAK,QAAL,GAAgB,UAAhB,GAA6B,WAApC;AACD;;;;;6BAGK;AACJ,WAAK,QAAL,GAAgB,CAAC,KAAK,QAAtB;AACD;;;;;4BAGI;AACH,WAAK,QAAL,GAAgB,KAAhB;AACD;;;;;2BAGG;AACF,WAAK,QAAL,GAAgB,IAAhB;AACD;;;yCAEiB;AAAA;;AAChB,UAAI,KAAK,YAAT,EAAuB;;AAErB,aAAK,MAAL,CAAY,IAAZ,CACE,SAAS,CAAC,IAAD,CADX,EAEE,MAAM,CAAC;AAAA,iBAAM,MAAI,CAAC,QAAL,IAAiB,CAAC,MAAI,CAAC,OAA7B;AAAA,SAAD,CAFR,EAGE,IAAI,CAAC,CAAD,CAHN,EAIE,SAJF,CAIY,YAAA;AACV,UAAA,MAAI,CAAC,OAAL,GAAe,IAAI,cAAJ,CAAmB,MAAI,CAAC,YAAL,CAAkB,SAArC,EAAgD,MAAI,CAAC,iBAArD,CAAf;AACD,SAND;AAOD;AACF;;;gCAEW,O,EAAsB;AAChC,WAAK,aAAL,CAAmB,IAAnB,CAAwB,OAAxB;AACD;;;kCAEU;AACT;;AACA,WAAK,kBAAL,CAAwB,QAAxB;;AACA,WAAK,aAAL,CAAmB,QAAnB;AACD;;;;;qCAGa;AACZ,UAAI,KAAK,KAAT,EAAgB;AACd,YAAM,cAAc,GAAG,KAAK,SAAL,CAAe,aAAtC;AACA,YAAM,WAAW,GAAG,KAAK,KAAL,CAAW,aAA/B;AACA,eAAO,cAAc,KAAK,WAAnB,IAAkC,WAAW,CAAC,QAAZ,CAAqB,cAArB,CAAzC;AACD;;AAED,aAAO,KAAP;AACD;;;wBAtIa;AACZ,aAAO,KAAK,WAAL,IAAqB,KAAK,SAAL,IAAkB,KAAK,SAAL,CAAe,UAA7D;AACD,K;sBACc,K,EAAc;AAC3B,WAAK,WAAL,GAAmB,qBAAqB,CAAC,KAAD,CAAxC;AACD;;;;;wBAIiB;AAChB,aAAO,KAAK,eAAL,IAAyB,KAAK,SAAL,IAAkB,KAAK,SAAL,CAAe,cAAjE;AACD,K;sBACkB,K,EAAiC;AAClD,WAAK,eAAL,GAAuB,KAAvB;AACD;;;;EAtBoC,gB;;;QAtBtC,S;AAAS,EAAA,IAAA,EAAA,CAAC;AAET,IAAA,QAAQ,EAAE,qBAFD;AAGT,IAAA,QAAQ,EAAE,mBAHD;AAIT,IAAA,QAAA,EAAA,ihBAJS;AAKT,IAAA,aAAa,EAAE,iBAAiB,CAAC,IALxB;AAMT,IAAA,eAAe,EAAE,uBAAuB,CAAC,MANhC;AAOT,IAAA,MAAM,EAAE,CAAC,UAAD,EAAa,UAAb,CAPC;AAQT,IAAA,OAAO,EAAE,CAAC,QAAD,EAAW,QAAX,EAAqB,gBAArB,CARA;AAST,IAAA,UAAU,EAAE,CAAC,sBAAsB,CAAC,aAAxB,CATH;AAUT,IAAA,SAAS,EAAE,C;;AAGT;AAAC,MAAA,OAAO,EAAE,aAAV;AAAyB,MAAA,QAAQ,EAAA;AAAjC,KAHS,CAVF;AAeT,IAAA,IAAI,EAAE;AACJ,eAAS,qBADL;AAEJ,8BAAwB,UAFpB;AAGJ,yCAAmC,qCAH/B;AAIJ,6CAAuC;AAJnC,KAfG;;AAAA,GAAD;;;;;;;YAyEK;OAAQ;AAAA,MAAA,IAAA,EAAI;AAAJ,K,EAAY;AAAA,MAAA,IAAA,EAAI,MAAJ;AAAU,MAAA,IAAA,EAAA,CAAC,aAAD;AAAV,K;;UAnIjC;;UANM;;UAsBN;;;;YAuHa,M;AAAM,MAAA,IAAA,EAAA,CAAC,QAAD;;;;;YACN;OAAQ;AAAA,MAAA,IAAA,EAAI,MAAJ;AAAU,MAAA,IAAA,EAAA,CAAC,qBAAD;AAAV,K;;;;YACR,M;AAAM,MAAA,IAAA,EAAA,CAAC,mCAAD;OAAoC;AAAA,MAAA,IAAA,EAAG;AAAH,K;;;;;;UAlDtD;;;UASA;;;UASA;;;UAGA;;;UASA,Y;AAAY,IAAA,IAAA,EAAA,CAAC,wBAAD;;;UAGZ,S;AAAS,IAAA,IAAA,EAAA,CAAC,MAAD;;;;;;;IAsHC,0B;;;;;QANZ,S;AAAS,EAAA,IAAA,EAAA,CAAC;AACT,IAAA,QAAQ,EAAE,gBADD;AAET,IAAA,IAAI,EAAE;AACJ,MAAA,KAAK,EAAE;AADH;AAFG,GAAD;;ACzPV;;;;;;;;AAoCA;;;;IA6Ba,uB;AAGX,mCACmB,KADnB,EAEY,QAFZ,EAGY,aAHZ,EAIY,kBAJZ,EAMQ,cANR,EAOsD,cAPtD,EAO6E;AAAA;;AAAA;;AAN1D,SAAA,KAAA,GAAA,KAAA;AACP,SAAA,QAAA,GAAA,QAAA;AACA,SAAA,aAAA,GAAA,aAAA;AACA,SAAA,kBAAA,GAAA,kBAAA;AAG0C,SAAA,cAAA,GAAA,cAAA;AAT9C,SAAA,yBAAA,GAA4B,YAAY,CAAC,KAAzC;AAUN,QAAM,yBAAyB,GAAG,KAAK,CAAC,SAAN,GAC9B,KAAK,CAAC,SAAN,CAAgB,aAAhB,CAA8B,IAA9B,CACI,MAAM,CAAC,UAAA,OAAO;AAAA,aAAI,CAAC,EAAE,OAAO,CAAC,YAAD,CAAP,IAAyB,OAAO,CAAC,gBAAD,CAAlC,CAAL;AAAA,KAAR,CADV,CAD8B,GAG9B,KAHJ,CAD2E,C;;;AAQ3E,SAAK,yBAAL,GACI,KAAK,CACD,KAAK,CAAC,MADL,EACa,KAAK,CAAC,MADnB,EAC2B,yBAD3B,EAED,KAAK,CAAC,aAAN,CAAoB,IAApB,CAAyB,MAAM,CAC3B,UAAA,OAAO,EAAA;AACL,aAAO,CAAC,EACN,OAAO,CAAC,YAAD,CAAP,IACA,OAAO,CAAC,UAAD,CADP,IAEA,OAAO,CAAC,gBAAD,CAHD,CAAR;AAIC,KANwB,CAA/B,CAFC,CAAL,CASH,SATG,CASO;AAAA,aAAM,MAAI,CAAC,kBAAL,CAAwB,YAAxB,EAAN;AAAA,KATP,CADJ,CAR2E,C;;AAqB3E,IAAA,KAAK,CAAC,MAAN,CACG,IADH,CACQ,MAAM,CAAC;AAAA,aAAM,KAAK,CAAC,cAAN,EAAN;AAAA,KAAD,CADd,EAEG,SAFH,CAEa;AAAA,aAAM,aAAa,CAAC,QAAd,CAAuB,QAAvB,EAAiC,SAAjC,CAAN;AAAA,KAFb;;AAIA,QAAI,cAAJ,EAAoB;AAClB,WAAK,cAAL,GAAsB,cAAc,CAAC,cAArC;AACA,WAAK,eAAL,GAAuB,cAAc,CAAC,eAAtC;AACD;AACF;;;;;;;;;;;8BAiBM;AACL,UAAI,CAAC,KAAK,QAAV,EAAoB;AAClB,aAAK,KAAL,CAAW,MAAX;AACD;AACF;;;;;kCAGU;AACT,aAAO,KAAK,KAAL,CAAW,QAAlB;AACD;;;;;wCAGgB;AACf,aAAO,KAAK,KAAL,CAAW,iBAAX,EAAP;AACD;;;;;kCAGU;AACT,aAAO,KAAK,KAAL,CAAW,EAAlB;AACD;;;;;yCAGiB;AAChB,aAAO,KAAK,KAAL,CAAW,cAAlB;AACD;;;;;kCAGU;AACT,aAAO,CAAC,KAAK,KAAL,CAAW,UAAZ,IAA0B,CAAC,KAAK,KAAL,CAAW,QAA7C;AACD;;;;;;;;uCAMe;AACd,UAAM,UAAU,GAAG,KAAK,WAAL,EAAnB;;AACA,UAAI,UAAU,IAAI,KAAK,cAAvB,EAAuC;AACrC,eAAO,KAAK,cAAZ;AACD,OAFD,MAEO,IAAI,CAAC,UAAD,IAAe,KAAK,eAAxB,EAAyC;AAC9C,eAAO,KAAK,eAAZ;AACD;;AACD,aAAO,IAAP;AACD;;;;;6BAGQ,K,EAAoB;AAC3B,cAAQ,KAAK,CAAC,OAAd;;AAEE,aAAK,KAAL;AACA,aAAK,KAAL;AACE,cAAI,CAAC,cAAc,CAAC,KAAD,CAAnB,EAA4B;AAC1B,YAAA,KAAK,CAAC,cAAN;;AACA,iBAAK,OAAL;AACD;;AAED;;AACF;AACE,cAAI,KAAK,KAAL,CAAW,SAAf,EAA0B;AACxB,iBAAK,KAAL,CAAW,SAAX,CAAqB,oBAArB,CAA0C,KAA1C;AACD;;AAED;AAfJ;AAiBD;;;;;;;;;4BAO4D;AAAA,UAAvD,MAAuD,uEAAjC,SAAiC;AAAA,UAAtB,OAAsB;;AAC3D,WAAK,aAAL,CAAmB,QAAnB,CAA4B,KAAK,QAAjC,EAA2C,MAA3C,EAAmD,OAAnD;AACD;;;sCAEc;AAAA;;AACb,WAAK,aAAL,CAAmB,OAAnB,CAA2B,KAAK,QAAhC,EAA0C,SAA1C,CAAoD,UAAA,MAAM,EAAA;AACxD,YAAI,MAAM,IAAI,MAAI,CAAC,KAAL,CAAW,SAAzB,EAAoC;AAClC,UAAA,MAAI,CAAC,KAAL,CAAW,SAAX,CAAqB,kBAArB,CAAwC,MAAxC;AACD;AACF,OAJD;AAKD;;;kCAEU;AACT,WAAK,yBAAL,CAA+B,WAA/B;;AACA,WAAK,aAAL,CAAmB,cAAnB,CAAkC,KAAK,QAAvC;AACD;;;wBA3FW;AACV,aAAO,KAAK,KAAL,CAAW,QAAlB;AACD;;;;;;;QA/EF,S;AAAS,EAAA,IAAA,EAAA,CAAC;AACT,IAAA,QAAQ,EAAE,4BADD;AAGT,IAAA,QAAA,EAAA,uTAHS;AAIT,IAAA,aAAa,EAAE,iBAAiB,CAAC,IAJxB;AAKT,IAAA,eAAe,EAAE,uBAAuB,CAAC,MALhC;AAMT,IAAA,UAAU,EAAE,CACV,sBAAsB,CAAC,eADb,CANH;AAST,IAAA,IAAI,EAAE;AACJ,eAAS,gDADL;AAEJ,cAAQ,QAFJ;AAGJ,mBAAa,iBAHT;AAIJ,yBAAmB,mBAJf;AAKJ,8BAAwB,eALpB;AAMJ,8BAAwB,eANpB;AAOJ,8BAAwB,gBAPpB;AAQJ,8BAAwB,eARpB;AASJ,wFATI;AAUJ,0FAVI;AAWJ,yCAAmC,qCAX/B;AAYJ,wBAAkB,oBAZd;AAaJ,iBAAW,WAbP;AAcJ,mBAAa;AAdT,KATG;;AAAA,GAAD;;;;;UATR,iB;AAAiB,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAuCZ;AAvCY,KAAA;;UAdjB;;UARuB;;UAKvB;;;;YA4DK,M;AAAM,MAAA,IAAA,EAAA,CAAC,mCAAD;OAAoC;AAAA,MAAA,IAAA,EAAG;AAAH,K;;;;YAE1C;OAAQ;AAAA,MAAA,IAAA,EAAI,MAAJ;AAAU,MAAA,IAAA,EAAA,CAAC,qBAAD;AAAV,K;;;;;;UAgCZ;;;UAGA;;;;;;;IA6GU,4B;;;;;QANZ,S;AAAS,EAAA,IAAA,EAAA,CAAC;AACT,IAAA,QAAQ,EAAE,uBADD;AAET,IAAA,IAAI,EAAE;AACJ,MAAA,KAAK,EAAE;AADH;AAFG,GAAD;;;;;;IAiBG,sB;;;;;QANZ,S;AAAS,EAAA,IAAA,EAAA,CAAC;AACT,IAAA,QAAQ,EAAE,iBADD;AAET,IAAA,IAAI,EAAE;AACJ,MAAA,KAAK,EAAE;AADH;AAFG,GAAD;;AChOV;;;;;;;;AAqBA;;;;IAkBa,Y;;;;;AAfb,0BAAA;AAAA;;AAAA;;;;;AAmBU,WAAA,WAAA,GAAc,IAAI,SAAJ,EAAd;AAUA,WAAA,WAAA,GAAuB,KAAvB;;;;;;;;;;AAUC,WAAA,WAAA,GAAuC,SAAvC;;;AAGA,WAAA,cAAA,GAA6C,OAA7C;AA1CX;AAiEC;;;;;;yCArBmB;AAAA;;AAChB,WAAK,QAAL,CAAc,OAAd,CACG,IADH,CACQ,SAAS,CAAC,KAAK,QAAN,CADjB,EAEG,SAFH,CAEa,UAAC,OAAD,EAA4C;AACrD,QAAA,MAAI,CAAC,WAAL,CAAiB,KAAjB,CAAuB,OAAO,CAAC,MAAR,CAAe,UAAA,MAAM;AAAA,iBAAI,MAAM,CAAC,KAAP,CAAa,SAAb,KAA2B,MAA/B;AAAA,SAArB,CAAvB;;AACA,QAAA,MAAI,CAAC,WAAL,CAAiB,eAAjB;AACD,OALH;;AAOA,WAAK,WAAL,GAAmB,IAAI,eAAJ,CAAoB,KAAK,WAAzB,EAAsC,QAAtC,GAAiD,cAAjD,EAAnB;AACD;;;;;yCAGoB,K,EAAoB;AACvC,WAAK,WAAL,CAAiB,SAAjB,CAA2B,KAA3B;AACD;;;uCAEkB,M,EAA+B;AAChD,WAAK,WAAL,CAAiB,gBAAjB,CAAkC,MAAlC;AACD;;;wBAnCa;AAAc,aAAO,KAAK,WAAZ;AAA0B,K;sBACvC,I,EAAa;AAAI,WAAK,WAAL,GAAmB,qBAAqB,CAAC,IAAD,CAAxC;AAAiD;;;;EAbjD,Y;;;QAfjC,S;AAAS,EAAA,IAAA,EAAA,CAAC;AACT,IAAA,QAAQ,EAAE,eADD;AAET,IAAA,QAAQ,EAAE,cAFD;AAGT,IAAA,MAAM,EAAE,CAAC,OAAD,CAHC;AAIT,IAAA,SAAS,EAAE,CAAC;AACV,MAAA,OAAO,EAAE,aADC;AAEV,MAAA,WAAW,EAAE;AAFH,KAAD,CAJF;AAQT,IAAA,IAAI,EAAE;AACJ,MAAA,KAAK,EAAE,eADH;;;AAIJ,qCAA+B;AAJ3B;AARG,GAAD;;;;UAsBP,e;AAAe,IAAA,IAAA,EAAA,CAAC,uBAAD,EAA0B;AAAC,MAAA,WAAW,EAAE;AAAd,KAA1B;;;UAIf;;;UAaA;;;UAGA;;;AClEH;;;;;;;;IA2Ca,kB;;;;;QArBZ,Q;AAAQ,EAAA,IAAA,EAAA,CAAC;AACR,IAAA,OAAO,EAAE,CAAC,YAAD,EAAe,kBAAf,EAAmC,YAAnC,CADD;AAER,IAAA,OAAO,EAAE,CACP,YADO,EAEP,iBAFO,EAGP,0BAHO,EAIP,uBAJO,EAKP,sBALO,EAMP,4BANO,EAOP,wBAPO,CAFD;AAWR,IAAA,YAAY,EAAE,CACZ,YADY,EAEZ,iBAFY,EAGZ,0BAHY,EAIZ,uBAJY,EAKZ,sBALY,EAMZ,4BANY,EAOZ,wBAPY;AAXN,GAAD;;ACtBT;;;;;;;;ACAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/** MatAccordion's toggle positions. */\nexport type MatAccordionTogglePosition = 'before' | 'after';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** The position of the expansion indicator. */\n  togglePosition: MatAccordionTogglePosition;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {distinctUntilChanged, filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordionBase, MatAccordionTogglePosition, MAT_ACCORDION} from './accordion-base';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  styleUrls: ['expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: 'expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n  private _document: Document;\n  private _hideToggle = false;\n  private _togglePosition: MatAccordionTogglePosition;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n\n  /** The position of the expansion indicator. */\n  @Input()\n  get togglePosition(): MatAccordionTogglePosition {\n    return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n  }\n  set togglePosition(value: MatAccordionTogglePosition) {\n    this._togglePosition = value;\n  }\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return this.expanded && this.accordion.displayMode === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  /** Toggles the expanded state of the expansion panel. */\n  toggle(): void {\n    this.expanded = !this.expanded;\n  }\n\n  /** Sets the expanded state of the expansion panel to false. */\n  close(): void {\n    this.expanded = false;\n  }\n\n  /** Sets the expanded state of the expansion panel to true. */\n  open(): void {\n    this.expanded = true;\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n\n  static ngAcceptInputType_hideToggle: BooleanInput;\n  static ngAcceptInputType_expanded: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n/**\n * Actions of a `<mat-expansion-panel>`.\n */\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, hasModifierKey, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {EMPTY, merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {MatAccordionTogglePosition} from './accordion-base';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n\n/**\n * Header element of a `<mat-expansion-panel>`.\n */\n@Component({\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['expansion-panel-header.css'],\n  templateUrl: 'expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header mat-focus-indicator',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[style.height]': '_getHeaderHeight()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n  },\n})\nexport class MatExpansionPanelHeader implements AfterViewInit, OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!(changes['hideToggle'] || changes['togglePosition']))) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => {\n                  return !!(\n                    changes['hideToggle'] ||\n                    changes['disabled'] ||\n                    changes['togglePosition']);\n                  })))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    if (!this.disabled) {\n      this.panel.toggle();\n    }\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets the toggle position for the header. */\n  _getTogglePosition(): MatAccordionTogglePosition {\n    return this.panel.togglePosition;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /**\n   * Gets the current height of the header. Null if no custom height has been\n   * specified, and if the default height from the stylesheet should be used.\n   */\n  _getHeaderHeight(): string|null {\n    const isExpanded = this._isExpanded();\n    if (isExpanded && this.expandedHeight) {\n      return this.expandedHeight;\n    } else if (!isExpanded && this.collapsedHeight) {\n      return this.collapsedHeight;\n    }\n    return null;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions) {\n    this._focusMonitor.focusVia(this._element, origin, options);\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._element).subscribe(origin => {\n      if (origin && this.panel.accordion) {\n        this.panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * Description element of a `<mat-expansion-panel-header>`.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * Title element of a `<mat-expansion-panel-header>`.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {startWith} from 'rxjs/operators';\nimport {\n  MAT_ACCORDION,\n  MatAccordionBase,\n  MatAccordionDisplayMode,\n  MatAccordionTogglePosition\n} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion',\n    // Class binding which is only used by the test harness as there is no other\n    // way for the harness to detect if multiple panel support is enabled.\n    '[class.mat-accordion-multi]': 'this.multi',\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  /** Headers belonging to this accordion. */\n  private _ownHeaders = new QueryList<MatExpansionPanelHeader>();\n\n  /** All headers inside the accordion. Includes headers inside nested accordions. */\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  /** The position of the expansion indicator. */\n  @Input() togglePosition: MatAccordionTogglePosition = 'after';\n\n  ngAfterContentInit() {\n    this._headers.changes\n      .pipe(startWith(this._headers))\n      .subscribe((headers: QueryList<MatExpansionPanelHeader>) => {\n        this._ownHeaders.reset(headers.filter(header => header.panel.accordion === this));\n        this._ownHeaders.notifyOnChanges();\n      });\n\n    this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap().withHomeAndEnd();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    this._keyManager.onKeydown(event);\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n\n  static ngAcceptInputType_hideToggle: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './expansion-module';\nexport * from './accordion';\nexport * from './accordion-base';\nexport * from './expansion-panel';\nexport * from './expansion-panel-header';\nexport * from './expansion-panel-content';\nexport * from './expansion-animations';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}