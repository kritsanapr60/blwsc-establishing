{"ast":null,"code":"import _classCallCheck from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { NG_VALUE_ACCESSOR } from \"@angular/forms\";\nimport { Directive, ElementRef, EventEmitter, Input, NgZone, Output, forwardRef } from '@angular/core';\nimport FroalaEditor from 'froala-editor';\nimport * as i0 from \"@angular/core\";\nexport var FroalaEditorDirective = /*#__PURE__*/function () {\n  function FroalaEditorDirective(el, zone) {\n    _classCallCheck(this, FroalaEditorDirective);\n\n    this.zone = zone; // editor options\n\n    this._opts = {\n      immediateAngularModelUpdate: false,\n      angularIgnoreAttrs: null\n    };\n    this.SPECIAL_TAGS = ['img', 'button', 'input', 'a'];\n    this.INNER_HTML_ATTR = 'innerHTML';\n    this._hasSpecialTag = false;\n    this._editorInitialized = false;\n    this._oldModel = null; // Begin ControlValueAccesor methods.\n\n    this.onChange = function (_) {};\n\n    this.onTouched = function () {}; // froalaModel directive as output: update model if editor contentChanged\n\n\n    this.froalaModelChange = new EventEmitter(); // froalaInit directive as output: send manual editor initialization\n\n    this.froalaInit = new EventEmitter();\n    var element = el.nativeElement; // check if the element is a special tag\n\n    if (this.SPECIAL_TAGS.indexOf(element.tagName.toLowerCase()) != -1) {\n      this._hasSpecialTag = true;\n    }\n\n    this._element = element;\n    this.zone = zone;\n  } // Form model content changed.\n\n\n  _createClass(FroalaEditorDirective, [{\n    key: \"writeValue\",\n    value: function writeValue(content) {\n      this.updateEditor(content);\n    }\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.onChange = fn;\n    }\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouched = fn;\n    } // End ControlValueAccesor methods.\n    // froalaEditor directive as input: store the editor options\n\n  }, {\n    key: \"clone\",\n    // TODO: replace clone method with better possible alternate \n    value: function clone(item) {\n      var me = this;\n\n      if (!item) {\n        return item;\n      } // null, undefined values check\n\n\n      var types = [Number, String, Boolean],\n          result; // normalizing primitives if someone did new String('aaa'), or new Number('444');\n\n      types.forEach(function (type) {\n        if (item instanceof type) {\n          result = type(item);\n        }\n      });\n\n      if (typeof result == \"undefined\") {\n        if (Object.prototype.toString.call(item) === \"[object Array]\") {\n          result = [];\n          item.forEach(function (child, index, array) {\n            result[index] = me.clone(child);\n          });\n        } else if (typeof item == \"object\") {\n          // testing that this is DOM\n          if (item.nodeType && typeof item.cloneNode == \"function\") {\n            result = item.cloneNode(true);\n          } else if (!item.prototype) {\n            // check that this is a literal\n            if (item instanceof Date) {\n              result = new Date(item);\n            } else {\n              // it is an object literal\n              result = {};\n\n              for (var i in item) {\n                result[i] = me.clone(item[i]);\n              }\n            }\n          } else {\n            if (false && item.constructor) {\n              result = new item.constructor();\n            } else {\n              result = item;\n            }\n          }\n        } else {\n          result = item;\n        }\n      }\n\n      return result;\n    } // froalaModel directive as input: store initial editor content\n\n  }, {\n    key: \"updateEditor\",\n    // Update editor with model contents.\n    value: function updateEditor(content) {\n      if (JSON.stringify(this._oldModel) == JSON.stringify(content)) {\n        return;\n      }\n\n      if (!this._hasSpecialTag) {\n        this._oldModel = content;\n      } else {\n        this._model = content;\n      }\n\n      if (this._editorInitialized) {\n        if (!this._hasSpecialTag) {\n          this._editor.html.set(content);\n        } else {\n          this.setContent();\n        }\n      } else {\n        if (!this._hasSpecialTag) {\n          this._element.innerHTML = content || '';\n        } else {\n          this.setContent();\n        }\n      }\n    } // update model if editor contentChanged\n\n  }, {\n    key: \"updateModel\",\n    value: function updateModel() {\n      var _this = this;\n\n      this.zone.run(function () {\n        var modelContent = null;\n\n        if (_this._hasSpecialTag) {\n          var attributeNodes = _this._element.attributes;\n          var attrs = {};\n\n          for (var i = 0; i < attributeNodes.length; i++) {\n            var attrName = attributeNodes[i].name;\n\n            if (_this._opts.angularIgnoreAttrs && _this._opts.angularIgnoreAttrs.indexOf(attrName) != -1) {\n              continue;\n            }\n\n            attrs[attrName] = attributeNodes[i].value;\n          }\n\n          if (_this._element.innerHTML) {\n            attrs[_this.INNER_HTML_ATTR] = _this._element.innerHTML;\n          }\n\n          modelContent = attrs;\n        } else {\n          var returnedHtml = _this._editor.html.get();\n\n          if (typeof returnedHtml === 'string') {\n            modelContent = returnedHtml;\n          }\n        }\n\n        if (_this._oldModel !== modelContent) {\n          _this._oldModel = modelContent; // Update froalaModel.\n\n          _this.froalaModelChange.emit(modelContent); // Update form model.\n\n\n          _this.onChange(modelContent);\n        }\n      });\n    }\n  }, {\n    key: \"registerEvent\",\n    value: function registerEvent(eventName, callback) {\n      if (!eventName || !callback) {\n        return;\n      }\n\n      if (!this._opts.events) {\n        this._opts.events = {};\n      }\n\n      this._opts.events[eventName] = callback;\n    }\n  }, {\n    key: \"initListeners\",\n    value: function initListeners() {\n      var self = this; // Check if we have events on the editor.\n\n      if (this._editor.events) {\n        // bind contentChange and keyup event to froalaModel\n        this._editor.events.on('contentChanged', function () {\n          self.updateModel();\n        });\n\n        this._editor.events.on('mousedown', function () {\n          setTimeout(function () {\n            self.onTouched();\n          }, 0);\n        });\n\n        if (this._opts.immediateAngularModelUpdate) {\n          this._editor.events.on('keyup', function () {\n            setTimeout(function () {\n              self.updateModel();\n            }, 0);\n          });\n        }\n      }\n\n      this._editorInitialized = true;\n    }\n  }, {\n    key: \"createEditor\",\n    value: function createEditor() {\n      var _this2 = this;\n\n      if (this._editorInitialized) {\n        return;\n      }\n\n      this.setContent(true); // init editor\n\n      this.zone.runOutsideAngular(function () {\n        // Add listeners on initialized event.\n        if (!_this2._opts.events) _this2._opts.events = {}; // Register initialized event.\n\n        _this2.registerEvent('initialized', _this2._opts.events && _this2._opts.events.initialized);\n\n        var existingInitCallback = _this2._opts.events.initialized; // Default initialized event.\n\n        if (!_this2._opts.events.initialized || !_this2._opts.events.initialized.overridden) {\n          _this2._opts.events.initialized = function () {\n            _this2.initListeners();\n\n            existingInitCallback && existingInitCallback.call(_this2._editor, _this2);\n          };\n\n          _this2._opts.events.initialized.overridden = true;\n        } // Initialize the Froala Editor.\n\n\n        _this2._editor = new FroalaEditor(_this2._element, _this2._opts);\n      });\n    }\n  }, {\n    key: \"setHtml\",\n    value: function setHtml() {\n      this._editor.html.set(this._model || \"\"); // This will reset the undo stack everytime the model changes externally. Can we fix this?\n\n\n      this._editor.undo.reset();\n\n      this._editor.undo.saveStep();\n    }\n  }, {\n    key: \"setContent\",\n    value: function setContent() {\n      var firstTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var self = this; // Set initial content\n\n      if (this._model || this._model == '') {\n        this._oldModel = this._model;\n\n        if (this._hasSpecialTag) {\n          var tags = this._model; // add tags on element\n\n          if (tags) {\n            for (var attr in tags) {\n              if (tags.hasOwnProperty(attr) && attr != this.INNER_HTML_ATTR) {\n                this._element.setAttribute(attr, tags[attr]);\n              }\n            }\n\n            if (tags.hasOwnProperty(this.INNER_HTML_ATTR)) {\n              this._element.innerHTML = tags[this.INNER_HTML_ATTR];\n            }\n          }\n        } else {\n          if (firstTime) {\n            this.registerEvent('initialized', function () {\n              self.setHtml();\n            });\n          } else {\n            self.setHtml();\n          }\n        }\n      }\n    }\n  }, {\n    key: \"destroyEditor\",\n    value: function destroyEditor() {\n      if (this._editorInitialized) {\n        this._editor.destroy();\n\n        this._editorInitialized = false;\n      }\n    }\n  }, {\n    key: \"getEditor\",\n    value: function getEditor() {\n      if (this._element) {\n        return this._editor;\n      }\n\n      return null;\n    } // send manual editor initialization\n\n  }, {\n    key: \"generateManualController\",\n    value: function generateManualController() {\n      var controls = {\n        initialize: this.createEditor.bind(this),\n        destroy: this.destroyEditor.bind(this),\n        getEditor: this.getEditor.bind(this)\n      };\n      this.froalaInit.emit(controls);\n    } // TODO not sure if ngOnInit is executed after @inputs\n\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      // check if output froalaInit is present. Maybe observers is private and should not be used?? TODO how to better test that an output directive is present.\n      if (!this.froalaInit.observers.length) {\n        this.createEditor();\n      } else {\n        this.generateManualController();\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.destroyEditor();\n    }\n  }, {\n    key: \"froalaEditor\",\n    set: function set(opts) {\n      this._opts = this.clone(opts || this._opts);\n      this._opts = Object.assign({}, this._opts);\n    }\n  }, {\n    key: \"froalaModel\",\n    set: function set(content) {\n      this.updateEditor(content);\n    }\n  }]);\n\n  return FroalaEditorDirective;\n}();\n\nFroalaEditorDirective.ɵfac = function FroalaEditorDirective_Factory(t) {\n  return new (t || FroalaEditorDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nFroalaEditorDirective.ɵdir = i0.ɵɵdefineDirective({\n  type: FroalaEditorDirective,\n  selectors: [[\"\", \"froalaEditor\", \"\"]],\n  inputs: {\n    froalaEditor: \"froalaEditor\",\n    froalaModel: \"froalaModel\"\n  },\n  outputs: {\n    froalaModelChange: \"froalaModelChange\",\n    froalaInit: \"froalaInit\"\n  },\n  exportAs: [\"froalaEditor\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () {\n      return FroalaEditorDirective;\n    }),\n    multi: true\n  }])]\n});\n/*@__PURE__*/\n\n(function () {\n  i0.ɵsetClassMetadata(FroalaEditorDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[froalaEditor]',\n      exportAs: 'froalaEditor',\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(function () {\n          return FroalaEditorDirective;\n        }),\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    froalaEditor: [{\n      type: Input\n    }],\n    froalaModel: [{\n      type: Input\n    }],\n    froalaModelChange: [{\n      type: Output\n    }],\n    froalaInit: [{\n      type: Output\n    }]\n  });\n})();","map":{"version":3,"sources":["../../.tmp/editor/editor.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\nimport { Directive, ElementRef, EventEmitter, Input, NgZone, Output, forwardRef } from '@angular/core';\n\nimport FroalaEditor from 'froala-editor';\n\n@Directive({\n  selector: '[froalaEditor]',\n  exportAs: 'froalaEditor',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR, useExisting:\n      forwardRef(() => FroalaEditorDirective),\n    multi: true\n  }]\n})\nexport class FroalaEditorDirective implements ControlValueAccessor {\n\n  // editor options\n  private _opts: any = {\n    immediateAngularModelUpdate: false,\n    angularIgnoreAttrs: null\n  };\n\n  private _element: any;\n\n  private SPECIAL_TAGS: string[] = ['img', 'button', 'input', 'a'];\n  private INNER_HTML_ATTR: string = 'innerHTML';\n  private _hasSpecialTag: boolean = false;\n\n  // editor element\n  private _editor: any;\n\n  // initial editor content\n  private _model: string;\n\n  private _editorInitialized: boolean = false;\n\n  private _oldModel: string = null;\n\n  constructor(el: ElementRef, private zone: NgZone) {\n\n    let element: any = el.nativeElement;\n\n    // check if the element is a special tag\n    if (this.SPECIAL_TAGS.indexOf(element.tagName.toLowerCase()) != -1) {\n      this._hasSpecialTag = true;\n    }\n    this._element = element;\n\n    this.zone = zone;\n  }\n\n  // Begin ControlValueAccesor methods.\n  onChange = (_) => { };\n  onTouched = () => { };\n\n  // Form model content changed.\n  writeValue(content: any): void {\n    this.updateEditor(content);\n  }\n\n  registerOnChange(fn: (_: any) => void): void { this.onChange = fn; }\n  registerOnTouched(fn: () => void): void { this.onTouched = fn; }\n  // End ControlValueAccesor methods.\n\n  // froalaEditor directive as input: store the editor options\n  @Input() set froalaEditor(opts: any) {\n    this._opts = this.clone(  opts || this._opts);\n    this._opts =  {...this._opts};\n  }\n\n   // TODO: replace clone method with better possible alternate \n  private clone(item) {\n  \tconst me = this;  \n      if (!item) { return item; } // null, undefined values check\n\n      let types = [ Number, String, Boolean ], \n          result;\n\n      // normalizing primitives if someone did new String('aaa'), or new Number('444');\n      types.forEach(function(type) {\n          if (item instanceof type) {\n              result = type( item );\n          }\n      });\n\n      if (typeof result == \"undefined\") {\n          if (Object.prototype.toString.call( item ) === \"[object Array]\") {\n              result = [];\n              item.forEach(function(child, index, array) { \n                  result[index] = me.clone( child );\n              });\n          } else if (typeof item == \"object\") {\n              // testing that this is DOM\n              if (item.nodeType && typeof item.cloneNode == \"function\") {\n                  result = item.cloneNode( true );    \n              } else if (!item.prototype) { // check that this is a literal\n                  if (item instanceof Date) {\n                      result = new Date(item);\n                  } else {\n                      // it is an object literal\n                      result = {};\n                      for (var i in item) {\n                          result[i] = me.clone( item[i] );\n                      }\n                  }\n              } else {\n                  if (false && item.constructor) {\n                      result = new item.constructor();\n                  } else {\n                      result = item;\n                  }\n              }\n          } else {\n              result = item;\n          }\n      }\n      return result;\n  }\n  // froalaModel directive as input: store initial editor content\n  @Input() set froalaModel(content: any) {\n    this.updateEditor(content);\n  }\n\n  // Update editor with model contents.\n  private updateEditor(content: any) {\n    if (JSON.stringify(this._oldModel) == JSON.stringify(content)) {\n      return;\n    }\n\n    if (!this._hasSpecialTag) {\n      this._oldModel = content;\n    }\n    else {\n      this._model = content;\n    }\n\n    if (this._editorInitialized) {\n      if (!this._hasSpecialTag) {\n        this._editor.html.set(content);\n      }\n      else {\n        this.setContent();\n      }\n    }\n    else {\n      if (!this._hasSpecialTag) {\n        this._element.innerHTML = content || '';\n      }\n      else {\n        this.setContent();\n      }\n    }\n  }\n\n  // froalaModel directive as output: update model if editor contentChanged\n  @Output() froalaModelChange: EventEmitter<any> = new EventEmitter<any>();\n\n  // froalaInit directive as output: send manual editor initialization\n  @Output() froalaInit: EventEmitter<Object> = new EventEmitter<Object>();\n\n  // update model if editor contentChanged\n  private updateModel() {\n    this.zone.run(() => {\n\n      let modelContent: any = null;\n\n      if (this._hasSpecialTag) {\n\n        let attributeNodes = this._element.attributes;\n        let attrs = {};\n\n        for (let i = 0; i < attributeNodes.length; i++) {\n\n          let attrName = attributeNodes[i].name;\n          if (this._opts.angularIgnoreAttrs && this._opts.angularIgnoreAttrs.indexOf(attrName) != -1) {\n            continue;\n          }\n\n          attrs[attrName] = attributeNodes[i].value;\n        }\n\n        if (this._element.innerHTML) {\n          attrs[this.INNER_HTML_ATTR] = this._element.innerHTML;\n        }\n\n        modelContent = attrs;\n      } else {\n\n        let returnedHtml: any = this._editor.html.get();\n        if (typeof returnedHtml === 'string') {\n          modelContent = returnedHtml;\n        }\n      }\n      if (this._oldModel !== modelContent) {\n        this._oldModel = modelContent;\n\n        // Update froalaModel.\n        this.froalaModelChange.emit(modelContent);\n\n        // Update form model.\n        this.onChange(modelContent);\n      }\n\n    })\n  }\n\n  private registerEvent(eventName, callback) {\n\n    if (!eventName || !callback) {\n      return;\n    }\n\n    if (!this._opts.events) {\n      this._opts.events = {};\n    }\n\n    this._opts.events[eventName] = callback;\n  }\n\n  private initListeners() {\n    let self = this;\n    // Check if we have events on the editor.\n    if (this._editor.events) {\n      // bind contentChange and keyup event to froalaModel\n      this._editor.events.on('contentChanged', function () {\n        self.updateModel();\n      });\n      this._editor.events.on('mousedown', function () {\n        setTimeout(function () {\n          self.onTouched();\n        }, 0);\n      });\n\n      if (this._opts.immediateAngularModelUpdate) {\n        this._editor.events.on('keyup', function () {\n          setTimeout(function () {\n            self.updateModel();\n          }, 0);\n        });\n      }\n    }\n\n    this._editorInitialized = true;\n  }\n\n  private createEditor() {\n    if (this._editorInitialized) {\n      return;\n    }\n\n    this.setContent(true);\n\n    // init editor\n    this.zone.runOutsideAngular(() => {\n      // Add listeners on initialized event.\n      if (!this._opts.events) this._opts.events = {}\n\n      // Register initialized event.\n      this.registerEvent('initialized', this._opts.events && this._opts.events.initialized);\n      const existingInitCallback = this._opts.events.initialized;\n      // Default initialized event.\n      if (!this._opts.events.initialized || !this._opts.events.initialized.overridden) {\n        this._opts.events.initialized = () => {\n          this.initListeners();\n          existingInitCallback && existingInitCallback.call(this._editor, this);\n        };\n        this._opts.events.initialized.overridden = true;\n      }\n\n      // Initialize the Froala Editor.\n      this._editor = new FroalaEditor(\n        this._element,\n        this._opts\n      );\n    });\n  }\n\n  private setHtml() {\n    this._editor.html.set(this._model || \"\");\n\n    // This will reset the undo stack everytime the model changes externally. Can we fix this?\n    this._editor.undo.reset();\n    this._editor.undo.saveStep();\n  }\n\n  private setContent(firstTime = false) {\n    let self = this;\n\n    // Set initial content\n    if (this._model || this._model == '') {\n      this._oldModel = this._model;\n      if (this._hasSpecialTag) {\n\n        let tags: Object = this._model;\n\n        // add tags on element\n        if (tags) {\n\n          for (let attr in tags) {\n            if (tags.hasOwnProperty(attr) && attr != this.INNER_HTML_ATTR) {\n              this._element.setAttribute(attr, tags[attr]);\n            }\n          }\n\n          if (tags.hasOwnProperty(this.INNER_HTML_ATTR)) {\n            this._element.innerHTML = tags[this.INNER_HTML_ATTR];\n          }\n        }\n      } else {\n        if (firstTime) {\n          this.registerEvent('initialized', function () {\n            self.setHtml();\n          });\n        } else {\n          self.setHtml();\n        }\n      }\n    }\n  }\n\n  private destroyEditor() {\n    if (this._editorInitialized) {\n      this._editor.destroy();\n      this._editorInitialized = false;\n    }\n  }\n\n  private getEditor() {\n    if (this._element) {\n      return this._editor;\n    }\n\n    return null;\n  }\n\n  // send manual editor initialization\n  private generateManualController() {\n    let controls = {\n      initialize: this.createEditor.bind(this),\n      destroy: this.destroyEditor.bind(this),\n      getEditor: this.getEditor.bind(this),\n    };\n    this.froalaInit.emit(controls);\n  }\n\n  // TODO not sure if ngOnInit is executed after @inputs\n  ngAfterViewInit() {\n    // check if output froalaInit is present. Maybe observers is private and should not be used?? TODO how to better test that an output directive is present.\n    if (!this.froalaInit.observers.length) {\n      this.createEditor();\n    } else {\n      this.generateManualController();\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyEditor();\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}