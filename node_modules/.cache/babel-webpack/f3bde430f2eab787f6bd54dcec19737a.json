{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __awaiter } from 'tslib';\nimport { EventEmitter, Component, forwardRef, ElementRef, NgZone, Input, Output, NgModule } from '@angular/core';\nimport EditorWatchdog from '@ckeditor/ckeditor5-watchdog/src/editorwatchdog';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\nvar ɵ0 = function ɵ0(val, index) {\n  return ('0' + index.toString(16)).slice(-2);\n}; // A copy of @ckeditor/ckeditor5-utils/src/uid.js\n// A hash table of hex numbers to avoid using toString() in uid() which is costly.\n// [ '00', '01', '02', ..., 'fe', 'ff' ]\n\n\nvar HEX_NUMBERS = new Array(256).fill(0).map(ɵ0);\n/**\n * Returns a unique id. The id starts with an \"e\" character and a randomly generated string of\n * 32 alphanumeric characters.\n *\n * **Note**: The characters the unique id is built from correspond to the hex number notation\n * (from \"0\" to \"9\", from \"a\" to \"f\"). In other words, each id corresponds to an \"e\" followed\n * by 16 8-bit numbers next to each other.\n *\n * @returns An unique id string.\n */\n\nfunction uid() {\n  // Let's create some positive random 32bit integers first.\n  //\n  // 1. Math.random() is a float between 0 and 1.\n  // 2. 0x100000000 is 2^32 = 4294967296.\n  // 3. >>> 0 enforces integer (in JS all numbers are floating point).\n  //\n  // For instance:\n  //\t\tMath.random() * 0x100000000 = 3366450031.853859\n  // but\n  //\t\tMath.random() * 0x100000000 >>> 0 = 3366450031.\n  var r1 = Math.random() * 0x100000000 >>> 0;\n  var r2 = Math.random() * 0x100000000 >>> 0;\n  var r3 = Math.random() * 0x100000000 >>> 0;\n  var r4 = Math.random() * 0x100000000 >>> 0; // Make sure that id does not start with number.\n\n  return 'e' + HEX_NUMBERS[r1 >> 0 & 0xFF] + HEX_NUMBERS[r1 >> 8 & 0xFF] + HEX_NUMBERS[r1 >> 16 & 0xFF] + HEX_NUMBERS[r1 >> 24 & 0xFF] + HEX_NUMBERS[r2 >> 0 & 0xFF] + HEX_NUMBERS[r2 >> 8 & 0xFF] + HEX_NUMBERS[r2 >> 16 & 0xFF] + HEX_NUMBERS[r2 >> 24 & 0xFF] + HEX_NUMBERS[r3 >> 0 & 0xFF] + HEX_NUMBERS[r3 >> 8 & 0xFF] + HEX_NUMBERS[r3 >> 16 & 0xFF] + HEX_NUMBERS[r3 >> 24 & 0xFF] + HEX_NUMBERS[r4 >> 0 & 0xFF] + HEX_NUMBERS[r4 >> 8 & 0xFF] + HEX_NUMBERS[r4 >> 16 & 0xFF] + HEX_NUMBERS[r4 >> 24 & 0xFF];\n}\n/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n\nvar CKEditorComponent = /*#__PURE__*/function () {\n  function CKEditorComponent(elementRef, ngZone) {\n    _classCallCheck(this, CKEditorComponent);\n\n    /**\n     * The configuration of the editor.\n     * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editorconfig-EditorConfig.html\n     * to learn more.\n     */\n    this.config = {};\n    /**\n     * The initial data of the editor. Useful when not using the ngModel.\n     * See https://angular.io/api/forms/NgModel to learn more.\n     */\n\n    this.data = '';\n    /**\n     * Tag name of the editor component.\n     *\n     * The default tag is 'div'.\n     */\n\n    this.tagName = 'div';\n    /**\n     * Fires when the editor is ready. It corresponds with the `editor#ready`\n     * https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#event-ready\n     * event.\n     */\n\n    this.ready = new EventEmitter();\n    /**\n     * Fires when the content of the editor has changed. It corresponds with the `editor.model.document#change`\n     * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_model_document-Document.html#event-change\n     * event.\n     */\n\n    this.change = new EventEmitter();\n    /**\n     * Fires when the editing view of the editor is blurred. It corresponds with the `editor.editing.view.document#blur`\n     * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:blur\n     * event.\n     */\n\n    this.blur = new EventEmitter();\n    /**\n     * Fires when the editing view of the editor is focused. It corresponds with the `editor.editing.view.document#focus`\n     * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:focus\n     * event.\n     */\n\n    this.focus = new EventEmitter();\n    /**\n     * Fires when the editor component crashes.\n     */\n\n    this.error = new EventEmitter();\n    /**\n     * If the component is read–only before the editor instance is created, it remembers that state,\n     * so the editor can become read–only once it is ready.\n     */\n\n    this.initiallyDisabled = false;\n    /**\n     * A lock flag preventing from calling the `cvaOnChange()` during setting editor data.\n     */\n\n    this.isEditorSettingData = false;\n    this.id = uid();\n    this.ngZone = ngZone;\n    this.elementRef = elementRef;\n  }\n  /**\n   * When set `true`, the editor becomes read-only.\n   * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#member-isReadOnly\n   * to learn more.\n   */\n\n\n  _createClass(CKEditorComponent, [{\n    key: \"ngAfterViewInit\",\n    // Implementing the AfterViewInit interface.\n    value: function ngAfterViewInit() {\n      this.attachToWatchdog();\n    } // Implementing the OnDestroy interface.\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.watchdog) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 3;\n                return this.watchdog.remove(this.id);\n\n              case 3:\n                _context.next = 9;\n                break;\n\n              case 5:\n                if (!(this.editorWatchdog && this.editorWatchdog.editor)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 8;\n                return this.editorWatchdog.destroy();\n\n              case 8:\n                this.editorWatchdog = undefined;\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    } // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      // This method is called with the `null` value when the form resets.\n      // A component's responsibility is to restore to the initial state.\n      if (value === null) {\n        value = '';\n      } // If already initialized.\n\n\n      if (this.editorInstance) {\n        // The lock mechanism prevents from calling `cvaOnChange()` during changing\n        // the editor state. See #139\n        this.isEditorSettingData = true;\n        this.editorInstance.setData(value);\n        this.isEditorSettingData = false;\n      } // If not, wait for it to be ready; store the data.\n      else {\n          this.data = value; // If the editor element is already available, then update its content.\n          // If the ngModel is used then the editor element should be updated directly here.\n\n          if (this.editorElement) {\n            this.editorElement.innerHTML = this.data;\n          }\n        }\n    } // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(callback) {\n      this.cvaOnChange = callback;\n    } // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(callback) {\n      this.cvaOnTouched = callback;\n    } // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      // If already initialized.\n      if (this.editorInstance) {\n        this.editorInstance.isReadOnly = isDisabled;\n      } // Store the state anyway to use it once the editor is created.\n\n\n      this.initiallyDisabled = isDisabled;\n    }\n    /**\n     * Creates the editor instance, sets initial editor data, then integrates\n     * the editor with the Angular component. This method does not use the `editor.setData()`\n     * because of the issue in the collaboration mode (#6).\n     */\n\n  }, {\n    key: \"attachToWatchdog\",\n    value: function attachToWatchdog() {\n      var _this = this;\n\n      var creator = function creator(element, config) {\n        return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n          var _this2 = this;\n\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  return _context3.abrupt(\"return\", this.ngZone.runOutsideAngular(function () {\n                    return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                      var _this3 = this;\n\n                      var editor;\n                      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                        while (1) {\n                          switch (_context2.prev = _context2.next) {\n                            case 0:\n                              this.elementRef.nativeElement.appendChild(element);\n                              _context2.next = 3;\n                              return this.editor.create(element, config);\n\n                            case 3:\n                              editor = _context2.sent;\n\n                              if (this.initiallyDisabled) {\n                                editor.isReadOnly = this.initiallyDisabled;\n                              }\n\n                              this.ngZone.run(function () {\n                                _this3.ready.emit(editor);\n                              });\n                              this.setUpEditorEvents(editor);\n                              return _context2.abrupt(\"return\", editor);\n\n                            case 8:\n                            case \"end\":\n                              return _context2.stop();\n                          }\n                        }\n                      }, _callee2, this);\n                    }));\n                  }));\n\n                case 1:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, this);\n        }));\n      };\n\n      var destructor = function destructor(editor) {\n        return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.next = 2;\n                  return editor.destroy();\n\n                case 2:\n                  this.elementRef.nativeElement.removeChild(this.editorElement);\n\n                case 3:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4, this);\n        }));\n      };\n\n      var emitError = function emitError() {\n        _this.ngZone.run(function () {\n          _this.error.emit();\n        });\n      };\n\n      var element = document.createElement(this.tagName);\n      var config = this.getConfig();\n      this.editorElement = element; // Based on the presence of the watchdog decide how to initialize the editor.\n\n      if (this.watchdog) {\n        // When the context watchdog is passed add the new item to it based on the passed configuration.\n        this.watchdog.add({\n          id: this.id,\n          type: 'editor',\n          creator: creator,\n          destructor: destructor,\n          sourceElementOrData: element,\n          config: config\n        });\n        this.watchdog.on('itemError', function (_, _ref) {\n          var itemId = _ref.itemId;\n\n          if (itemId === _this.id) {\n            emitError();\n          }\n        });\n      } else {\n        // In the other case create the watchdog by hand to keep the editor running.\n        var editorWatchdog = new EditorWatchdog(this.editor);\n        editorWatchdog.setCreator(creator);\n        editorWatchdog.setDestructor(destructor);\n        editorWatchdog.on('error', emitError);\n        this.editorWatchdog = editorWatchdog;\n        this.editorWatchdog.create(element, config);\n      }\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      if (this.data && this.config.initialData) {\n        throw new Error('Editor data should be provided either using `config.initialData` or `data` properties.');\n      } // Merge two possible ways of providing data into the `config.initialData` field.\n\n\n      return Object.assign(Object.assign({}, this.config), {\n        initialData: this.config.initialData || this.data || ''\n      });\n    }\n    /**\n     * Integrates the editor with the component by attaching related event listeners.\n     */\n\n  }, {\n    key: \"setUpEditorEvents\",\n    value: function setUpEditorEvents(editor) {\n      var _this4 = this;\n\n      var modelDocument = editor.model.document;\n      var viewDocument = editor.editing.view.document;\n      modelDocument.on('change:data', function (evt) {\n        _this4.ngZone.run(function () {\n          if (_this4.cvaOnChange && !_this4.isEditorSettingData) {\n            var data = editor.getData();\n\n            _this4.cvaOnChange(data);\n          }\n\n          _this4.change.emit({\n            event: evt,\n            editor: editor\n          });\n        });\n      });\n      viewDocument.on('focus', function (evt) {\n        _this4.ngZone.run(function () {\n          _this4.focus.emit({\n            event: evt,\n            editor: editor\n          });\n        });\n      });\n      viewDocument.on('blur', function (evt) {\n        _this4.ngZone.run(function () {\n          if (_this4.cvaOnTouched) {\n            _this4.cvaOnTouched();\n          }\n\n          _this4.blur.emit({\n            event: evt,\n            editor: editor\n          });\n        });\n      });\n    }\n  }, {\n    key: \"disabled\",\n    set: function set(isDisabled) {\n      this.setDisabledState(isDisabled);\n    },\n    get: function get() {\n      if (this.editorInstance) {\n        return this.editorInstance.isReadOnly;\n      }\n\n      return this.initiallyDisabled;\n    }\n    /**\n     * The instance of the editor created by this component.\n     */\n\n  }, {\n    key: \"editorInstance\",\n    get: function get() {\n      var editorWatchdog = this.editorWatchdog;\n\n      if (this.watchdog) {\n        // Temporarily use the `_watchdogs` internal map as the `getItem()` method throws\n        // an error when the item is not registered yet.\n        // See https://github.com/ckeditor/ckeditor5-angular/issues/177.\n        editorWatchdog = this.watchdog._watchdogs.get(this.id);\n      }\n\n      if (editorWatchdog) {\n        return editorWatchdog.editor;\n      }\n\n      return null;\n    }\n  }]);\n\n  return CKEditorComponent;\n}();\n\nCKEditorComponent.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'ckeditor',\n    template: '<ng-template></ng-template>',\n    // Integration with @angular/forms.\n    providers: [{\n      provide: NG_VALUE_ACCESSOR,\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      useExisting: forwardRef(function () {\n        return CKEditorComponent;\n      }),\n      multi: true\n    }]\n  }]\n}];\n\nCKEditorComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: NgZone\n  }];\n};\n\nCKEditorComponent.propDecorators = {\n  editor: [{\n    type: Input\n  }],\n  config: [{\n    type: Input\n  }],\n  data: [{\n    type: Input\n  }],\n  tagName: [{\n    type: Input\n  }],\n  watchdog: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  ready: [{\n    type: Output\n  }],\n  change: [{\n    type: Output\n  }],\n  blur: [{\n    type: Output\n  }],\n  focus: [{\n    type: Output\n  }],\n  error: [{\n    type: Output\n  }]\n};\n/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nvar CKEditorModule = function CKEditorModule() {\n  _classCallCheck(this, CKEditorModule);\n};\n\nCKEditorModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [FormsModule, CommonModule],\n    declarations: [CKEditorComponent],\n    exports: [CKEditorComponent]\n  }]\n}];\n/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CKEditorComponent, CKEditorModule };","map":{"version":3,"sources":["../../src/ckeditor/ckeditor.ts","../../src/ckeditor/uid.ts","../../src/ckeditor/ckeditor.component.ts","../../src/ckeditor/ckeditor.module.ts","../../src/ckeditor/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\ntype AnyFunction = ( ...args: any[] ) => any;\n\n/**\n * Basic typings for the CKEditor5 elements.\n */\nexport namespace CKEditor5 {\n\n\t/**\n\t * The CKEditor5 editor config.\n\t */\n\texport interface Config {\n\t\t[ key: string ]: any;\n\t}\n\n\t/**\n\t * The event object passed to CKEditor5 event callbacks.\n\t *\n\t * See https://ckeditor.com/docs/ckeditor5/latest/api/module_utils_eventinfo-EventInfo.html\n\t */\n\texport interface EventInfo<EventName extends string> {\n\t\treadonly name: EventName;\n\t\treadonly path: any[];\n\t\treadonly source: any;\n\t\treturn?: any;\n\n\t\toff(): void;\n\t\tstop(): void;\n\t}\n\n\t/**\n\t * The base Editor class.\n\t *\n\t * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html\n\t */\n\texport interface BaseEditor {\n\t\treadonly commands: any;\n\t\treadonly config: any;\n\t\treadonly conversion: any;\n\t\treadonly data: any;\n\t\treadonly editing: any;\n\t\treadonly keystrokes: any;\n\t\treadonly locale: any;\n\t\treadonly model: any;\n\t\treadonly plugins: any;\n\t\treadonly state: 'initializing' | 'ready' | 'destroyed';\n\n\t\tisReadOnly: boolean;\n\n\t\tdelegate( events: string[] ): any;\n\t\tdestroy(): Promise<void>;\n\t\texecute( commandName: string, ...params: any[] ): any;\n\t\tfire( eventName: string, args?: any ): any;\n\t\tlistenTo( emitter: any, eventName: string, callback: AnyFunction, options?: any ): void;\n\t\toff( eventName: string, callback: AnyFunction ): void;\n\t\ton( eventName: string, callback: AnyFunction, options?: any ): void;\n\t\tonce( eventName: string, callback: AnyFunction, options?: any ): void;\n\t\tstopListening( emitter: any, eventName: string, callback: AnyFunction ): void;\n\t\tt( ...args: any[] ): void;\n\n\t\t[ property: string ]: any;\n\t}\n\n\t/**\n\t * The CKEditor5 DataApi interface.\n\t *\n\t * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_utils_dataapimixin-DataApi.html.\n\t */\n\texport interface DataApi {\n\t\tgetData(): string;\n\t\tsetData( data: string ): void;\n\t}\n\n\t/**\n\t * A CKEditor5 editor that implements the\n\t * [DataApi interface](https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_utils_dataapimixin-DataApi.html).\n\t * E.g. the `ClassicEditor`, `InlineEditor`, etc.\n\t */\n\texport interface Editor extends BaseEditor, DataApi {}\n\n\t/**\n\t * The CKEditor5 editor constructor.\n\t */\n\texport interface EditorConstructor {\n\t\tcreate( sourceElementOrData: HTMLElement | string, config?: Config ): Promise<Editor>;\n\t}\n\n\texport interface Watchdog<T> {\n\t\tsetCreator( creator: ( ...args: any[] ) => Promise<T> ): void;\n\t\tsetDestructor( destructor: ( item: T ) => Promise<void> ): void;\n\t\ton( event: string, callback: ( ...args: any[] ) => any ): void;\n\t\tdestroy(): Promise<void>;\n\t\tcreate( ...args: any[] ): Promise<void>;\n\t}\n\n\texport interface EditorWatchdog extends Watchdog<Editor> {\n\t\teditor: Editor;\n\t}\n\n\texport interface ContextWatchdog extends Watchdog<any> {\n\t\tcontext: any;\n\t\t_watchdogs: Map<string, EditorWatchdog>;\n\t\tadd( items: any ): Promise<void>;\n\t\tremove( items: string | string[] ): Promise<void>;\n\t\tgetItem( itemId: string ): Editor;\n\t\taddItemWatchdog( itemId: string, itemType: string, watchdog: Watchdog<any> ): Promise<void>;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n// A copy of @ckeditor/ckeditor5-utils/src/uid.js\n\n// A hash table of hex numbers to avoid using toString() in uid() which is costly.\n// [ '00', '01', '02', ..., 'fe', 'ff' ]\nconst HEX_NUMBERS = new Array( 256 ).fill( 0 )\n\t.map( ( val, index ) => ( '0' + ( index ).toString( 16 ) ).slice( -2 ) );\n\n/**\n * Returns a unique id. The id starts with an \"e\" character and a randomly generated string of\n * 32 alphanumeric characters.\n *\n * **Note**: The characters the unique id is built from correspond to the hex number notation\n * (from \"0\" to \"9\", from \"a\" to \"f\"). In other words, each id corresponds to an \"e\" followed\n * by 16 8-bit numbers next to each other.\n *\n * @returns An unique id string.\n */\nexport default function uid(): string {\n\t// Let's create some positive random 32bit integers first.\n\t//\n\t// 1. Math.random() is a float between 0 and 1.\n\t// 2. 0x100000000 is 2^32 = 4294967296.\n\t// 3. >>> 0 enforces integer (in JS all numbers are floating point).\n\t//\n\t// For instance:\n\t//\t\tMath.random() * 0x100000000 = 3366450031.853859\n\t// but\n\t//\t\tMath.random() * 0x100000000 >>> 0 = 3366450031.\n\tconst r1 = Math.random() * 0x100000000 >>> 0;\n\tconst r2 = Math.random() * 0x100000000 >>> 0;\n\tconst r3 = Math.random() * 0x100000000 >>> 0;\n\tconst r4 = Math.random() * 0x100000000 >>> 0;\n\n\t// Make sure that id does not start with number.\n\treturn 'e' +\n\t\tHEX_NUMBERS[ r1 >> 0 & 0xFF ] +\n\t\tHEX_NUMBERS[ r1 >> 8 & 0xFF ] +\n\t\tHEX_NUMBERS[ r1 >> 16 & 0xFF ] +\n\t\tHEX_NUMBERS[ r1 >> 24 & 0xFF ] +\n\t\tHEX_NUMBERS[ r2 >> 0 & 0xFF ] +\n\t\tHEX_NUMBERS[ r2 >> 8 & 0xFF ] +\n\t\tHEX_NUMBERS[ r2 >> 16 & 0xFF ] +\n\t\tHEX_NUMBERS[ r2 >> 24 & 0xFF ] +\n\t\tHEX_NUMBERS[ r3 >> 0 & 0xFF ] +\n\t\tHEX_NUMBERS[ r3 >> 8 & 0xFF ] +\n\t\tHEX_NUMBERS[ r3 >> 16 & 0xFF ] +\n\t\tHEX_NUMBERS[ r3 >> 24 & 0xFF ] +\n\t\tHEX_NUMBERS[ r4 >> 0 & 0xFF ] +\n\t\tHEX_NUMBERS[ r4 >> 8 & 0xFF ] +\n\t\tHEX_NUMBERS[ r4 >> 16 & 0xFF ] +\n\t\tHEX_NUMBERS[ r4 >> 24 & 0xFF ];\n}\n","/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport {\n\tComponent,\n\tInput,\n\tOutput,\n\tNgZone,\n\tEventEmitter,\n\tforwardRef,\n\tAfterViewInit, OnDestroy,\n\tElementRef\n} from '@angular/core';\n\nimport EditorWatchdog from '@ckeditor/ckeditor5-watchdog/src/editorwatchdog';\n\nimport uid from './uid';\n\nimport {\n\tControlValueAccessor,\n\tNG_VALUE_ACCESSOR\n} from '@angular/forms';\n\nimport { CKEditor5 } from './ckeditor';\n\nexport interface BlurEvent {\n\tevent: CKEditor5.EventInfo<'blur'>;\n\teditor: CKEditor5.Editor;\n}\n\nexport interface FocusEvent {\n\tevent: CKEditor5.EventInfo<'focus'>;\n\teditor: CKEditor5.Editor;\n}\n\nexport interface ChangeEvent {\n\tevent: CKEditor5.EventInfo<'change:data'>;\n\teditor: CKEditor5.Editor;\n}\n\n@Component( {\n\tselector: 'ckeditor',\n\ttemplate: '<ng-template></ng-template>',\n\n\t// Integration with @angular/forms.\n\tproviders: [\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-use-before-define\n\t\t\tuseExisting: forwardRef( () => CKEditorComponent ),\n\t\t\tmulti: true\n\t\t}\n\t]\n} )\nexport class CKEditorComponent implements AfterViewInit, OnDestroy, ControlValueAccessor {\n\t/**\n\t * The reference to the DOM element created by the component.\n\t */\n\tprivate elementRef!: ElementRef<HTMLElement>;\n\n\t/**\n\t * The constructor of the editor to be used for the instance of the component.\n\t * It can be e.g. the `ClassicEditorBuild`, `InlineEditorBuild` or some custom editor.\n\t */\n\t@Input() public editor?: CKEditor5.EditorConstructor;\n\n\t/**\n\t * The configuration of the editor.\n\t * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editorconfig-EditorConfig.html\n\t * to learn more.\n\t */\n\t@Input() public config: CKEditor5.Config = {};\n\n\t/**\n\t * The initial data of the editor. Useful when not using the ngModel.\n\t * See https://angular.io/api/forms/NgModel to learn more.\n\t */\n\t@Input() public data = '';\n\n\t/**\n\t * Tag name of the editor component.\n\t *\n\t * The default tag is 'div'.\n\t */\n\t@Input() public tagName = 'div';\n\n\t/**\n\t * The context watchdog.\n\t */\n\t@Input() public watchdog?: CKEditor5.ContextWatchdog;\n\n\t/**\n\t * When set `true`, the editor becomes read-only.\n\t * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#member-isReadOnly\n\t * to learn more.\n\t */\n\t@Input() public set disabled( isDisabled: boolean ) {\n\t\tthis.setDisabledState( isDisabled );\n\t}\n\n\tpublic get disabled(): boolean {\n\t\tif ( this.editorInstance ) {\n\t\t\treturn this.editorInstance.isReadOnly;\n\t\t}\n\n\t\treturn this.initiallyDisabled;\n\t}\n\n\t/**\n\t * Fires when the editor is ready. It corresponds with the `editor#ready`\n\t * https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#event-ready\n\t * event.\n\t */\n\t@Output() public ready = new EventEmitter<CKEditor5.Editor>();\n\n\t/**\n\t * Fires when the content of the editor has changed. It corresponds with the `editor.model.document#change`\n\t * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_model_document-Document.html#event-change\n\t * event.\n\t */\n\t@Output() public change: EventEmitter<ChangeEvent> = new EventEmitter<ChangeEvent>();\n\n\t/**\n\t * Fires when the editing view of the editor is blurred. It corresponds with the `editor.editing.view.document#blur`\n\t * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:blur\n\t * event.\n\t */\n\t@Output() public blur: EventEmitter<BlurEvent> = new EventEmitter<BlurEvent>();\n\n\t/**\n\t * Fires when the editing view of the editor is focused. It corresponds with the `editor.editing.view.document#focus`\n\t * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:focus\n\t * event.\n\t */\n\t@Output() public focus: EventEmitter<FocusEvent> = new EventEmitter<FocusEvent>();\n\n\t/**\n\t * Fires when the editor component crashes.\n\t */\n\t@Output() public error: EventEmitter<void> = new EventEmitter<void>();\n\n\t/**\n\t * The instance of the editor created by this component.\n\t */\n\tpublic get editorInstance(): CKEditor5.Editor | null {\n\t\tlet editorWatchdog = this.editorWatchdog;\n\n\t\tif ( this.watchdog ) {\n\t\t\t// Temporarily use the `_watchdogs` internal map as the `getItem()` method throws\n\t\t\t// an error when the item is not registered yet.\n\t\t\t// See https://github.com/ckeditor/ckeditor5-angular/issues/177.\n\t\t\teditorWatchdog = this.watchdog._watchdogs.get( this.id );\n\t\t}\n\n\t\tif ( editorWatchdog ) {\n\t\t\treturn editorWatchdog.editor;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * The editor watchdog. It is created when the context watchdog is not passed to the component.\n\t * It keeps the editor running.\n\t */\n\tprivate editorWatchdog?: CKEditor5.EditorWatchdog;\n\n\t/**\n\t * If the component is read–only before the editor instance is created, it remembers that state,\n\t * so the editor can become read–only once it is ready.\n\t */\n\tprivate initiallyDisabled = false;\n\n\t/**\n\t * An instance of https://angular.io/api/core/NgZone to allow the interaction with the editor\n\t * withing the Angular event loop.\n\t */\n\tprivate ngZone: NgZone;\n\n\t/**\n\t * A callback executed when the content of the editor changes. Part of the\n\t * `ControlValueAccessor` (https://angular.io/api/forms/ControlValueAccessor) interface.\n\t *\n\t * Note: Unset unless the component uses the `ngModel`.\n\t */\n\tprivate cvaOnChange?: ( data: string ) => void;\n\n\t/**\n\t * A callback executed when the editor has been blurred. Part of the\n\t * `ControlValueAccessor` (https://angular.io/api/forms/ControlValueAccessor) interface.\n\t *\n\t * Note: Unset unless the component uses the `ngModel`.\n\t */\n\tprivate cvaOnTouched?: () => void;\n\n\t/**\n\t * Reference to the source element used by the editor.\n\t */\n\tprivate editorElement?: HTMLElement;\n\n\t/**\n\t * A lock flag preventing from calling the `cvaOnChange()` during setting editor data.\n\t */\n\tprivate isEditorSettingData = false;\n\n\tprivate id = uid();\n\n\tpublic constructor( elementRef: ElementRef, ngZone: NgZone ) {\n\t\tthis.ngZone = ngZone;\n\t\tthis.elementRef = elementRef;\n\t}\n\n\t// Implementing the AfterViewInit interface.\n\tpublic ngAfterViewInit(): void {\n\t\tthis.attachToWatchdog();\n\t}\n\n\t// Implementing the OnDestroy interface.\n\tpublic async ngOnDestroy(): Promise<void> {\n\t\tif ( this.watchdog ) {\n\t\t\tawait this.watchdog.remove( this.id );\n\t\t} else if ( this.editorWatchdog && this.editorWatchdog.editor ) {\n\t\t\tawait this.editorWatchdog.destroy();\n\n\t\t\tthis.editorWatchdog = undefined;\n\t\t}\n\t}\n\n\t// Implementing the ControlValueAccessor interface (only when binding to ngModel).\n\tpublic writeValue( value: string | null ): void {\n\t\t// This method is called with the `null` value when the form resets.\n\t\t// A component's responsibility is to restore to the initial state.\n\t\tif ( value === null ) {\n\t\t\tvalue = '';\n\t\t}\n\n\t\t// If already initialized.\n\t\tif ( this.editorInstance ) {\n\t\t\t// The lock mechanism prevents from calling `cvaOnChange()` during changing\n\t\t\t// the editor state. See #139\n\t\t\tthis.isEditorSettingData = true;\n\t\t\tthis.editorInstance.setData( value );\n\t\t\tthis.isEditorSettingData = false;\n\t\t}\n\t\t// If not, wait for it to be ready; store the data.\n\t\telse {\n\t\t\tthis.data = value;\n\n\t\t\t// If the editor element is already available, then update its content.\n\t\t\t// If the ngModel is used then the editor element should be updated directly here.\n\t\t\tif ( this.editorElement ) {\n\t\t\t\tthis.editorElement.innerHTML = this.data;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Implementing the ControlValueAccessor interface (only when binding to ngModel).\n\tpublic registerOnChange( callback: ( data: string ) => void ): void {\n\t\tthis.cvaOnChange = callback;\n\t}\n\n\t// Implementing the ControlValueAccessor interface (only when binding to ngModel).\n\tpublic registerOnTouched( callback: () => void ): void {\n\t\tthis.cvaOnTouched = callback;\n\t}\n\n\t// Implementing the ControlValueAccessor interface (only when binding to ngModel).\n\tpublic setDisabledState( isDisabled: boolean ): void {\n\t\t// If already initialized.\n\t\tif ( this.editorInstance ) {\n\t\t\tthis.editorInstance.isReadOnly = isDisabled;\n\t\t}\n\n\t\t// Store the state anyway to use it once the editor is created.\n\t\tthis.initiallyDisabled = isDisabled;\n\t}\n\n\t/**\n\t * Creates the editor instance, sets initial editor data, then integrates\n\t * the editor with the Angular component. This method does not use the `editor.setData()`\n\t * because of the issue in the collaboration mode (#6).\n\t */\n\tprivate attachToWatchdog() {\n\t\tconst creator = async ( element: HTMLElement, config: CKEditor5.Config ) => {\n\t\t\treturn this.ngZone.runOutsideAngular( async () => {\n\t\t\t\tthis.elementRef.nativeElement.appendChild( element );\n\n\t\t\t\tconst editor = await this.editor!.create( element, config );\n\n\t\t\t\tif ( this.initiallyDisabled ) {\n\t\t\t\t\teditor.isReadOnly = this.initiallyDisabled;\n\t\t\t\t}\n\n\t\t\t\tthis.ngZone.run( () => {\n\t\t\t\t\tthis.ready.emit( editor );\n\t\t\t\t} );\n\n\t\t\t\tthis.setUpEditorEvents( editor );\n\n\t\t\t\treturn editor;\n\t\t\t} );\n\t\t};\n\n\t\tconst destructor = async ( editor: CKEditor5.Editor ) => {\n\t\t\tawait editor.destroy();\n\n\t\t\tthis.elementRef.nativeElement.removeChild( this.editorElement! );\n\t\t};\n\n\t\tconst emitError = () => {\n\t\t\tthis.ngZone.run( () => {\n\t\t\t\tthis.error.emit();\n\t\t\t} );\n\t\t};\n\n\t\tconst element = document.createElement( this.tagName );\n\t\tconst config = this.getConfig();\n\n\t\tthis.editorElement = element;\n\n\t\t// Based on the presence of the watchdog decide how to initialize the editor.\n\t\tif ( this.watchdog ) {\n\t\t\t// When the context watchdog is passed add the new item to it based on the passed configuration.\n\t\t\tthis.watchdog.add( {\n\t\t\t\tid: this.id,\n\t\t\t\ttype: 'editor',\n\t\t\t\tcreator,\n\t\t\t\tdestructor,\n\t\t\t\tsourceElementOrData: element,\n\t\t\t\tconfig\n\t\t\t} );\n\n\t\t\tthis.watchdog.on( 'itemError', ( _, { itemId } ) => {\n\t\t\t\tif ( itemId === this.id ) {\n\t\t\t\t\temitError();\n\t\t\t\t}\n\t\t\t} );\n\t\t} else {\n\t\t\t// In the other case create the watchdog by hand to keep the editor running.\n\t\t\tconst editorWatchdog: CKEditor5.EditorWatchdog = new EditorWatchdog( this.editor );\n\n\t\t\teditorWatchdog.setCreator( creator );\n\t\t\teditorWatchdog.setDestructor( destructor );\n\t\t\teditorWatchdog.on( 'error', emitError );\n\n\t\t\tthis.editorWatchdog = editorWatchdog;\n\n\t\t\tthis.editorWatchdog.create( element, config );\n\t\t}\n\t}\n\n\tprivate getConfig() {\n\t\tif ( this.data && this.config.initialData ) {\n\t\t\tthrow new Error( 'Editor data should be provided either using `config.initialData` or `data` properties.' );\n\t\t}\n\n\t\t// Merge two possible ways of providing data into the `config.initialData` field.\n\t\treturn {\n\t\t\t...this.config,\n\t\t\tinitialData: this.config.initialData || this.data || ''\n\t\t};\n\t}\n\n\t/**\n\t * Integrates the editor with the component by attaching related event listeners.\n\t */\n\tprivate setUpEditorEvents( editor: CKEditor5.Editor ): void {\n\t\tconst modelDocument = editor.model.document;\n\t\tconst viewDocument = editor.editing.view.document;\n\n\t\tmodelDocument.on( 'change:data', ( evt: CKEditor5.EventInfo<'change:data'> ) => {\n\t\t\tthis.ngZone.run( () => {\n\t\t\t\tif ( this.cvaOnChange && !this.isEditorSettingData ) {\n\t\t\t\t\tconst data = editor.getData();\n\n\t\t\t\t\tthis.cvaOnChange( data );\n\t\t\t\t}\n\n\t\t\t\tthis.change.emit( { event: evt, editor } );\n\t\t\t} );\n\t\t} );\n\n\t\tviewDocument.on( 'focus', ( evt: CKEditor5.EventInfo<'focus'> ) => {\n\t\t\tthis.ngZone.run( () => {\n\t\t\t\tthis.focus.emit( { event: evt, editor } );\n\t\t\t} );\n\t\t} );\n\n\t\tviewDocument.on( 'blur', ( evt: CKEditor5.EventInfo<'blur'> ) => {\n\t\t\tthis.ngZone.run( () => {\n\t\t\t\tif ( this.cvaOnTouched ) {\n\t\t\t\t\tthis.cvaOnTouched();\n\t\t\t\t}\n\n\t\t\t\tthis.blur.emit( { event: evt, editor } );\n\t\t\t} );\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { CKEditorComponent } from './ckeditor.component';\n\n@NgModule( {\n\timports: [ FormsModule, CommonModule ],\n\tdeclarations: [ CKEditorComponent ],\n\texports: [ CKEditorComponent ]\n} )\nexport class CKEditorModule {}\n","/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nexport * from './ckeditor';\nexport * from './ckeditor.component';\nexport * from './ckeditor.module';\n"]},"metadata":{},"sourceType":"module"}