{"ast":null,"code":"import _createClass from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { InjectionToken, inject, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, NgZone, Optional, Inject, Input, ViewChild, Output, NgModule } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subscription, fromEvent } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatProgressBar.\n\n/** @docs-private */\n\nvar MatProgressBarBase = function MatProgressBarBase(_elementRef) {\n  _classCallCheck(this, MatProgressBarBase);\n\n  this._elementRef = _elementRef;\n};\n\nvar _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\n\n\nvar MAT_PROGRESS_BAR_LOCATION = new InjectionToken('mat-progress-bar-location', {\n  providedIn: 'root',\n  factory: MAT_PROGRESS_BAR_LOCATION_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_PROGRESS_BAR_LOCATION_FACTORY() {\n  var _document = inject(DOCUMENT);\n\n  var _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: function getPathname() {\n      return _location ? _location.pathname + _location.search : '';\n    }\n  };\n}\n/** Counter used to generate unique IDs for progress bars. */\n\n\nvar progressbarId = 0;\n/**\n * `<mat-progress-bar>` component.\n */\n\nvar MatProgressBar = /*#__PURE__*/function (_MatProgressBarMixinB) {\n  _inherits(MatProgressBar, _MatProgressBarMixinB);\n\n  var _super = _createSuper(MatProgressBar);\n\n  function MatProgressBar(_elementRef, _ngZone, _animationMode,\n  /**\n   * @deprecated `location` parameter to be made required.\n   * @breaking-change 8.0.0\n   */\n  location) {\n    var _this;\n\n    _classCallCheck(this, MatProgressBar);\n\n    _this = _super.call(this, _elementRef);\n    _this._elementRef = _elementRef;\n    _this._ngZone = _ngZone;\n    _this._animationMode = _animationMode;\n    /** Flag that indicates whether NoopAnimations mode is set to true. */\n\n    _this._isNoopAnimation = false;\n    _this._value = 0;\n    _this._bufferValue = 0;\n    /**\n     * Event emitted when animation of the primary progress bar completes. This event will not\n     * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n     * animations (indeterminate and query).\n     */\n\n    _this.animationEnd = new EventEmitter();\n    /** Reference to animation end subscription to be unsubscribed on destroy. */\n\n    _this._animationEndSubscription = Subscription.EMPTY;\n    /**\n     * Mode of the progress bar.\n     *\n     * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n     * 'determinate'.\n     * Mirrored to mode attribute.\n     */\n\n    _this.mode = 'determinate';\n    /** ID of the progress bar. */\n\n    _this.progressbarId = \"mat-progress-bar-\".concat(progressbarId++); // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n\n    var path = location ? location.getPathname().split('#')[0] : '';\n    _this._rectangleFillValue = \"url('\".concat(path, \"#\").concat(_this.progressbarId, \"')\");\n    _this._isNoopAnimation = _animationMode === 'NoopAnimations';\n    return _this;\n  }\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n\n\n  _createClass(MatProgressBar, [{\n    key: \"_primaryTransform\",\n\n    /** Gets the current transform value for the progress bar's primary indicator. */\n    value: function _primaryTransform() {\n      var scale = this.value / 100;\n      return {\n        transform: \"scaleX(\".concat(scale, \")\")\n      };\n    }\n    /**\n     * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n     * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n     */\n\n  }, {\n    key: \"_bufferTransform\",\n    value: function _bufferTransform() {\n      if (this.mode === 'buffer') {\n        var scale = this.bufferValue / 100;\n        return {\n          transform: \"scaleX(\".concat(scale, \")\")\n        };\n      }\n\n      return null;\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this2 = this;\n\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular(function () {\n        var element = _this2._primaryValueBar.nativeElement;\n        _this2._animationEndSubscription = fromEvent(element, 'transitionend').pipe(filter(function (e) {\n          return e.target === element;\n        })).subscribe(function () {\n          if (_this2.mode === 'determinate' || _this2.mode === 'buffer') {\n            _this2._ngZone.run(function () {\n              return _this2.animationEnd.next({\n                value: _this2.value\n              });\n            });\n          }\n        });\n      });\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._animationEndSubscription.unsubscribe();\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    },\n    set: function set(v) {\n      this._value = clamp(coerceNumberProperty(v) || 0);\n    }\n    /** Buffer value of the progress bar. Defaults to zero. */\n\n  }, {\n    key: \"bufferValue\",\n    get: function get() {\n      return this._bufferValue;\n    },\n    set: function set(v) {\n      this._bufferValue = clamp(v || 0);\n    }\n  }]);\n\n  return MatProgressBar;\n}(_MatProgressBarMixinBase);\n\nMatProgressBar.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-progress-bar',\n    exportAs: 'matProgressBar',\n    host: {\n      'role': 'progressbar',\n      'aria-valuemin': '0',\n      'aria-valuemax': '100',\n      '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n      '[attr.mode]': 'mode',\n      'class': 'mat-progress-bar',\n      '[class._mat-animation-noopable]': '_isNoopAnimation'\n    },\n    inputs: ['color'],\n    template: \"<!--\\n  The background div is named as such because it appears below the other divs and is not sized based\\n  on values.\\n-->\\n<svg width=\\\"100%\\\" height=\\\"4\\\" focusable=\\\"false\\\" class=\\\"mat-progress-bar-background mat-progress-bar-element\\\">\\n  <defs>\\n    <pattern [id]=\\\"progressbarId\\\" x=\\\"4\\\" y=\\\"0\\\" width=\\\"8\\\" height=\\\"4\\\" patternUnits=\\\"userSpaceOnUse\\\">\\n      <circle cx=\\\"2\\\" cy=\\\"2\\\" r=\\\"2\\\"/>\\n    </pattern>\\n  </defs>\\n  <rect [attr.fill]=\\\"_rectangleFillValue\\\" width=\\\"100%\\\" height=\\\"100%\\\"/>\\n</svg>\\n<div class=\\\"mat-progress-bar-buffer mat-progress-bar-element\\\" [ngStyle]=\\\"_bufferTransform()\\\"></div>\\n<div class=\\\"mat-progress-bar-primary mat-progress-bar-fill mat-progress-bar-element\\\" [ngStyle]=\\\"_primaryTransform()\\\" #primaryValueBar></div>\\n<div class=\\\"mat-progress-bar-secondary mat-progress-bar-fill mat-progress-bar-element\\\"></div>\\n\",\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styles: [\".mat-progress-bar{display:block;height:4px;overflow:hidden;position:relative;transition:opacity 250ms linear;width:100%}._mat-animation-noopable.mat-progress-bar{transition:none;animation:none}.mat-progress-bar .mat-progress-bar-element,.mat-progress-bar .mat-progress-bar-fill::after{height:100%;position:absolute;width:100%}.mat-progress-bar .mat-progress-bar-background{width:calc(100% + 10px)}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-background{display:none}.mat-progress-bar .mat-progress-bar-buffer{transform-origin:top left;transition:transform 250ms ease}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-buffer{border-top:solid 5px;opacity:.5}.mat-progress-bar .mat-progress-bar-secondary{display:none}.mat-progress-bar .mat-progress-bar-fill{animation:none;transform-origin:top left;transition:transform 250ms ease}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-fill{border-top:solid 4px}.mat-progress-bar .mat-progress-bar-fill::after{animation:none;content:\\\"\\\";display:inline-block;left:0}.mat-progress-bar[dir=rtl],[dir=rtl] .mat-progress-bar{transform:rotateY(180deg)}.mat-progress-bar[mode=query]{transform:rotateZ(180deg)}.mat-progress-bar[mode=query][dir=rtl],[dir=rtl] .mat-progress-bar[mode=query]{transform:rotateZ(180deg) rotateY(180deg)}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-fill,.mat-progress-bar[mode=query] .mat-progress-bar-fill{transition:none}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary,.mat-progress-bar[mode=query] .mat-progress-bar-primary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-translate 2000ms infinite linear;left:-145.166611%}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary,.mat-progress-bar[mode=query] .mat-progress-bar-secondary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-translate 2000ms infinite linear;left:-54.888891%;display:block}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=buffer] .mat-progress-bar-background{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-background-scroll 250ms infinite linear;display:block}.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-buffer,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-background{animation:none;transition-duration:1ms}@keyframes mat-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(83.67142%)}100%{transform:translateX(200.611057%)}}@keyframes mat-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(0.08)}36.65%{animation-timing-function:cubic-bezier(0.334731, 0.12482, 0.785844, 1);transform:scaleX(0.08)}69.15%{animation-timing-function:cubic-bezier(0.06, 0.11, 0.6, 1);transform:scaleX(0.661479)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:translateX(37.651913%)}48.35%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:translateX(84.386165%)}100%{transform:translateX(160.277782%)}}@keyframes mat-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:scaleX(0.08)}19.15%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:scaleX(0.457104)}44.15%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:scaleX(0.72796)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-background-scroll{to{transform:translateX(-8px)}}\\n\"]\n  }]\n}];\n\nMatProgressBar.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: NgZone\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_PROGRESS_BAR_LOCATION]\n    }]\n  }];\n};\n\nMatProgressBar.propDecorators = {\n  value: [{\n    type: Input\n  }],\n  bufferValue: [{\n    type: Input\n  }],\n  _primaryValueBar: [{\n    type: ViewChild,\n    args: ['primaryValueBar']\n  }],\n  animationEnd: [{\n    type: Output\n  }],\n  mode: [{\n    type: Input\n  }]\n};\n/** Clamps a value to be between two numbers, by default 0 and 100. */\n\nfunction clamp(v) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;\n  return Math.max(min, Math.min(max, v));\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatProgressBarModule = function MatProgressBarModule() {\n  _classCallCheck(this, MatProgressBarModule);\n};\n\nMatProgressBarModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule, MatCommonModule],\n    exports: [MatProgressBar, MatCommonModule],\n    declarations: [MatProgressBar]\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PROGRESS_BAR_LOCATION, MAT_PROGRESS_BAR_LOCATION_FACTORY, MatProgressBar, MatProgressBarModule };","map":{"version":3,"sources":["../../../../../../src/material/progress-bar/progress-bar.ts","../../../../../../src/material/progress-bar/progress-bar-module.ts","../../../../../../src/material/progress-bar/public-api.ts","../../../../../../src/material/progress-bar/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {coerceNumberProperty, NumberInput} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {fromEvent, Observable, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\n\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nclass MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nconst _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\nexport type ProgressBarMode = 'determinate' | 'indeterminate' | 'buffer' | 'query';\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': '_isNoopAnimation',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(coerceNumberProperty(v) || 0);\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: ProgressBarMode = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n    return null;\n  }\n\n  ngAfterViewInit() {\n    // Run outside angular so change detection didn't get triggered on every transition end\n    // instead only on the animation that we care about (primary value bar's transitionend)\n    this._ngZone.runOutsideAngular((() => {\n      const element = this._primaryValueBar.nativeElement;\n\n      this._animationEndSubscription =\n        (fromEvent(element, 'transitionend') as Observable<TransitionEvent>)\n          .pipe(filter(((e: TransitionEvent) => e.target === element)))\n          .subscribe(() => {\n            if (this.mode === 'determinate' || this.mode === 'buffer') {\n              this._ngZone.run(() => this.animationEnd.next({value: this.value}));\n            }\n          });\n    }));\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  static ngAcceptInputType_value: NumberInput;\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './progress-bar-module';\nexport * from './progress-bar';\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}