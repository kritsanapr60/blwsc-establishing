{"ast":null,"code":"import _toConsumableArray from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createClass from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/kritsanaprasit/Desktop/ProjectCS/school-budget-system/SchoolBudgetSystem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Optional, Inject, NgZone, ViewChild, ContentChild, ContentChildren, NgModule } from '@angular/core';\nimport { mixinColor, MAT_LABEL_GLOBAL_OPTIONS, MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, merge, fromEvent } from 'rxjs';\nimport { startWith, takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { Platform } from '@angular/cdk/platform';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar nextUniqueId = 0;\n/**\n * Injection token that can be used to reference instances of `MatError`. It serves as\n * alternative token to the actual `MatError` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nvar MAT_ERROR = new InjectionToken('MatError');\n/** Single error message to be shown underneath the form field. */\n\nvar MatError = function MatError() {\n  _classCallCheck(this, MatError);\n\n  this.id = \"mat-error-\".concat(nextUniqueId++);\n};\n\nMatError.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-error',\n    host: {\n      'class': 'mat-error',\n      'role': 'alert',\n      '[attr.id]': 'id'\n    },\n    providers: [{\n      provide: MAT_ERROR,\n      useExisting: MatError\n    }]\n  }]\n}];\nMatError.propDecorators = {\n  id: [{\n    type: Input\n  }]\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\n\nvar matFormFieldAnimations = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [// TODO(mmalerba): Use angular animations for label animation as well.\n  state('enter', style({\n    opacity: 1,\n    transform: 'translateY(0%)'\n  })), transition('void => enter', [style({\n    opacity: 0,\n    transform: 'translateY(-100%)'\n  }), animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')])])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\n\nvar MatFormFieldControl = function MatFormFieldControl() {\n  _classCallCheck(this, MatFormFieldControl);\n};\n\nMatFormFieldControl.decorators = [{\n  type: Directive\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\n\nfunction getMatFormFieldPlaceholderConflictError() {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n/** @docs-private */\n\n\nfunction getMatFormFieldDuplicatedHintError(align) {\n  return Error(\"A hint was already declared for 'align=\\\"\".concat(align, \"\\\"'.\"));\n}\n/** @docs-private */\n\n\nfunction getMatFormFieldMissingControlError() {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar nextUniqueId$1 = 0;\n/**\n * Injection token that can be used to reference instances of `MatHint`. It serves as\n * alternative token to the actual `MatHint` class which could cause unnecessary\n * retention of the class and its directive metadata.\n *\n * *Note*: This is not part of the public API as the MDC-based form-field will not\n * need a lightweight token for `MatHint` and we want to reduce breaking changes.\n */\n\nvar _MAT_HINT = new InjectionToken('MatHint');\n/** Hint text to be shown underneath the form field control. */\n\n\nvar MatHint = function MatHint() {\n  _classCallCheck(this, MatHint);\n\n  /** Whether to align the hint label at the start or end of the line. */\n  this.align = 'start';\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n\n  this.id = \"mat-hint-\".concat(nextUniqueId$1++);\n};\n\nMatHint.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-hint',\n    host: {\n      'class': 'mat-hint',\n      '[class.mat-right]': 'align == \"end\"',\n      '[attr.id]': 'id',\n      // Remove align attribute to prevent it from interfering with layout.\n      '[attr.align]': 'null'\n    },\n    providers: [{\n      provide: _MAT_HINT,\n      useExisting: MatHint\n    }]\n  }]\n}];\nMatHint.propDecorators = {\n  align: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }]\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The floating label for a `mat-form-field`. */\n\nvar MatLabel = function MatLabel() {\n  _classCallCheck(this, MatLabel);\n};\n\nMatLabel.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-label'\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n\nvar MatPlaceholder = function MatPlaceholder() {\n  _classCallCheck(this, MatPlaceholder);\n};\n\nMatPlaceholder.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-placeholder'\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used to reference instances of `MatPrefix`. It serves as\n * alternative token to the actual `MatPrefix` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nvar MAT_PREFIX = new InjectionToken('MatPrefix');\n/** Prefix to be placed in front of the form field. */\n\nvar MatPrefix = function MatPrefix() {\n  _classCallCheck(this, MatPrefix);\n};\n\nMatPrefix.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matPrefix]',\n    providers: [{\n      provide: MAT_PREFIX,\n      useExisting: MatPrefix\n    }]\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used to reference instances of `MatSuffix`. It serves as\n * alternative token to the actual `MatSuffix` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nvar MAT_SUFFIX = new InjectionToken('MatSuffix');\n/** Suffix to be placed at the end of the form field. */\n\nvar MatSuffix = function MatSuffix() {\n  _classCallCheck(this, MatSuffix);\n};\n\nMatSuffix.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matSuffix]',\n    providers: [{\n      provide: MAT_SUFFIX,\n      useExisting: MatSuffix\n    }]\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar nextUniqueId$2 = 0;\nvar floatingLabelScale = 0.75;\nvar outlineGapPadding = 5;\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\n\nvar MatFormFieldBase = function MatFormFieldBase(_elementRef) {\n  _classCallCheck(this, MatFormFieldBase);\n\n  this._elementRef = _elementRef;\n};\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\n\n\nvar _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\n\n\nvar MAT_FORM_FIELD_DEFAULT_OPTIONS = new InjectionToken('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to inject an instances of `MatFormField`. It serves\n * as alternative token to the actual `MatFormField` class which would cause unnecessary\n * retention of the `MatFormField` class and its component metadata.\n */\n\nvar MAT_FORM_FIELD = new InjectionToken('MatFormField');\n/** Container for form controls that applies Material Design styling and behavior. */\n\nvar MatFormField = /*#__PURE__*/function (_MatFormFieldMixinBas) {\n  _inherits(MatFormField, _MatFormFieldMixinBas);\n\n  var _super = _createSuper(MatFormField);\n\n  function MatFormField(_elementRef, _changeDetectorRef, labelOptions, _dir, _defaults, _platform, _ngZone, _animationMode) {\n    var _this;\n\n    _classCallCheck(this, MatFormField);\n\n    _this = _super.call(this, _elementRef);\n    _this._elementRef = _elementRef;\n    _this._changeDetectorRef = _changeDetectorRef;\n    _this._dir = _dir;\n    _this._defaults = _defaults;\n    _this._platform = _platform;\n    _this._ngZone = _ngZone;\n    /**\n     * Whether the outline gap needs to be calculated\n     * immediately on the next change detection run.\n     */\n\n    _this._outlineGapCalculationNeededImmediately = false;\n    /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n\n    _this._outlineGapCalculationNeededOnStable = false;\n    _this._destroyed = new Subject();\n    /** Override for the logic that disables the label animation in certain cases. */\n\n    _this._showAlwaysAnimate = false;\n    /** State of the mat-hint and mat-error animations. */\n\n    _this._subscriptAnimationState = '';\n    _this._hintLabel = ''; // Unique id for the hint label.\n\n    _this._hintLabelId = \"mat-hint-\".concat(nextUniqueId$2++); // Unique id for the label element.\n\n    _this._labelId = \"mat-form-field-label-\".concat(nextUniqueId$2++);\n    _this._labelOptions = labelOptions ? labelOptions : {};\n    _this.floatLabel = _this._getDefaultFloatLabelState();\n    _this._animationsEnabled = _animationMode !== 'NoopAnimations'; // Set the default through here so we invoke the setter on the first run.\n\n    _this.appearance = _defaults && _defaults.appearance ? _defaults.appearance : 'legacy';\n    _this._hideRequiredMarker = _defaults && _defaults.hideRequiredMarker != null ? _defaults.hideRequiredMarker : false;\n    return _this;\n  }\n  /** The form-field appearance style. */\n\n\n  _createClass(MatFormField, [{\n    key: \"_shouldAlwaysFloat\",\n\n    /** Whether the floating label should always float or not. */\n    value: function _shouldAlwaysFloat() {\n      return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n    }\n    /** Whether the label can float or not. */\n\n  }, {\n    key: \"_canLabelFloat\",\n    value: function _canLabelFloat() {\n      return this.floatLabel !== 'never';\n    }\n    /** Text for the form field hint. */\n\n  }, {\n    key: \"getLabelId\",\n\n    /**\n     * Gets the id of the label element. If no label is present, returns `null`.\n     */\n    value: function getLabelId() {\n      return this._hasFloatingLabel() ? this._labelId : null;\n    }\n    /**\n     * Gets an ElementRef for the element that a overlay attached to the form-field should be\n     * positioned relative to.\n     */\n\n  }, {\n    key: \"getConnectedOverlayOrigin\",\n    value: function getConnectedOverlayOrigin() {\n      return this._connectionContainerRef || this._elementRef;\n    }\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this2 = this;\n\n      this._validateControlChild();\n\n      var control = this._control;\n\n      if (control.controlType) {\n        this._elementRef.nativeElement.classList.add(\"mat-form-field-type-\".concat(control.controlType));\n      } // Subscribe to changes in the child control state in order to update the form field UI.\n\n\n      control.stateChanges.pipe(startWith(null)).subscribe(function () {\n        _this2._validatePlaceholders();\n\n        _this2._syncDescribedByIds();\n\n        _this2._changeDetectorRef.markForCheck();\n      }); // Run change detection if the value changes.\n\n      if (control.ngControl && control.ngControl.valueChanges) {\n        control.ngControl.valueChanges.pipe(takeUntil(this._destroyed)).subscribe(function () {\n          return _this2._changeDetectorRef.markForCheck();\n        });\n      } // Note that we have to run outside of the `NgZone` explicitly,\n      // in order to avoid throwing users into an infinite loop\n      // if `zone-patch-rxjs` is included.\n\n\n      this._ngZone.runOutsideAngular(function () {\n        _this2._ngZone.onStable.pipe(takeUntil(_this2._destroyed)).subscribe(function () {\n          if (_this2._outlineGapCalculationNeededOnStable) {\n            _this2.updateOutlineGap();\n          }\n        });\n      }); // Run change detection and update the outline if the suffix or prefix changes.\n\n\n      merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(function () {\n        _this2._outlineGapCalculationNeededOnStable = true;\n\n        _this2._changeDetectorRef.markForCheck();\n      }); // Re-validate when the number of hints changes.\n\n      this._hintChildren.changes.pipe(startWith(null)).subscribe(function () {\n        _this2._processHints();\n\n        _this2._changeDetectorRef.markForCheck();\n      }); // Update the aria-described by when the number of errors changes.\n\n\n      this._errorChildren.changes.pipe(startWith(null)).subscribe(function () {\n        _this2._syncDescribedByIds();\n\n        _this2._changeDetectorRef.markForCheck();\n      });\n\n      if (this._dir) {\n        this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(function () {\n          if (typeof requestAnimationFrame === 'function') {\n            _this2._ngZone.runOutsideAngular(function () {\n              requestAnimationFrame(function () {\n                return _this2.updateOutlineGap();\n              });\n            });\n          } else {\n            _this2.updateOutlineGap();\n          }\n        });\n      }\n    }\n  }, {\n    key: \"ngAfterContentChecked\",\n    value: function ngAfterContentChecked() {\n      this._validateControlChild();\n\n      if (this._outlineGapCalculationNeededImmediately) {\n        this.updateOutlineGap();\n      }\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      // Avoid animations on load.\n      this._subscriptAnimationState = 'enter';\n\n      this._changeDetectorRef.detectChanges();\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /** Determines whether a class from the NgControl should be forwarded to the host element. */\n\n  }, {\n    key: \"_shouldForward\",\n    value: function _shouldForward(prop) {\n      var ngControl = this._control ? this._control.ngControl : null;\n      return ngControl && ngControl[prop];\n    }\n  }, {\n    key: \"_hasPlaceholder\",\n    value: function _hasPlaceholder() {\n      return !!(this._control && this._control.placeholder || this._placeholderChild);\n    }\n  }, {\n    key: \"_hasLabel\",\n    value: function _hasLabel() {\n      return !!(this._labelChildNonStatic || this._labelChildStatic);\n    }\n  }, {\n    key: \"_shouldLabelFloat\",\n    value: function _shouldLabelFloat() {\n      return this._canLabelFloat() && (this._control && this._control.shouldLabelFloat || this._shouldAlwaysFloat());\n    }\n  }, {\n    key: \"_hideControlPlaceholder\",\n    value: function _hideControlPlaceholder() {\n      // In the legacy appearance the placeholder is promoted to a label if no label is given.\n      return this.appearance === 'legacy' && !this._hasLabel() || this._hasLabel() && !this._shouldLabelFloat();\n    }\n  }, {\n    key: \"_hasFloatingLabel\",\n    value: function _hasFloatingLabel() {\n      // In the legacy appearance the placeholder is promoted to a label if no label is given.\n      return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n    }\n    /** Determines whether to display hints or errors. */\n\n  }, {\n    key: \"_getDisplayedMessages\",\n    value: function _getDisplayedMessages() {\n      return this._errorChildren && this._errorChildren.length > 0 && this._control.errorState ? 'error' : 'hint';\n    }\n    /** Animates the placeholder up and locks it in position. */\n\n  }, {\n    key: \"_animateAndLockLabel\",\n    value: function _animateAndLockLabel() {\n      var _this3 = this;\n\n      if (this._hasFloatingLabel() && this._canLabelFloat()) {\n        // If animations are disabled, we shouldn't go in here,\n        // because the `transitionend` will never fire.\n        if (this._animationsEnabled && this._label) {\n          this._showAlwaysAnimate = true;\n          fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(function () {\n            _this3._showAlwaysAnimate = false;\n          });\n        }\n\n        this.floatLabel = 'always';\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /**\n     * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n     * or child element with the `mat-placeholder` directive).\n     */\n\n  }, {\n    key: \"_validatePlaceholders\",\n    value: function _validatePlaceholders() {\n      if (this._control.placeholder && this._placeholderChild && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatFormFieldPlaceholderConflictError();\n      }\n    }\n    /** Does any extra processing that is required when handling the hints. */\n\n  }, {\n    key: \"_processHints\",\n    value: function _processHints() {\n      this._validateHints();\n\n      this._syncDescribedByIds();\n    }\n    /**\n     * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n     * attribute being considered as `align=\"start\"`.\n     */\n\n  }, {\n    key: \"_validateHints\",\n    value: function _validateHints() {\n      var _this4 = this;\n\n      if (this._hintChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        var startHint;\n        var endHint;\n\n        this._hintChildren.forEach(function (hint) {\n          if (hint.align === 'start') {\n            if (startHint || _this4.hintLabel) {\n              throw getMatFormFieldDuplicatedHintError('start');\n            }\n\n            startHint = hint;\n          } else if (hint.align === 'end') {\n            if (endHint) {\n              throw getMatFormFieldDuplicatedHintError('end');\n            }\n\n            endHint = hint;\n          }\n        });\n      }\n    }\n    /** Gets the default float label state. */\n\n  }, {\n    key: \"_getDefaultFloatLabelState\",\n    value: function _getDefaultFloatLabelState() {\n      return this._defaults && this._defaults.floatLabel || this._labelOptions.float || 'auto';\n    }\n    /**\n     * Sets the list of element IDs that describe the child control. This allows the control to update\n     * its `aria-describedby` attribute accordingly.\n     */\n\n  }, {\n    key: \"_syncDescribedByIds\",\n    value: function _syncDescribedByIds() {\n      if (this._control) {\n        var ids = []; // TODO(wagnermaciel): Remove the type check when we find the root cause of this bug.\n\n        if (this._control.userAriaDescribedBy && typeof this._control.userAriaDescribedBy === 'string') {\n          ids.push.apply(ids, _toConsumableArray(this._control.userAriaDescribedBy.split(' ')));\n        }\n\n        if (this._getDisplayedMessages() === 'hint') {\n          var startHint = this._hintChildren ? this._hintChildren.find(function (hint) {\n            return hint.align === 'start';\n          }) : null;\n          var endHint = this._hintChildren ? this._hintChildren.find(function (hint) {\n            return hint.align === 'end';\n          }) : null;\n\n          if (startHint) {\n            ids.push(startHint.id);\n          } else if (this._hintLabel) {\n            ids.push(this._hintLabelId);\n          }\n\n          if (endHint) {\n            ids.push(endHint.id);\n          }\n        } else if (this._errorChildren) {\n          ids.push.apply(ids, _toConsumableArray(this._errorChildren.map(function (error) {\n            return error.id;\n          })));\n        }\n\n        this._control.setDescribedByIds(ids);\n      }\n    }\n    /** Throws an error if the form field's control is missing. */\n\n  }, {\n    key: \"_validateControlChild\",\n    value: function _validateControlChild() {\n      if (!this._control && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatFormFieldMissingControlError();\n      }\n    }\n    /**\n     * Updates the width and position of the gap in the outline. Only relevant for the outline\n     * appearance.\n     */\n\n  }, {\n    key: \"updateOutlineGap\",\n    value: function updateOutlineGap() {\n      var labelEl = this._label ? this._label.nativeElement : null;\n\n      if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length || !labelEl.textContent.trim()) {\n        return;\n      }\n\n      if (!this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        return;\n      } // If the element is not present in the DOM, the outline gap will need to be calculated\n      // the next time it is checked and in the DOM.\n\n\n      if (!this._isAttachedToDOM()) {\n        this._outlineGapCalculationNeededImmediately = true;\n        return;\n      }\n\n      var startWidth = 0;\n      var gapWidth = 0;\n      var container = this._connectionContainerRef.nativeElement;\n      var startEls = container.querySelectorAll('.mat-form-field-outline-start');\n      var gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n      if (this._label && this._label.nativeElement.children.length) {\n        var containerRect = container.getBoundingClientRect(); // If the container's width and height are zero, it means that the element is\n        // invisible and we can't calculate the outline gap. Mark the element as needing\n        // to be checked the next time the zone stabilizes. We can't do this immediately\n        // on the next change detection, because even if the element becomes visible,\n        // the `ClientRect` won't be reclaculated immediately. We reset the\n        // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n\n        if (containerRect.width === 0 && containerRect.height === 0) {\n          this._outlineGapCalculationNeededOnStable = true;\n          this._outlineGapCalculationNeededImmediately = false;\n          return;\n        }\n\n        var containerStart = this._getStartEnd(containerRect);\n\n        var labelChildren = labelEl.children;\n\n        var labelStart = this._getStartEnd(labelChildren[0].getBoundingClientRect());\n\n        var labelWidth = 0;\n\n        for (var i = 0; i < labelChildren.length; i++) {\n          labelWidth += labelChildren[i].offsetWidth;\n        }\n\n        startWidth = Math.abs(labelStart - containerStart) - outlineGapPadding;\n        gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n      }\n\n      for (var _i = 0; _i < startEls.length; _i++) {\n        startEls[_i].style.width = \"\".concat(startWidth, \"px\");\n      }\n\n      for (var _i2 = 0; _i2 < gapEls.length; _i2++) {\n        gapEls[_i2].style.width = \"\".concat(gapWidth, \"px\");\n      }\n\n      this._outlineGapCalculationNeededOnStable = this._outlineGapCalculationNeededImmediately = false;\n    }\n    /** Gets the start end of the rect considering the current directionality. */\n\n  }, {\n    key: \"_getStartEnd\",\n    value: function _getStartEnd(rect) {\n      return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n    }\n    /** Checks whether the form field is attached to the DOM. */\n\n  }, {\n    key: \"_isAttachedToDOM\",\n    value: function _isAttachedToDOM() {\n      var element = this._elementRef.nativeElement;\n\n      if (element.getRootNode) {\n        var rootNode = element.getRootNode(); // If the element is inside the DOM the root node will be either the document\n        // or the closest shadow root, otherwise it'll be the element itself.\n\n        return rootNode && rootNode !== element;\n      } // Otherwise fall back to checking if it's in the document. This doesn't account for\n      // shadow DOM, however browser that support shadow DOM should support `getRootNode` as well.\n\n\n      return document.documentElement.contains(element);\n    }\n  }, {\n    key: \"appearance\",\n    get: function get() {\n      return this._appearance;\n    },\n    set: function set(value) {\n      var oldValue = this._appearance;\n      this._appearance = value || this._defaults && this._defaults.appearance || 'legacy';\n\n      if (this._appearance === 'outline' && oldValue !== value) {\n        this._outlineGapCalculationNeededOnStable = true;\n      }\n    }\n    /** Whether the required marker should be hidden. */\n\n  }, {\n    key: \"hideRequiredMarker\",\n    get: function get() {\n      return this._hideRequiredMarker;\n    },\n    set: function set(value) {\n      this._hideRequiredMarker = coerceBooleanProperty(value);\n    }\n  }, {\n    key: \"hintLabel\",\n    get: function get() {\n      return this._hintLabel;\n    },\n    set: function set(value) {\n      this._hintLabel = value;\n\n      this._processHints();\n    }\n    /**\n     * Whether the label should always float, never float or float as the user types.\n     *\n     * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n     * way to make the floating label emulate the behavior of a standard input placeholder. However\n     * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n     * appearances the `never` option has been disabled in favor of just using the placeholder.\n     */\n\n  }, {\n    key: \"floatLabel\",\n    get: function get() {\n      return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n    },\n    set: function set(value) {\n      if (value !== this._floatLabel) {\n        this._floatLabel = value || this._getDefaultFloatLabelState();\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n  }, {\n    key: \"_control\",\n    get: function get() {\n      // TODO(crisbeto): we need this workaround in order to support both Ivy and ViewEngine.\n      //  We should clean this up once Ivy is the default renderer.\n      return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n    },\n    set: function set(value) {\n      this._explicitFormFieldControl = value;\n    }\n  }]);\n\n  return MatFormField;\n}(_MatFormFieldMixinBase);\n\nMatFormField.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-form-field',\n    exportAs: 'matFormField',\n    template: \"<div class=\\\"mat-form-field-wrapper\\\">\\n  <div class=\\\"mat-form-field-flex\\\" #connectionContainer\\n       (click)=\\\"_control.onContainerClick && _control.onContainerClick($event)\\\">\\n\\n    <!-- Outline used for outline appearance. -->\\n    <ng-container *ngIf=\\\"appearance == 'outline'\\\">\\n      <div class=\\\"mat-form-field-outline\\\">\\n        <div class=\\\"mat-form-field-outline-start\\\"></div>\\n        <div class=\\\"mat-form-field-outline-gap\\\"></div>\\n        <div class=\\\"mat-form-field-outline-end\\\"></div>\\n      </div>\\n      <div class=\\\"mat-form-field-outline mat-form-field-outline-thick\\\">\\n        <div class=\\\"mat-form-field-outline-start\\\"></div>\\n        <div class=\\\"mat-form-field-outline-gap\\\"></div>\\n        <div class=\\\"mat-form-field-outline-end\\\"></div>\\n      </div>\\n    </ng-container>\\n\\n    <div class=\\\"mat-form-field-prefix\\\" *ngIf=\\\"_prefixChildren.length\\\">\\n      <ng-content select=\\\"[matPrefix]\\\"></ng-content>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-infix\\\" #inputContainer>\\n      <ng-content></ng-content>\\n\\n      <span class=\\\"mat-form-field-label-wrapper\\\">\\n        <!-- We add aria-owns as a workaround for an issue in JAWS & NVDA where the label isn't\\n             read if it comes before the control in the DOM. -->\\n        <label class=\\\"mat-form-field-label\\\"\\n               (cdkObserveContent)=\\\"updateOutlineGap()\\\"\\n               [cdkObserveContentDisabled]=\\\"appearance != 'outline'\\\"\\n               [id]=\\\"_labelId\\\"\\n               [attr.for]=\\\"_control.id\\\"\\n               [attr.aria-owns]=\\\"_control.id\\\"\\n               [class.mat-empty]=\\\"_control.empty && !_shouldAlwaysFloat()\\\"\\n               [class.mat-form-field-empty]=\\\"_control.empty && !_shouldAlwaysFloat()\\\"\\n               [class.mat-accent]=\\\"color == 'accent'\\\"\\n               [class.mat-warn]=\\\"color == 'warn'\\\"\\n               #label\\n               *ngIf=\\\"_hasFloatingLabel()\\\"\\n               [ngSwitch]=\\\"_hasLabel()\\\">\\n\\n          <!-- @breaking-change 8.0.0 remove in favor of mat-label element an placeholder attr. -->\\n          <ng-container *ngSwitchCase=\\\"false\\\">\\n            <ng-content select=\\\"mat-placeholder\\\"></ng-content>\\n            <span>{{_control.placeholder}}</span>\\n          </ng-container>\\n\\n          <ng-content select=\\\"mat-label\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n\\n          <!-- @breaking-change 8.0.0 remove `mat-placeholder-required` class -->\\n          <span\\n            class=\\\"mat-placeholder-required mat-form-field-required-marker\\\"\\n            aria-hidden=\\\"true\\\"\\n            *ngIf=\\\"!hideRequiredMarker && _control.required && !_control.disabled\\\">&#32;*</span>\\n        </label>\\n      </span>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-suffix\\\" *ngIf=\\\"_suffixChildren.length\\\">\\n      <ng-content select=\\\"[matSuffix]\\\"></ng-content>\\n    </div>\\n  </div>\\n\\n  <!-- Underline used for legacy, standard, and box appearances. -->\\n  <div class=\\\"mat-form-field-underline\\\" #underline\\n       *ngIf=\\\"appearance != 'outline'\\\">\\n    <span class=\\\"mat-form-field-ripple\\\"\\n          [class.mat-accent]=\\\"color == 'accent'\\\"\\n          [class.mat-warn]=\\\"color == 'warn'\\\"></span>\\n  </div>\\n\\n  <div class=\\\"mat-form-field-subscript-wrapper\\\"\\n       [ngSwitch]=\\\"_getDisplayedMessages()\\\">\\n    <div *ngSwitchCase=\\\"'error'\\\" [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n      <ng-content select=\\\"mat-error\\\"></ng-content>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-hint-wrapper\\\" *ngSwitchCase=\\\"'hint'\\\"\\n      [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n      <!-- TODO(mmalerba): use an actual <mat-hint> once all selectors are switched to mat-* -->\\n      <div *ngIf=\\\"hintLabel\\\" [id]=\\\"_hintLabelId\\\" class=\\\"mat-hint\\\">{{hintLabel}}</div>\\n      <ng-content select=\\\"mat-hint:not([align='end'])\\\"></ng-content>\\n      <div class=\\\"mat-form-field-hint-spacer\\\"></div>\\n      <ng-content select=\\\"mat-hint[align='end']\\\"></ng-content>\\n    </div>\\n  </div>\\n</div>\\n\",\n    animations: [matFormFieldAnimations.transitionMessages],\n    host: {\n      'class': 'mat-form-field',\n      '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n      '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n      '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n      '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n      '[class.mat-form-field-invalid]': '_control.errorState',\n      '[class.mat-form-field-can-float]': '_canLabelFloat()',\n      '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n      '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n      '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n      '[class.mat-form-field-disabled]': '_control.disabled',\n      '[class.mat-form-field-autofilled]': '_control.autofilled',\n      '[class.mat-focused]': '_control.focused',\n      '[class.mat-accent]': 'color == \"accent\"',\n      '[class.mat-warn]': 'color == \"warn\"',\n      '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n      '[class.ng-touched]': '_shouldForward(\"touched\")',\n      '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n      '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n      '[class.ng-valid]': '_shouldForward(\"valid\")',\n      '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n      '[class.ng-pending]': '_shouldForward(\"pending\")',\n      '[class._mat-animation-noopable]': '!_animationsEnabled'\n    },\n    inputs: ['color'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{\n      provide: MAT_FORM_FIELD,\n      useExisting: MatFormField\n    }],\n    styles: [\".mat-form-field{display:inline-block;position:relative;text-align:left}[dir=rtl] .mat-form-field{text-align:right}.mat-form-field-wrapper{position:relative}.mat-form-field-flex{display:inline-flex;align-items:baseline;box-sizing:border-box;width:100%}.mat-form-field-prefix,.mat-form-field-suffix{white-space:nowrap;flex:none;position:relative}.mat-form-field-infix{display:block;position:relative;flex:auto;min-width:0;width:180px}.cdk-high-contrast-active .mat-form-field-infix{border-image:linear-gradient(transparent, transparent)}.mat-form-field-label-wrapper{position:absolute;left:0;box-sizing:content-box;width:100%;height:100%;overflow:hidden;pointer-events:none}[dir=rtl] .mat-form-field-label-wrapper{left:auto;right:0}.mat-form-field-label{position:absolute;left:0;font:inherit;pointer-events:none;width:100%;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),width 400ms cubic-bezier(0.25, 0.8, 0.25, 1);display:none}[dir=rtl] .mat-form-field-label{transform-origin:100% 0;left:auto;right:0}.mat-form-field-empty.mat-form-field-label,.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label{display:block}.mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:block;transition:none}.mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-form-field-can-float .mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:block}.mat-form-field-label:not(.mat-form-field-empty){transition:none}.mat-form-field-underline{position:absolute;width:100%;pointer-events:none;transform:scale3d(1, 1.0001, 1)}.mat-form-field-ripple{position:absolute;left:0;width:100%;transform-origin:50%;transform:scaleX(0.5);opacity:0;transition:background-color 300ms cubic-bezier(0.55, 0, 0.55, 0.2)}.mat-form-field.mat-focused .mat-form-field-ripple,.mat-form-field.mat-form-field-invalid .mat-form-field-ripple{opacity:1;transform:scaleX(1);transition:transform 300ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 300ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-subscript-wrapper{position:absolute;box-sizing:border-box;width:100%;overflow:hidden}.mat-form-field-subscript-wrapper .mat-icon,.mat-form-field-label-wrapper .mat-icon{width:1em;height:1em;font-size:inherit;vertical-align:baseline}.mat-form-field-hint-wrapper{display:flex}.mat-form-field-hint-spacer{flex:1 0 1em}.mat-error{display:block}.mat-form-field-control-wrapper{position:relative}.mat-form-field._mat-animation-noopable .mat-form-field-label,.mat-form-field._mat-animation-noopable .mat-form-field-ripple{transition:none}\\n\", \".mat-form-field-appearance-fill .mat-form-field-flex{border-radius:4px 4px 0 0;padding:.75em .75em 0 .75em}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-flex{outline:solid 1px}.mat-form-field-appearance-fill .mat-form-field-underline::before{content:\\\"\\\";display:block;position:absolute;bottom:0;height:1px;width:100%}.mat-form-field-appearance-fill .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-fill:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-fill._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}.mat-form-field-appearance-fill .mat-form-field-subscript-wrapper{padding:0 1em}\\n\", \".mat-input-element{font:inherit;background:transparent;color:currentColor;border:none;outline:none;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.mat-input-element:-moz-ui-invalid{box-shadow:none}.mat-input-element::-ms-clear,.mat-input-element::-ms-reveal{display:none}.mat-input-element,.mat-input-element::-webkit-search-cancel-button,.mat-input-element::-webkit-search-decoration,.mat-input-element::-webkit-search-results-button,.mat-input-element::-webkit-search-results-decoration{-webkit-appearance:none}.mat-input-element::-webkit-contacts-auto-fill-button,.mat-input-element::-webkit-caps-lock-indicator,.mat-input-element::-webkit-credentials-auto-fill-button{visibility:hidden}.mat-input-element[type=date],.mat-input-element[type=datetime],.mat-input-element[type=datetime-local],.mat-input-element[type=month],.mat-input-element[type=week],.mat-input-element[type=time]{line-height:1}.mat-input-element[type=date]::after,.mat-input-element[type=datetime]::after,.mat-input-element[type=datetime-local]::after,.mat-input-element[type=month]::after,.mat-input-element[type=week]::after,.mat-input-element[type=time]::after{content:\\\" \\\";white-space:pre;width:1px}.mat-input-element::-webkit-inner-spin-button,.mat-input-element::-webkit-calendar-picker-indicator,.mat-input-element::-webkit-clear-button{font-size:.75em}.mat-input-element::placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element::-moz-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-moz-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element::-webkit-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-webkit-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element:-ms-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element:-ms-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-form-field-hide-placeholder .mat-input-element::placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-moz-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-webkit-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element:-ms-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}textarea.mat-input-element{resize:vertical;overflow:auto}textarea.mat-input-element.cdk-textarea-autosize{resize:none}textarea.mat-input-element{padding:2px 0;margin:-2px 0}select.mat-input-element{-moz-appearance:none;-webkit-appearance:none;position:relative;background-color:transparent;display:inline-flex;box-sizing:border-box;padding-top:1em;top:-1em;margin-bottom:-1em}select.mat-input-element::-ms-expand{display:none}select.mat-input-element::-moz-focus-inner{border:0}select.mat-input-element:not(:disabled){cursor:pointer}select.mat-input-element::-ms-value{color:inherit;background:none}.mat-focused .cdk-high-contrast-active select.mat-input-element::-ms-value{color:inherit}.mat-form-field-type-mat-native-select .mat-form-field-infix::after{content:\\\"\\\";width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;position:absolute;top:50%;right:0;margin-top:-2.5px;pointer-events:none}[dir=rtl] .mat-form-field-type-mat-native-select .mat-form-field-infix::after{right:auto;left:0}.mat-form-field-type-mat-native-select .mat-input-element{padding-right:15px}[dir=rtl] .mat-form-field-type-mat-native-select .mat-input-element{padding-right:0;padding-left:15px}.mat-form-field-type-mat-native-select .mat-form-field-label-wrapper{max-width:calc(100% - 10px)}.mat-form-field-type-mat-native-select.mat-form-field-appearance-outline .mat-form-field-infix::after{margin-top:-5px}.mat-form-field-type-mat-native-select.mat-form-field-appearance-fill .mat-form-field-infix::after{margin-top:-10px}\\n\", \".mat-form-field-appearance-legacy .mat-form-field-label{transform:perspective(100px);-ms-transform:none}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon{width:1em}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button{font:inherit;vertical-align:baseline}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button .mat-icon{font-size:inherit}.mat-form-field-appearance-legacy .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-legacy .mat-form-field-ripple{top:0;height:2px;overflow:hidden}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}.mat-form-field-appearance-legacy.mat-form-field-invalid:not(.mat-focused) .mat-form-field-ripple{height:1px}\\n\", \".mat-form-field-appearance-outline .mat-form-field-wrapper{margin:.25em 0}.mat-form-field-appearance-outline .mat-form-field-flex{padding:0 .75em 0 .75em;margin-top:-0.25em;position:relative}.mat-form-field-appearance-outline .mat-form-field-prefix,.mat-form-field-appearance-outline .mat-form-field-suffix{top:.25em}.mat-form-field-appearance-outline .mat-form-field-outline{display:flex;position:absolute;top:.25em;left:0;right:0;bottom:0;pointer-events:none}.mat-form-field-appearance-outline .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-end{border:1px solid currentColor;min-width:5px}.mat-form-field-appearance-outline .mat-form-field-outline-start{border-radius:5px 0 0 5px;border-right-style:none}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-start{border-right-style:solid;border-left-style:none;border-radius:0 5px 5px 0}.mat-form-field-appearance-outline .mat-form-field-outline-end{border-radius:0 5px 5px 0;border-left-style:none;flex-grow:1}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-end{border-left-style:solid;border-right-style:none;border-radius:5px 0 0 5px}.mat-form-field-appearance-outline .mat-form-field-outline-gap{border-radius:.000001px;border:1px solid currentColor;border-left-style:none;border-right-style:none}.mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-outline-gap{border-top-color:transparent}.mat-form-field-appearance-outline .mat-form-field-outline-thick{opacity:0}.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-gap{border-width:2px}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline{opacity:0;transition:opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline{opacity:0;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline .mat-form-field-subscript-wrapper{padding:0 1em}.mat-form-field-appearance-outline._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-start,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-end,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-gap{transition:none}\\n\", \".mat-form-field-appearance-standard .mat-form-field-flex{padding-top:.75em}.mat-form-field-appearance-standard .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-standard .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-ripple{height:0;border-top:2px}.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}.mat-form-field-appearance-standard:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-standard._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}\\n\"]\n  }]\n}];\n\nMatFormField.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_LABEL_GLOBAL_OPTIONS]\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_FORM_FIELD_DEFAULT_OPTIONS]\n    }]\n  }, {\n    type: Platform\n  }, {\n    type: NgZone\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }];\n};\n\nMatFormField.propDecorators = {\n  appearance: [{\n    type: Input\n  }],\n  hideRequiredMarker: [{\n    type: Input\n  }],\n  hintLabel: [{\n    type: Input\n  }],\n  floatLabel: [{\n    type: Input\n  }],\n  underlineRef: [{\n    type: ViewChild,\n    args: ['underline']\n  }],\n  _connectionContainerRef: [{\n    type: ViewChild,\n    args: ['connectionContainer', {\n      static: true\n    }]\n  }],\n  _inputContainerRef: [{\n    type: ViewChild,\n    args: ['inputContainer']\n  }],\n  _label: [{\n    type: ViewChild,\n    args: ['label']\n  }],\n  _controlNonStatic: [{\n    type: ContentChild,\n    args: [MatFormFieldControl]\n  }],\n  _controlStatic: [{\n    type: ContentChild,\n    args: [MatFormFieldControl, {\n      static: true\n    }]\n  }],\n  _labelChildNonStatic: [{\n    type: ContentChild,\n    args: [MatLabel]\n  }],\n  _labelChildStatic: [{\n    type: ContentChild,\n    args: [MatLabel, {\n      static: true\n    }]\n  }],\n  _placeholderChild: [{\n    type: ContentChild,\n    args: [MatPlaceholder]\n  }],\n  _errorChildren: [{\n    type: ContentChildren,\n    args: [MAT_ERROR, {\n      descendants: true\n    }]\n  }],\n  _hintChildren: [{\n    type: ContentChildren,\n    args: [_MAT_HINT, {\n      descendants: true\n    }]\n  }],\n  _prefixChildren: [{\n    type: ContentChildren,\n    args: [MAT_PREFIX, {\n      descendants: true\n    }]\n  }],\n  _suffixChildren: [{\n    type: ContentChildren,\n    args: [MAT_SUFFIX, {\n      descendants: true\n    }]\n  }]\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar MatFormFieldModule = function MatFormFieldModule() {\n  _classCallCheck(this, MatFormFieldModule);\n};\n\nMatFormFieldModule.decorators = [{\n  type: NgModule,\n  args: [{\n    declarations: [MatError, MatFormField, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix],\n    imports: [CommonModule, MatCommonModule, ObserversModule],\n    exports: [MatCommonModule, MatError, MatFormField, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix]\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_ERROR, MAT_FORM_FIELD, MAT_FORM_FIELD_DEFAULT_OPTIONS, MAT_PREFIX, MAT_SUFFIX, MatError, MatFormField, MatFormFieldControl, MatFormFieldModule, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix, _MAT_HINT, getMatFormFieldDuplicatedHintError, getMatFormFieldMissingControlError, getMatFormFieldPlaceholderConflictError, matFormFieldAnimations };","map":{"version":3,"sources":["../../../../../../src/material/form-field/error.ts","../../../../../../src/material/form-field/form-field-animations.ts","../../../../../../src/material/form-field/form-field-control.ts","../../../../../../src/material/form-field/form-field-errors.ts","../../../../../../src/material/form-field/hint.ts","../../../../../../src/material/form-field/label.ts","../../../../../../src/material/form-field/placeholder.ts","../../../../../../src/material/form-field/prefix.ts","../../../../../../src/material/form-field/suffix.ts","../../../../../../src/material/form-field/form-field.ts","../../../../../../src/material/form-field/form-field-module.ts","../../../../../../src/material/form-field/public-api.ts","../../../../../../src/material/form-field/index.ts"],"names":["nextUniqueId"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, InjectionToken, Input} from '@angular/core';\n\nlet nextUniqueId = 0;\n\n/**\n * Injection token that can be used to reference instances of `MatError`. It serves as\n * alternative token to the actual `MatError` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_ERROR = new InjectionToken<MatError>('MatError');\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  },\n  providers: [{provide: MAT_ERROR, useExisting: MatError}],\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\nimport {Directive} from '@angular/core';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\n@Directive()\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /**\n   * Value of `aria-describedby` that should be merged with the described-by ids\n   * which are set by the form-field.\n   */\n  readonly userAriaDescribedBy?: string;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, InjectionToken, Input} from '@angular/core';\n\nlet nextUniqueId = 0;\n\n/**\n * Injection token that can be used to reference instances of `MatHint`. It serves as\n * alternative token to the actual `MatHint` class which could cause unnecessary\n * retention of the class and its directive metadata.\n *\n * *Note*: This is not part of the public API as the MDC-based form-field will not\n * need a lightweight token for `MatHint` and we want to reduce breaking changes.\n */\nexport const _MAT_HINT = new InjectionToken<MatHint>('MatHint');\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  },\n  providers: [{provide: _MAT_HINT, useExisting: MatHint}],\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, InjectionToken} from '@angular/core';\n\n/**\n * Injection token that can be used to reference instances of `MatPrefix`. It serves as\n * alternative token to the actual `MatPrefix` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_PREFIX = new InjectionToken<MatPrefix>('MatPrefix');\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n  providers: [{provide: MAT_PREFIX, useExisting: MatPrefix}],\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, InjectionToken} from '@angular/core';\n\n/**\n * Injection token that can be used to reference instances of `MatSuffix`. It serves as\n * alternative token to the actual `MatSuffix` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_SUFFIX = new InjectionToken<MatSuffix>('MatSuffix');\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n  providers: [{provide: MAT_SUFFIX, useExisting: MatSuffix}],\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MAT_ERROR, MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {_MAT_HINT, MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MAT_PREFIX, MatPrefix} from './prefix';\nimport {MAT_SUFFIX, MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nclass MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nconst _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/** Possible values for the \"floatLabel\" form-field input. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n  hideRequiredMarker?: boolean;\n  /**\n   * Whether the label for form-fields should by default float `always`,\n   * `never`, or `auto` (only when necessary).\n   */\n  floatLabel?: FloatLabelType;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n/**\n * Injection token that can be used to inject an instances of `MatFormField`. It serves\n * as alternative token to the actual `MatFormField` class which would cause unnecessary\n * retention of the `MatFormField` class and its component metadata.\n */\nexport const MAT_FORM_FIELD = new InjectionToken<MatFormField>('MatFormField');\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat()',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {provide: MAT_FORM_FIELD, useExisting: MatFormField},\n  ]\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._outlineGapCalculationNeededOnStable = true;\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  readonly _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the label element.\n  readonly _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._getDefaultFloatLabelState();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer', {static: true}) _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef<HTMLElement>;\n\n  @ContentChild(MatFormFieldControl) _controlNonStatic: MatFormFieldControl<any>;\n  @ContentChild(MatFormFieldControl, {static: true}) _controlStatic: MatFormFieldControl<any>;\n  get _control() {\n    // TODO(crisbeto): we need this workaround in order to support both Ivy and ViewEngine.\n    //  We should clean this up once Ivy is the default renderer.\n    return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n  }\n  set _control(value) {\n    this._explicitFormFieldControl = value;\n  }\n  private _explicitFormFieldControl: MatFormFieldControl<any>;\n\n  @ContentChild(MatLabel) _labelChildNonStatic: MatLabel;\n  @ContentChild(MatLabel, {static: true}) _labelChildStatic: MatLabel;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n\n  @ContentChildren(MAT_ERROR, {descendants: true}) _errorChildren: QueryList<MatError>;\n  @ContentChildren(_MAT_HINT, {descendants: true}) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MAT_PREFIX, {descendants: true}) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MAT_SUFFIX, {descendants: true}) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaults:\n          MatFormFieldDefaultOptions, private _platform: Platform, private _ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._getDefaultFloatLabelState();\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n    this._hideRequiredMarker = (_defaults && _defaults.hideRequiredMarker != null) ?\n        _defaults.hideRequiredMarker : false;\n  }\n\n  /**\n   * Gets the id of the label element. If no label is present, returns `null`.\n   */\n  getLabelId(): string|null {\n    return this._hasFloatingLabel() ? this._labelId : null;\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Note that we have to run outside of the `NgZone` explicitly,\n    // in order to avoid throwing users into an infinite loop\n    // if `zone-patch-rxjs` is included.\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._outlineGapCalculationNeededOnStable) {\n          this.updateOutlineGap();\n        }\n      });\n    });\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._outlineGapCalculationNeededOnStable = true;\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (typeof requestAnimationFrame === 'function') {\n          this._ngZone.runOutsideAngular(() => {\n            requestAnimationFrame(() => this.updateOutlineGap());\n          });\n        } else {\n          this.updateOutlineGap();\n        }\n      });\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!(this._labelChildNonStatic || this._labelChildStatic);\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat() &&\n        ((this._control && this._control.shouldLabelFloat) || this._shouldAlwaysFloat());\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat()) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled && this._label) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /** Gets the default float label state. */\n  private _getDefaultFloatLabelState(): FloatLabelType {\n    return (this._defaults && this._defaults.floatLabel) || this._labelOptions.float || 'auto';\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      // TODO(wagnermaciel): Remove the type check when we find the root cause of this bug.\n      if (this._control.userAriaDescribedBy &&\n        typeof this._control.userAriaDescribedBy === 'string') {\n        ids.push(...this._control.userAriaDescribedBy.split(' '));\n      }\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids.push(...this._errorChildren.map(error => error.id));\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent!.trim()) {\n      return;\n    }\n\n    if (!this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!this._isAttachedToDOM()) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelChildren = labelEl.children;\n      const labelStart = this._getStartEnd(labelChildren[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (let i = 0; i < labelChildren.length; i++) {\n        labelWidth += (labelChildren[i] as HTMLElement).offsetWidth;\n      }\n      startWidth = Math.abs(labelStart - containerStart) - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls[i].style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls[i].style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return (this._dir && this._dir.value === 'rtl') ? rect.right : rect.left;\n  }\n\n  /** Checks whether the form field is attached to the DOM. */\n  private _isAttachedToDOM(): boolean {\n    const element: HTMLElement = this._elementRef.nativeElement;\n\n    if (element.getRootNode) {\n      const rootNode = element.getRootNode();\n      // If the element is inside the DOM the root node will be either the document\n      // or the closest shadow root, otherwise it'll be the element itself.\n      return rootNode && rootNode !== element;\n    }\n\n    // Otherwise fall back to checking if it's in the document. This doesn't account for\n    // shadow DOM, however browser that support shadow DOM should support `getRootNode` as well.\n    return document.documentElement!.contains(element);\n  }\n\n  static ngAcceptInputType_hideRequiredMarker: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './form-field-module';\nexport * from './error';\nexport * from './form-field';\nexport {MatFormFieldControl} from './form-field-control';\nexport * from './form-field-errors';\nexport * from './hint';\nexport * from './placeholder';\nexport * from './prefix';\nexport * from './suffix';\nexport * from './label';\nexport * from './form-field-animations';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}